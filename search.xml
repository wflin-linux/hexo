<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ATM小项目</title>
    <url>/hexo/2021/10/28/aiot/</url>
    <content><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><ul>
<li><p>累乘 </p>
<ol>
<li>非递归</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5！= 5*4*3*2*1 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=num;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		count*=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,function(<span class="number">5</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>递归</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span>  <span class="title function_">fac</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&gt;<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">return</span> n*fac(n<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//	scanf(&quot;%d&quot;,&amp;num);</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d!=%d\n&quot;</span>,num,fac(num));</span><br><span class="line"><span class="comment">//	printf(&quot;%d的累加是：%d&quot;,num,Star(num));</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3*4 矩阵，最大值和位置输出</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> csize  4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rsize  3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">findMax</span><span class="params">(<span class="type">int</span> arry[csize][rsize])</span>&#123;</span><br><span class="line">	<span class="type">int</span> i,j;</span><br><span class="line">	<span class="type">int</span> max = arry[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; csize; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> ( j = <span class="number">1</span>; j &lt; rsize; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">				<span class="keyword">if</span> (max&lt;arry[i][j])</span><br><span class="line">				&#123;</span><br><span class="line">					max=arry[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">(<span class="type">int</span> arry[csize][rsize])</span>&#123;</span><br><span class="line">	<span class="type">int</span> max = findMax(arry);</span><br><span class="line">	<span class="type">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; csize; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; rsize; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,arry[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; csize; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> ( j = <span class="number">1</span>; j &lt; rsize; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">				<span class="keyword">if</span> (max==arry[i][j])</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot; i = %d,j = %d&quot;</span>,i,<span class="number">2</span>);</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> arry[csize][rsize]=&#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">	display(arry);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>&#125;; </span><br><span class="line">	<span class="type">int</span> i,j,temp;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;排序之前:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d   &quot;</span>,a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;a[j])&#123;</span><br><span class="line">				temp = a[i];</span><br><span class="line">				a[i] = a[j];</span><br><span class="line">				a[j] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n排序之后:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d   &quot;</span>,a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ATM"><a href="#ATM" class="headerlink" title="ATM"></a>ATM</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 登录</span></span><br><span class="line"><span class="comment"> * 	创建一个账户</span></span><br><span class="line"><span class="comment"> * 2. 菜单</span></span><br><span class="line"><span class="comment"> * 3. 存钱</span></span><br><span class="line"><span class="comment"> * 4. 取钱</span></span><br><span class="line"><span class="comment"> * 5. 查询</span></span><br><span class="line"><span class="comment"> * 6. 退出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//#define _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  account   <span class="string">&quot;admin&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  passWd   <span class="string">&quot;123456&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pass_word</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> user[<span class="number">10</span>];</span><br><span class="line">	<span class="type">char</span> passwd[<span class="number">10</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入账户：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;user);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入密码:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, passwd);</span><br><span class="line">	<span class="keyword">if</span> ((<span class="built_in">strcmp</span>(user, account) == <span class="number">0</span>) &amp;&amp; (<span class="built_in">strcmp</span>(passwd, passWd) == <span class="number">0</span>)) &#123;</span><br><span class="line">		system(<span class="string">&quot;color 1f&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		menu();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		system(<span class="string">&quot;color 4f&quot;</span>);</span><br><span class="line">		pass_word();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存钱</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveMoney</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你要存的金额：&quot;</span>);</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">	count += num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;存入金额完成 !&quot;</span>);</span><br><span class="line">	Sleep(<span class="number">1000</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	menu();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取钱</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你要取钱的金额：&quot;</span>);</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="type">int</span> flag;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">	flag = num&lt;count?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">		count-=num;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;取钱操作成功！\n&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;余额不足!\n&quot;</span>);</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;是否需要存钱：？如果需要，请按 1,不需要任意键退出到主菜单\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;flag);</span><br><span class="line">		<span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;正在跳转存钱接口....\n&quot;</span>);</span><br><span class="line">			Sleep(<span class="number">1000</span>);</span><br><span class="line">			system(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">			saveMoney();</span><br><span class="line">		&#125;menu();</span><br><span class="line">	&#125;</span><br><span class="line">	Sleep(<span class="number">1000</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	menu();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;你的余额是：%d\n&quot;</span>,count);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	menu();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 菜单</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> choice;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t****欢迎使用***银行ATM系统***\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t*********1.查询余额**********\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t*********2.存款**************\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t*********3.取款**************\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t*********4.退出**************\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入要操作的选项:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;choice);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;choice =%d&quot;</span>,choice);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">switch</span> (choice)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:check(); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:saveMoney(); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:getMoney(); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:<span class="built_in">exit</span>(<span class="number">0</span>); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;选择错误\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	pass_word();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>aiot</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>BootLoader</title>
    <url>/hexo/2023/08/02/bootloader/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>bootloader</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>c</title>
    <url>/hexo/2021/11/19/c/</url>
    <content><![CDATA[<h1 id="逻辑表达式（又叫布尔表达式）"><a href="#逻辑表达式（又叫布尔表达式）" class="headerlink" title="逻辑表达式（又叫布尔表达式）"></a>逻辑表达式（又叫布尔表达式）</h1><h2 id="与-、或-、非"><a href="#与-、或-、非" class="headerlink" title="与( &amp; )、或( | )、非( ! )"></a>与( &amp; )、或( | )、非( ! )</h2><ul>
<li><p><strong>逻辑表达式：</strong>简单点理解就是 只有俩结果 真 或 假 的运算结果的代码语句都可以叫 逻辑表达式</p>
</li>
<li><p>真 或 假 在C语言没有对应的类型，但是可以用 0（假） 或 1 （真）表示逻辑表达式的结果，boolean 类型是 c++ 扩充进来的，C语言 原生没用 布尔类型。但是可以代替 用 0 和 非0</p>
</li>
<li><p>C语言中 说的 <strong>真就是 1</strong> 、<strong>假就是 0</strong> ，可以，但是不准确。这个说法的由来可以验证，如下程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;!0 = %d&quot;</span>,!<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;!5 = %d&quot;</span>,!<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;!1 = %d&quot;</span>,!<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;!&#x27;a&#x27; = %d&quot;</span>,!<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>通过上面的程序我们可以看到 他们的结果都是 0 和 1，所以 我们 通常说的 0 是 假，1 是 真 ；但是为啥说不准确呢？就在于 我们上面的程序中 的 !5 的结果，!’a’ 的结果都是 0， 说明 5 和 ‘a’ 都是真，那么我们前面说 1 是真是不是就不准确了，所以 应该是  <strong>0是假，非0就是真</strong>;，所以 像 后面的 if（判断语句），while for，do while 循环这些，判断语句的结果就是逻辑表达式的结果，真或者假，只有真（true）才进入，假（false）就不进入。</p>
</li>
</ul>
<h1 id="选择分支"><a href="#选择分支" class="headerlink" title="选择分支"></a>选择分支</h1><h2 id="if-else-结构"><a href="#if-else-结构" class="headerlink" title="if else 结构"></a>if else 结构</h2><ul>
<li><p>第一种</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种情况</span></span><br><span class="line"><span class="keyword">if</span>( 条件)&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>第二种</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种情况</span></span><br><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件)&#123;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**特殊 1 **</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()	<span class="comment">//1</span></span><br><span class="line">    <span class="built_in">printf</span>();</span><br><span class="line"><span class="keyword">if</span>()	<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">printf</span>();</span><br><span class="line"> <span class="keyword">else</span>	<span class="comment">//3</span></span><br><span class="line">     <span class="built_in">printf</span>();</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">//4</span></span><br><span class="line">    <span class="built_in">printf</span>()</span><br><span class="line"><span class="comment">// 这种情况的 if  else 语句他们和 else  的匹配规则是 就近原则 else 只匹配和它最近的那一个 if,也就是 1 那个 if 匹配 4 else ,2 那个 if 匹配 3那个 else</span></span><br></pre></td></tr></table></figure>

<p><strong>特殊 2</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">    <span class="built_in">printf</span>()</span><br><span class="line">    <span class="built_in">printf</span>()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 如果是这种结构的话，会报错else 找不到 if ，因为 if 语法中它只负责紧跟 if 后面的第一句语句(可以是 复合语句，就是大括号包括起来的)</span></span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">    <span class="built_in">printf</span>()</span><br><span class="line">    <span class="built_in">printf</span>()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>()</span><br><span class="line">    <span class="comment">// 这样改就对了</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="switch-case-结构"><a href="#switch-case-结构" class="headerlink" title="switch case 结构"></a>switch case 结构</h2><ul>
<li><p>语法规则</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(flag)&#123;</span><br><span class="line">   <span class="keyword">case</span><span class="number">&#x27;</span>标志<span class="string">&#x27;:&#123;</span></span><br><span class="line"><span class="string">       break;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   case&#x27;</span>标志<span class="string">&#x27;:&#123;</span></span><br><span class="line"><span class="string">       </span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   case&#x27;</span>标志<span class="string">&#x27;:&#123;</span></span><br><span class="line"><span class="string">       break;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">    default:&#123;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// flag 就是传入的参数，case&#x27;</span>标志<span class="string">&#x27;：就是出现响应情况就执行 case 后的代码，case 后可以直接跟多条语句代码，但是个人建议把所有代码用&#123;&#125;包起来 弄成一个代码块，代码模块化，方便阅读,对于代码中的 break 选项 是可选项 它在代码中的意思就是 就是打破 让执行跳出 switch 因为如果 case 后面没有 break 的话就会在满足情况的 case 那里开始一直执行 包括 default 也会执行，或者就是一直执行到有 break 时才跳出，具体用法读者 可以使用代码验证</span></span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>if else 和 switch 区别：</strong></p>
<p> if else 适合少量分支 一般就 2-3 个 分支 推荐使用 ，但是分支一旦太多会影响程序的执行效率，而多分支 一般推荐使用 switch ，因为 switch 在多分支上执行效率 比 多分支 if 快，一般都是套用（两个一起用）</p>
</li>
</ul>
<h2 id="代码文件"><a href="#代码文件" class="headerlink" title="代码文件"></a>代码文件</h2><ul>
<li>等级判定程序.c</li>
<li>计算器.c</li>
<li>作业登记.c</li>
</ul>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍"></a>语法介绍</h2><ul>
<li><p>while()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">while</span>(flag)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// while、for 和 if 的语法差不了太多，也是只执行紧跟这个的第一句，如果要执行多句就要把语句用 &#123;&#125; 这个写成语句块的形式（复合语句）,这个 flag 是逻辑表达式的一个结果，后面讲 逻辑表达式</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>for()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 完整形态</span></span><br><span class="line"><span class="keyword">for</span>( ; ; )</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span>( ; ;)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缺项形态</span></span><br><span class="line"><span class="comment">// 这个说明前面指定了 i 的初值</span></span><br><span class="line"><span class="keyword">for</span>( ;i&lt;n;i++)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这个说明 i 退出条件在循环体里面，循环体就是要循环的内容，可以是语句块，也可以是一条语句</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 这个说明循环里面有 i 变化的方式</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 这个是等价于 while的</span></span><br><span class="line"><span class="keyword">for</span>(;i&lt;n;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 全省略,说明程序使用了 break 退出循环，或者 goto （不建议使用）</span></span><br><span class="line"><span class="keyword">for</span>(;;)</span><br></pre></td></tr></table></figure>


</li>
<li><p>do while()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(flag)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// do while 循环是先执行再判断，而我们前面介绍的是先判断再执行，所以 这个比较特殊 ，用得也很少一般，作为了解就行。 </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h2><ul>
<li><p>break</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(num)&#123;</span><br><span class="line">        --num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;num = %d&quot;</span>,num);</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行之后可以再试试把 break 注释之后再执行一次</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>continue</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(num)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;num = %d&quot;</span>,num);</span><br><span class="line">        --num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>continue 和 break 用法说明</strong>：通过执行上面的程序 break 那个程序可以明显看到 当 num &#x3D;&#x3D; 3 时 程序直接退出了。有 continue 那个程序的时候 可以看到 打印的结果少了一个 3 ，所以 break 关键字的意思还是和 switch 里面的用法一样 用来打破的，循环里面都是打破循环 while 、for 、do while 都是，而 continue 就是就是 忽略掉当前循环直接进入下一次循环。</li>
</ul>
</li>
</ul>
<h2 id="第归"><a href="#第归" class="headerlink" title="第归"></a>第归</h2><ul>
<li><p>有点难懂，需要把函数讲了再讲。先留着</p>
<p>那个递归的题目是：<img src="/hexo/2021/11/19/c/c/%E9%80%92%E5%BD%92%E9%A2%98%E7%9B%AE.jpg"></p>
</li>
</ul>
<h2 id="代码文件-1"><a href="#代码文件-1" class="headerlink" title="代码文件"></a>代码文件</h2><ul>
<li>循环</li>
<li>乘法表.c</li>
<li>循环嵌套</li>
</ul>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>aiot</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake</title>
    <url>/hexo/2024/03/14/cmake/</url>
    <content><![CDATA[<h1 id="所需软件安装"><a href="#所需软件安装" class="headerlink" title="所需软件安装"></a>所需软件安装</h1><h2 id="操作环境为-Ubuntu-Linux"><a href="#操作环境为-Ubuntu-Linux" class="headerlink" title="操作环境为 Ubuntu Linux"></a>操作环境为 Ubuntu Linux</h2><h3 id="软件：gcc-g-make-cmake"><a href="#软件：gcc-g-make-cmake" class="headerlink" title="软件：gcc g++ make cmake"></a>软件：gcc g++ make cmake</h3><blockquote>
<p>sudo apt install gcc g++ make cmake -y</p>
</blockquote>
<h1 id="cmake相关命令介绍"><a href="#cmake相关命令介绍" class="headerlink" title="cmake相关命令介绍"></a>cmake相关命令介绍</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">add_executable</span>(app add.c div.c main.c mult.c sub.c)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>cmake_minimum_required:设置 编译项目的 cmake 最小版本，</p>
</li>
<li><p><code>可选，非必须，如果不加可能会有警告</code></p>
</li>
<li><p>project:设置项目的名字,定义工程名称，并可指定工程的版本、工程描述、web主页地址、支持的语言（默认情况支持所有语言），如果不需要这些都是可以忽略的，只需要指定出工程名字即可</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PROJECT 指令的语法是：</span></span><br><span class="line"><span class="keyword">project</span>(&lt;<span class="keyword">PROJECT</span>-NAME&gt; [&lt;language-name&gt;...])</span><br><span class="line"><span class="keyword">project</span>(&lt;<span class="keyword">PROJECT</span>-NAME&gt;</span><br><span class="line">       [VERSION &lt;major&gt;[.&lt;minor&gt;[.&lt;patch&gt;[.&lt;tweak&gt;]]]]</span><br><span class="line">       [DESCRIPTION &lt;<span class="keyword">project</span>-description-<span class="keyword">string</span>&gt;]</span><br><span class="line">       [HOMEPAGE_URL &lt;url-<span class="keyword">string</span>&gt;]</span><br><span class="line">       [LANGUAGES &lt;language-name&gt;...])</span><br></pre></td></tr></table></figure>
</li>
<li><p>add_executable:需要参与编译的源文件</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(可执行程序名 源文件名称)</span><br></pre></td></tr></table></figure>

<ul>
<li>这里的可执行程序名和project中的项目名没有任何关系</li>
<li>源文件名可以是一个也可以是多个，如有多个可用空格或;间隔</li>
</ul>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 样式1</span></span><br><span class="line"><span class="keyword">add_executable</span>(app add.c div.c main.c mult.c sub.c)</span><br><span class="line"><span class="comment"># 样式2</span></span><br><span class="line"><span class="keyword">add_executable</span>(app add.c;div.c;main.c;mult.c;sub.c)</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行 cmake 命令</p>
</li>
</ul>
<h1 id="cmake常用命令和规范"><a href="#cmake常用命令和规范" class="headerlink" title="cmake常用命令和规范"></a>cmake常用命令和规范</h1><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul>
<li><p>将文件名对应的字符串存储起来</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SET 指令的语法是：</span></span><br><span class="line"><span class="comment"># [] 中的参数为可选项, 如不需要可以不写</span></span><br><span class="line"><span class="keyword">SET</span>(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</span><br></pre></td></tr></table></figure>

<ul>
<li>VAR：变量名 </li>
<li>VALUE：变量值</li>
</ul>
</li>
<li><p>eg:</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1: 各个源文件之间使用空格间隔</span></span><br><span class="line"><span class="comment"># set(SRC_LIST add.c  div.c   main.c  mult.c  sub.c)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2: 各个源文件之间使用分号 ; 间隔</span></span><br><span class="line"><span class="keyword">set</span>(SRC_LIST add.c;div.c;main.c;mult.c;sub.c)</span><br><span class="line"><span class="keyword">add_executable</span>(app  <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="指定使用的c-标准"><a href="#指定使用的c-标准" class="headerlink" title="指定使用的c++标准"></a>指定使用的c++标准</h2><ul>
<li><p>在编写C++程序的时候，可能会用到C++11、C++14、C++17、C++20等新特性，那么就需要在编译的时候在编译命令中制定出要使用哪个标准：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ *.cpp -std=c++11 -o app</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>上面的例子中通过参数-std&#x3D;c++11指定出要使用c++11标准编译程序，C++标准对应有一宏叫做DCMAKE_CXX_STANDARD。在CMake中想要指定C++标准有两种方式：</p>
<ul>
<li><p>在 CMakeLists.txt 中通过 set 命令指定</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#增加-std=c++11</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="comment">#增加-std=c++14</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"><span class="comment">#增加-std=c++17</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在执行 cmake 命令的时候指定出这个宏的值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加-std=c++11</span></span><br><span class="line">cmake CMakeLists.txt文件路径 -DCMAKE_CXX_STANDARD=11</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加-std=c++14</span></span><br><span class="line">cmake CMakeLists.txt文件路径 -DCMAKE_CXX_STANDARD=14</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加-std=c++17</span></span><br><span class="line">cmake CMakeLists.txt文件路径 -DCMAKE_CXX_STANDARD=17</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="指定输出路径"><a href="#指定输出路径" class="headerlink" title="指定输出路径"></a>指定输出路径</h2><ul>
<li><p>在CMake中指定可执行程序输出的路径，也对应一个宏，叫做EXECUTABLE_OUTPUT_PATH，它的值还是通过set命令进行设置:</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(HOME /home/robin/Linux/Sort)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;HOME&#125;</span>/bin)</span><br></pre></td></tr></table></figure>

<ul>
<li>第一行：定义一个变量用于存储一个绝对路径</li>
<li>第二行：将拼接好的路径值设置给EXECUTABLE_OUTPUT_PATH宏<ul>
<li>如果这个路径中的子目录不存在，会自动生成，无需自己手动创建</li>
</ul>
</li>
<li><code>由于可执行程序是基于 cmake 命令生成的 makefile 文件然后再执行 make 命令得到的，所以如果此处指定可执行程序生成路径的时候使用的是相对路径 ./xxx/xxx，那么这个路径中的 ./ 对应的就是 makefile 文件所在的那个目录。</code></li>
</ul>
</li>
</ul>
<h2 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h2><ul>
<li><p>如果一个项目里边的源文件很多，在编写CMakeLists.txt文件的时候不可能将项目目录的各个文件一一罗列出来，这样太麻烦也不现实。所以，在CMake中为我们提供了搜索文件的命令，可以使用aux_source_directory命令或者file命令。</p>
<ul>
<li><p>在 CMake 中使用aux_source_directory 命令可以查找某个路径下的所有源文件，命令格式为</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(&lt; dir &gt; &lt; variable &gt;)</span><br></pre></td></tr></table></figure>

<ul>
<li>dir：要搜索的目录</li>
<li>variable：将从dir目录下搜索到的源文件列表存储到该变量中</li>
</ul>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索 src 目录下的源文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src SRC_LIST)</span><br><span class="line"><span class="keyword">add_executable</span>(app  <span class="variable">$&#123;SRC_LIST&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果一个项目里边的源文件很多，在编写CMakeLists.txt文件的时候不可能将项目目录的各个文件一一罗列出来，这样太麻烦了。所以，在CMake中为我们提供了搜索文件的命令，他就是file（当然，除了搜索以外通过 file 还可以做其他事情）</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型)</span><br></pre></td></tr></table></figure>

<ul>
<li>GLOB: 将指定目录下搜索到的满足条件的所有文件名生成一个列表，并将其存储到变量中。</li>
<li>GLOB_RECURSE：递归搜索指定目录，将搜索到的满足条件的文件名生成一个列表，并将其存储到变量中。</li>
</ul>
</li>
<li><p>eg:</p>
<ul>
<li><p>搜索当前目录的src目录下所有的源文件，并存储到变量中</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB MAIN_SRC <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB MAIN_HEAD <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>/*.h)</span><br></pre></td></tr></table></figure>
</li>
<li><p>CMAKE_CURRENT_SOURCE_DIR 宏表示当前访问的 CMakeLists.txt 文件所在的路径。</p>
</li>
<li><p>关于要搜索的文件路径和类型可加双引号，也可不加:</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB MAIN_HEAD <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.h&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="包含头文件"><a href="#包含头文件" class="headerlink" title="包含头文件"></a>包含头文件</h2><ul>
<li><p>在编译项目源文件的时候，很多时候都需要将源文件对应的头文件路径指定出来，这样才能保证在编译过程中编译器能够找到这些头文件，并顺利通过编译。在CMake中设置要包含的目录也很简单，通过一个命令就可以搞定了，他就是include_directories:</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(headpath)</span><br></pre></td></tr></table></figure>
</li>
<li><p>eg:</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree .</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include       </span><br><span class="line">│   └── head.h</span><br><span class="line">└── src</span><br><span class="line">    ├── add.c</span><br><span class="line">    ├── div.c</span><br><span class="line">    ├── main.c</span><br><span class="line">    ├── mult.c</span><br><span class="line">    └── sub.c</span><br><span class="line">    </span><br><span class="line">3 directories, 7 files</span><br></pre></td></tr></table></figure>
</li>
<li><p>CMakeLists.txt文件内容如下:</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(HOME /home/robin/Linux/calc)</span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;HOME&#125;</span>/bin/)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(app  <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>其中，第六行指定就是头文件的路径，PROJECT_SOURCE_DIR宏对应的值就是我们在使用cmake命令时，后面紧跟的目录，一般是工程的根目录。</p>
</li>
</ul>
<h2 id="制作静态库"><a href="#制作静态库" class="headerlink" title="制作静态库"></a>制作静态库</h2><ul>
<li>add_library(库名称 STATIC 源文件1 [源文件2] …) <ul>
<li>static 可以不加 默认就是静态库</li>
</ul>
</li>
</ul>
<h2 id="制作动态库"><a href="#制作动态库" class="headerlink" title="制作动态库"></a>制作动态库</h2><ul>
<li>add_library(库名称 SHARED 源文件1 [源文件2] …)</li>
</ul>
<h2 id="指定库的输出路径"><a href="#指定库的输出路径" class="headerlink" title="指定库的输出路径"></a>指定库的输出路径</h2><h3 id="适用于动态库"><a href="#适用于动态库" class="headerlink" title="适用于动态库"></a>适用于动态库</h3><ul>
<li><p>对于生成的库文件来说和可执行程序一样都可以指定输出路径。由于在Linux下生成的动态库默认是有执行权限的，所以可以按照生成可执行程序的方式去指定它生成的目录</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置动态库生成路径</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(calc SHARED <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于这种方式来说，其实就是通过 <code>set</code> 命令给 <code>EXECUTABLE_OUTPUT_PATH</code> 宏设置了一个路径，这个路径就是可执行文件生成的路径。</p>
</li>
</ul>
<h3 id="都适用"><a href="#都适用" class="headerlink" title="都适用"></a>都适用</h3><ul>
<li><p>由于在Linux下生成的静态库默认不具有可执行权限，所以在指定静态库生成的路径的时候就不能使用 <code>EXECUTABLE_OUTPUT_PATH</code> 宏了，而应该使用 <code>LIBRARY_OUTPUT_PATH</code>，这个宏对应静态库文件和动态库文件都适用。</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(CALC)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="comment"># 设置动态库/静态库生成路径</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)</span><br><span class="line"><span class="comment"># 生成动态库</span></span><br><span class="line"><span class="comment">#add_library(calc SHARED $&#123;SRC_LIST&#125;)</span></span><br><span class="line"><span class="comment"># 生成静态库</span></span><br><span class="line"><span class="keyword">add_library</span>(calc STATIC <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="链接库"><a href="#链接库" class="headerlink" title="链接库"></a>链接库</h2><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><ul>
<li>link_libraries(<static lib> [<static lib>…])<ul>
<li>参数1：指定出要链接的静态库的名字<ul>
<li>可以是全名 libxxx.a</li>
<li>也可以是掐头（lib）去尾（.a）之后的名字 xxx</li>
</ul>
</li>
<li>参数2-N：要链接的其它静态库的名字</li>
</ul>
</static></static></li>
<li>如果该静态库不是系统提供的（自己制作或者使用第三方提供的静态库）可能出现静态库找不到的情况，此时可以将静态库的路径也指定出来：<ul>
<li>link_directories(<lib path>)</lib></li>
</ul>
</li>
</ul>
<h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><ul>
<li><p>在cmake中链接动态库的命令如下:</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">    &lt;<span class="keyword">target</span>&gt; </span><br><span class="line">    &lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;... </span><br><span class="line">    [&lt;PRIVATE|PUBLIC|INTERFACE&gt; &lt;item&gt;...]...)</span><br></pre></td></tr></table></figure>
</li>
<li><p>target：指定要加载动态库的文件的名字</p>
<ul>
<li>该文件可能是一个源文件</li>
<li>该文件可能是一个动态库文件</li>
<li>该文件可能是一个可执行文件</li>
</ul>
</li>
<li><p>PRIVATE|PUBLIC|INTERFACE：动态库的访问权限，默认为PUBLIC</p>
<ul>
<li><p>如果各个动态库之间没有依赖关系，无需做任何设置，三者没有没有区别，一般无需指定，使用默认的 PUBLIC 即可。</p>
</li>
<li><p><code>动态库的链接具有传递性</code>，如果动态库 A 链接了动态库B、C，动态库D链接了动态库A，此时动态库D相当于也链接了动态库B、C，并可以使用动态库B、C中定义的方法</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(A B C)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(D A)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>PUBLIC</code>：在public后面的库会被Link到前面的target中，并且里面的符号也会被导出，提供给第三方使用。</p>
</li>
<li><p><code>PRIVATE</code>：在private后面的库仅被link到前面的target中，并且终结掉，第三方不能感知你调了啥库</p>
</li>
<li><p><code>INTERFACE</code>：在interface后面引入的库不会被链接到前面的target中，只会导出符号</p>
</li>
</ul>
</li>
</ul>
<h3 id="链接系统动态库"><a href="#链接系统动态库" class="headerlink" title="链接系统动态库"></a>链接系统动态库</h3><ul>
<li><p>动态库的链接和静态库是完全不同的：</p>
<ul>
<li>静态库会在生成可执行程序的链接阶段被打包到可执行程序中，所以可执行程序启动，静态库就被加载到内存中了。</li>
<li>动态库在生成可执行程序的链接阶段不会被打包到可执行程序中，当可执行程序被启动并且调用了动态库中的函数的时候，动态库才会被加载到内存</li>
</ul>
</li>
<li><p>因此，在cmake中指定要链接的动态库的时候，应该将命令写到生成了可执行文件之后：</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="comment"># 添加并指定最终生成的可执行程序名</span></span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="comment"># 指定可执行程序要链接的动态库名字</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(app pthread)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在target_link_libraries(app pthread)中：</p>
<ul>
<li><code>app</code>: 对应的是最终生成的可执行程序的名字</li>
<li><code>pthread</code>：这是可执行程序要加载的动态库，这个库是系统提供的线程库，全名为libpthread.so，在指定的时候一般会掐头（lib）去尾（.so）。</li>
</ul>
</li>
</ul>
<h3 id="链接第三方动态库"><a href="#链接第三方动态库" class="headerlink" title="链接第三方动态库"></a>链接第三方动态库</h3><ul>
<li><p>现在，自己生成了一个动态库，对应的目录结构如下：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tree .</span></span><br><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">├── include       </span><br><span class="line">│   └── head.h    </span><br><span class="line">├── lib</span><br><span class="line">│   └── libcalc.so</span><br><span class="line">└── main.cpp      </span><br><span class="line"></span><br><span class="line">3 directories, 4 files</span><br></pre></td></tr></table></figure>
</li>
<li><p>假设在测试文件main.cpp中既使用了自己制作的动态库libcalc.so又使用了系统提供的线程库，此时CMakeLists.txt文件可以这样写：</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">TEST</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB SRC_LIST <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(app <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(app pthread calc)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>link_directories(path)</code>链接第三方库的位置。</p>
<ul>
<li>使用 target_link_libraries 命令就<code>可以链接动态库，也可以链接静态库文件</code>。</li>
</ul>
</li>
</ul>
<h2 id="预定义宏"><a href="#预定义宏" class="headerlink" title="预定义宏"></a>预定义宏</h2><ul>
<li><p>下面的列表中为大家整理了一些CMake中常用的宏：</p>
<table>
<thead>
<tr>
<th align="center">宏</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PROJECT_SOURCE_DIR</td>
<td align="center">使用 <code>cmake</code> 命令后紧跟的目录，一般是工程的根目录</td>
</tr>
<tr>
<td align="center">PROJECT_BINARY_DIR</td>
<td align="center">执行 <code>cmake</code> 命令的目录</td>
</tr>
<tr>
<td align="center">CMAKE_CURRENT_SOURCE_DIR</td>
<td align="center">当前处理的 <code>CMakeLists.txt</code> 所在的路径</td>
</tr>
</tbody></table>
</li>
</ul>
<p>| CMAKE_CURRENT_BINARY_DIR |                      <code>target</code> 编译目录                       |<br>    |  EXECUTABLE_OUTPUT_PATH  |            重新定义目标二进制可执行文件的存放位置            |<br>    |   LIBRARY_OUTPUT_PATH    |               重新定义目标链接库文件的存放位置               |<br>    |       PROJECT_NAME       |            返回通过 <code>PROJECT</code> 指令定义的项目名称             |<br>    |     CMAKE_BINARY_DIR     | 项目实际构建路径，假设在 <code>build</code> 目录进行的构建，那么得到的就是这个目录的路径 |</p>
]]></content>
      <categories>
        <category>cmake</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>编码常用类和方法</title>
    <url>/hexo/2023/02/18/code-tools/</url>
    <content><![CDATA[<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="boot常用pom"><a href="#boot常用pom" class="headerlink" title="boot常用pom"></a>boot常用pom</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--jar 管理--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">boot.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">boot.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mysql.vsersion</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.vsersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;mysql.version&gt;8.0.25&lt;/mysql.version&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mybatisPlus.version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">mybatisPlus.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hutools.version</span>&gt;</span>5.7.17<span class="tag">&lt;/<span class="name">hutools.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--连接数据库--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatisPlus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!--hutool--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutools.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="./springboot-tools.html">如果要更换或者添加某些依赖的版本</a></p>
<h2 id="常用Java类"><a href="#常用Java类" class="headerlink" title="常用Java类"></a>常用Java类</h2><h3 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ORIGINS[] =<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;HEAD&quot;</span>,<span class="string">&quot;PUT&quot;</span>,<span class="string">&quot;DELETE&quot;</span>,<span class="string">&quot;OPTIONS&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addCorsMappings(registry);</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">            .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .allowedMethods(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;HEAD&quot;</span>,<span class="string">&quot;PUT&quot;</span>,<span class="string">&quot;DELETE&quot;</span>,<span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">            .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">            .maxAge(<span class="number">3600</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SING</span> <span class="operator">=</span> <span class="string">&quot;fajhf@@$&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 token,header.payload.sing</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 要放入 token 的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token  返回 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  String <span class="title function_">getToken</span><span class="params">(Map&lt;String,String&gt; map)</span>&#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">// 默认7 天过期</span></span><br><span class="line">        instance.add(Calendar.DATE,<span class="number">7</span>);</span><br><span class="line">        <span class="comment">// 创建 JWTbuilder</span></span><br><span class="line">        JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line">        <span class="comment">// 遍历map</span></span><br><span class="line">        <span class="comment">// payload</span></span><br><span class="line">        map.forEach((k,v)-&gt;&#123;</span><br><span class="line">            builder.withClaim(k,v);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 指定过期</span></span><br><span class="line">        builder.withExpiresAt(instance.getTime());</span><br><span class="line">        <span class="comment">//sgin</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> builder.sign(Algorithm.HMAC256(SING));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 传入要验证的 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">verifyToekn</span><span class="params">(String token)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  这一步不是必须，可以直接整合到验证 token 去</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">getTokenInfo</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">        <span class="keyword">return</span> verify;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry</span><br><span class="line">                <span class="comment">// 添加拦截器</span></span><br><span class="line">                .addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>())</span><br><span class="line">                <span class="comment">//添加拦截路径</span></span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/hello/**&quot;</span>)</span><br><span class="line">                <span class="comment">//添加哪些请求路径不经过拦截器</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/hello/world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span>  <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========1=======&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========3========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========4========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="生成验证码"><a href="#生成验证码" class="headerlink" title="生成验证码"></a>生成验证码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getVerifyCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">num</span> <span class="operator">=</span> ch[random.nextInt(ch.length)];</span><br><span class="line">            str += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getVerifyCode</span><span class="params">(<span class="type">int</span> codeSize)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; codeSize; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">num</span> <span class="operator">=</span> ch[random.nextInt(ch.length)];</span><br><span class="line">            str += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Redis序列化和缓存管理"><a href="#Redis序列化和缓存管理" class="headerlink" title="Redis序列化和缓存管理"></a>Redis序列化和缓存管理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line"><span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line"><span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="响应体封装"><a href="#响应体封装" class="headerlink" title="响应体封装"></a>响应体封装</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应成功无信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>().setCode(<span class="number">200</span>).setMsg(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应成功携带信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success().setMsg(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应成功携带信息和数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(String msg,Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success().setMsg(msg).setData(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应成功只携带数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success().setData(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应失败无提示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">failure</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>().setCode(<span class="number">201</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应失败有提示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">failure</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> failure().setMsg(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应失败有提示带数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">failure</span><span class="params">(String msg,Object error)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> failure().setMsg(msg).setData(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="ThreadLocal线程变量"><a href="#ThreadLocal线程变量" class="headerlink" title="ThreadLocal线程变量"></a>ThreadLocal线程变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManagerThreadLocalUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ManagerThreadLocalUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程变量隔离</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Manager&gt; LOCAL = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(DTO dto)</span> &#123;</span><br><span class="line">        LOCAL.set(sysManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Manager <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordEncoder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encode</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 生成盐</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> RandomUtil.randomString(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        <span class="keyword">return</span> encode(password,salt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">encode</span><span class="params">(String password, String salt)</span> &#123;</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        <span class="keyword">return</span> salt + <span class="string">&quot;@&quot;</span> + DigestUtils.md5DigestAsHex((password + salt).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">matches</span><span class="params">(String encodedPassword, String rawPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (encodedPassword == <span class="literal">null</span> || rawPassword == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!encodedPassword.contains(<span class="string">&quot;@&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;密码格式不正确！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] arr = encodedPassword.split(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取盐</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 比较</span></span><br><span class="line">        <span class="keyword">return</span> encodedPassword.equals(encode(rawPassword, salt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="正则方法"><a href="#正则方法" class="headerlink" title="正则方法"></a>正则方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是无效手机格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 要校验的手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:符合，false：不符合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPhoneInvalid</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mismatch(phone, RegexPatterns.PHONE_REGEX);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是无效邮箱格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 要校验的邮箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:符合，false：不符合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmailInvalid</span><span class="params">(String email)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mismatch(email, RegexPatterns.EMAIL_REGEX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是无效验证码格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 要校验的验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:符合，false：不符合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isCodeInvalid</span><span class="params">(String code)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mismatch(code, RegexPatterns.VERIFY_CODE_REGEX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验是否不符合正则格式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">mismatch</span><span class="params">(String str, String regex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(str)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !str.matches(regex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.largeProject.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RegexPatterns</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号正则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PHONE_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])d&#123;8&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱正则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMAIL_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(.[a-zA-Z0-9_-]+)+$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码正则。4~32位的字母、数字、下划线</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^w&#123;4,32&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码正则, 6位数字或字母</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VERIFY_CODE_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^[a-zA-Zd]&#123;6&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="mybatisplus分页插件"><a href="#mybatisplus分页插件" class="headerlink" title="mybatisplus分页插件"></a>mybatisplus分页插件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;mapperpath&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="下划线转驼峰"><a href="#下划线转驼峰" class="headerlink" title="下划线转驼峰"></a>下划线转驼峰</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 驼峰命名转下划线分割</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toUnderScoreCase</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="comment">// 前置字符是否大写</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">preCharIsUpperCase</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 当前字符是否大写</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">curreCharIsUpperCase</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 下一字符是否大写</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">nexteCharIsUpperCase</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            preCharIsUpperCase = Character.isUpperCase(str.charAt(i - <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            preCharIsUpperCase = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        curreCharIsUpperCase = Character.isUpperCase(c);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &lt; (str.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">            nexteCharIsUpperCase = Character.isUpperCase(str.charAt(i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (preCharIsUpperCase &amp;&amp; curreCharIsUpperCase &amp;&amp; !nexteCharIsUpperCase) &#123;</span><br><span class="line">            sb.append(SEPARATOR);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((i != <span class="number">0</span> &amp;&amp; !preCharIsUpperCase) &amp;&amp; curreCharIsUpperCase) &#123;</span><br><span class="line">            sb.append(SEPARATOR);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(Character.toLowerCase(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="axios的封装"><a href="#axios的封装" class="headerlink" title="axios的封装"></a>axios的封装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> commonURL = <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="comment">// 设置后台服务地址</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = commonURL;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">30</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 请求处理</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = token;  <span class="comment">// 设置请求头</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 响应处理</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = response.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// 如果是返回的文件</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">config</span>.<span class="property">responseType</span> === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 兼容服务端返回的字符串数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        res = res ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res) : res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当权限验证不通过的时候给出提示</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="string">&#x27;401&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// ElementUI.Message(&#123;</span></span><br><span class="line">        <span class="comment">//     message: res.msg,</span></span><br><span class="line">        <span class="comment">//     type: &#x27;error&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;err&#x27; + error) // for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure>



<h2 id="uniapp"><a href="#uniapp" class="headerlink" title="uniapp"></a>uniapp</h2><h3 id="uni-request的封装"><a href="#uni-request的封装" class="headerlink" title="uni.request的封装"></a>uni.request的封装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">myRequest</span> = (<span class="params">option</span>)=&gt;&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">		uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">			<span class="attr">url</span>:<span class="variable constant_">BASE_URL</span>+option.<span class="property">url</span>,</span><br><span class="line">			<span class="attr">method</span>:option.<span class="property">method</span> || <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">			<span class="attr">data</span>:option.<span class="property">data</span> || &#123;&#125;,</span><br><span class="line">			<span class="attr">header</span>: &#123;<span class="title class_">Authorization</span>:uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>)&#125;,</span><br><span class="line">			<span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(res.<span class="property">statusCode</span> !== <span class="number">200</span>)&#123;</span><br><span class="line">					</span><br><span class="line">					uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">						<span class="attr">title</span>:<span class="string">&#x27;数据请求失败!&#x27;</span></span><br><span class="line">					&#125;)</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="title function_">resolve</span>(res)</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">				uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">					<span class="attr">title</span>:<span class="string">&#x27;服务器异常!&#x27;</span></span><br><span class="line">				&#125;)</span><br><span class="line">				<span class="title function_">reject</span>(err)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a>待续…</h2>]]></content>
      <categories>
        <category>code-tools</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>vue</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/hexo/2021/11/14/docker/</url>
    <content><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p><img src="/hexo/2021/11/14/docker/docker/image-20220422204735324.png" alt="image-20220422204735324"></p>
<ul>
<li><p><a href="https://yeasy.gitbook.io/docker_practice">推荐阅读文档地址</a> </p>
</li>
<li><p>离线阅读:</p>
<blockquote>
<p>docker run -it –rm -p 4000:80 ccr.ccs.tencentyun.com&#x2F;dockerpracticesig&#x2F;docker_practice:vuepress</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>version: ‘3’</p>
<p>services:</p>
<p> docker-document:</p>
<p>  image: ccr.ccs.tencentyun.com&#x2F;dockerpracticesig&#x2F;docker_practice:vuepress</p>
<p>  container_name: docker-document</p>
<p>  ports:</p>
<p>   - 4000:80</p>
<p>  restart: always</p>
</blockquote>
</li>
<li><p>下载docker脚本 [curl -fsSL <a href="https://get.docker.com/">https://get.docker.com</a> | bash -s docker –mirror Aliyun](curl -fsSL <a href="https://get.docker.com/">https://get.docker.com</a> | bash -s docker –mirror Aliyun)</p>
</li>
<li><p><a href="https://hub.docker.com/">docker hub 地址，很多优秀的镜像</a></p>
</li>
</ul>
<h2 id="配置中科大镜像加速（推荐）"><a href="#配置中科大镜像加速（推荐）" class="headerlink" title="配置中科大镜像加速（推荐）"></a>配置中科大镜像加速（推荐）</h2><ul>
<li>我推荐中科大这个，阿里云有时候有一些玄学问题</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;],</span><br><span class="line">  &quot;iptables&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Centos</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;],</span><br><span class="line">  &quot;iptables&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>

<h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://efwckkji.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;iptables&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Centos</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://efwckkji.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;iptables&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>

<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images  # 查看本地主机上所有的镜像</span><br><span class="line"></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql         latest    5c62e459e087   3 days ago     556MB</span><br><span class="line">ubuntu        latest    9873176a8ff5   9 days ago     72.7MB</span><br><span class="line">hello-world   latest    d1165f221234   3 months ago   13.3kB</span><br><span class="line">centos        latest    300e315adb2f   6 months ago   209MB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面参数的的解释</span></span><br><span class="line">REPOSITORY	 镜像仓库源</span><br><span class="line">TAG			镜像标签</span><br><span class="line">IMAGE ID	镜像id</span><br><span class="line">CREATED		镜像的创建时间</span><br><span class="line">SIZE		镜像的大小</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">-a，--all		# 列出所有镜像</span><br><span class="line">-q，--quiet		# 只显示镜像的id</span><br></pre></td></tr></table></figure>

<p><strong>docker search 搜索镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:/home/wflin# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11042     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4186      [OK]     </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项，通过收藏来过滤</span></span><br><span class="line">-- filter=stars=3000	# 搜索出来的收藏大于3000的</span><br><span class="line"></span><br><span class="line">root@wflin-server:/home/wflin# docker search mysql --filter=stars=3000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11042     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4186      [OK]       </span><br><span class="line">root@wflin-server:/home/wflin# docker search mysql --filter=stars=4000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11042     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4186      [OK]       </span><br></pre></td></tr></table></figure>

<p><strong>docker pull</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像 docker pull 镜像名 [:tag]</span> </span><br><span class="line">root@wflin-server:/home/wflin	# docker pull mysql</span><br><span class="line">Using default tag: latest  	# 如果不写 tag 默认下载最新的</span><br><span class="line">b4d181a07f80: Pull complete  # 分层下载，docker image核心，联合文件系统</span><br><span class="line">a462b60610f5: Pull complete </span><br><span class="line">578fafb77ab8: Pull complete </span><br><span class="line">524046006037: Pull complete </span><br><span class="line">d0cbe54c8855: Pull complete </span><br><span class="line">aa18e05cc46d: Pull complete </span><br><span class="line">32ca814c833f: Pull complete </span><br><span class="line">9ecc8abdb7f5: Pull complete </span><br><span class="line">ad042b682e0f: Pull complete </span><br><span class="line">71d327c6bb78: Pull complete </span><br><span class="line">165d1d10a3fa: Pull complete </span><br><span class="line">2f40c47d0626: Pull complete </span><br><span class="line">Digest: sha256:52b8406e4c32b8cf0557f1b74517e14c5393aff5cf0384eff62d9e81f4985d4b	# 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest	# 真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等价于它</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定版本下载</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line">root@wflin-server:/home/wflin# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">b4d181a07f80: Already exists </span><br><span class="line">a462b60610f5: Already exists </span><br><span class="line">578fafb77ab8: Already exists </span><br><span class="line">524046006037: Already exists </span><br><span class="line">d0cbe54c8855: Already exists </span><br><span class="line">aa18e05cc46d: Already exists </span><br><span class="line">32ca814c833f: Already exists </span><br><span class="line">52645b4af634: Pull complete </span><br><span class="line">bca6a5b14385: Pull complete </span><br><span class="line">309f36297c75: Pull complete </span><br><span class="line">7d75cacde0f8: Pull complete </span><br><span class="line">Digest: sha256:1a2f9cd257e75cc80e9118b303d1648366bc2049101449bf2c8d82b022ea86b7</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>

<p><img src="/hexo/2021/11/14/docker/docker.assets/image-20210627132518934.png" alt="image-20210627132518934"></p>
<p><strong>docker rmi 删除镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:/home/wflin# docker rmi -f 镜像id      #删除指定的容器</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除多个容器</span></span><br><span class="line">root@wflin-server:/home/wflin# docker rmi -f 镜像id 容器id 容器id </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除全部的容器</span></span><br><span class="line">root@wflin-server:/home/wflin# docker rmi -f $(docker images -aq)	 </span><br></pre></td></tr></table></figure>

<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器，Linux，下载一个centos来测试学习</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>

<p><strong>新建容器并启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;name&quot;		容器名字，tomacat01  tomacat02 ...</span><br><span class="line">-d 					后台方式运行</span><br><span class="line">-it					使用交互方式运行，进入容器查看内容</span><br><span class="line">-p					指定容器端口 -p  8080：8080</span><br><span class="line">	-p ip：主机端口：容器端口</span><br><span class="line">	-p 主机端口：容器端口（常用）</span><br><span class="line">	-p 容器端口</span><br><span class="line">	容器端口</span><br><span class="line">-p					随机指定端口</span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动并进入容器</span></span><br><span class="line">root@wflin-server:/home/wflin# docker run -it centos /bin/bash</span><br><span class="line">[root@74084deb4db1 /]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看容器内的centos，基础版本，许多命令不完善</span></span><br><span class="line">[root@74084deb4db1 /]# ls</span><br><span class="line">bin  etc   lib	  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器</span></span><br><span class="line">[root@74084deb4db1 /]# exit</span><br><span class="line">exit</span><br><span class="line">root@wflin-server:/home/wflin# ls</span><br><span class="line">root@wflin-server:/home/wflin# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入正在运行的容器</span></span><br><span class="line"><span class="meta prompt_">[root/wflin]# </span><span class="language-bash">docker attach ID</span></span><br></pre></td></tr></table></figure>

<p><strong>列出所有的运行容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker ps 命令</span></span><br><span class="line"><span class="meta prompt_">	# </span><span class="language-bash">列出当前正在运行的容器</span></span><br><span class="line">-a  # 列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=?	# 显示最近创建的容器</span><br><span class="line">-q 		# 只显示容器的编号</span><br><span class="line"></span><br><span class="line">root@wflin-server:/home/wflin# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">root@wflin-server:/home/wflin# docker ps -a </span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED             STATUS                       PORTS     NAMES</span><br><span class="line">74084deb4db1   centos         &quot;/bin/bash&quot;              5 minutes ago       Exited (130) 2 minutes ago             laughing_rubin</span><br><span class="line">d715695fa465   5c62e459e087   &quot;docker-entrypoint.s…&quot;   About an hour ago   Created                                mysql-test</span><br><span class="line">65c14e0a392c   9873176a8ff5   &quot;bash&quot;                   2 hours ago         Exited (0) 2 hours ago                 inspiring_goldstine</span><br><span class="line">92c6b1d7ed88   centos         &quot;/bin/bash&quot;              2 hours ago         Exited (0) 2 hours ago                 mystifying_almeida</span><br><span class="line">da44274c6bc6   centos         &quot;/bin/bash&quot;              2 hours ago         Exited (0) 2 hours ago                 sweet_gould</span><br><span class="line">4fd6fabed535   d1165f221234   &quot;/hello&quot;                 2 hours ago         Exited (0) 2 hours ago                 zealous_moore</span><br><span class="line">4f866214a820   d1165f221234   &quot;/hello&quot;                 2 hours ago         Exited (0) 2 hours ago                 cool_einstein</span><br><span class="line">3e6471788607   d1165f221234   &quot;/hello&quot;                 2 hours ago         Exited (0) 2 hours ago                 vibrant_edison</span><br><span class="line">root@wflin-server:/home/wflin# </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>退出容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit	# 直接容器停止并退出</span><br><span class="line">ctrl + p + q 	# 容器不停止</span><br></pre></td></tr></table></figure>

<p><strong>删除容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id		# 删除指定容器，不能删除正在运行的容器。如果要强制删除就用rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)	# 删除所有镜像</span><br><span class="line">docker ps -aq|xargs docker rm	# 删除所有容器</span><br></pre></td></tr></table></figure>

<p><strong>启动和停止容器的操作</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id	#启动容器</span><br><span class="line">docker restart 容器id	#重启容器</span><br><span class="line">docker stop 容器id	# 停止容器</span><br><span class="line">docker kill 容器id	# 杀掉容器</span><br></pre></td></tr></table></figure>

<h2 id="常用的其他命令"><a href="#常用的其他命令" class="headerlink" title="常用的其他命令"></a>常用的其他命令</h2><ul>
<li><strong>后台启动容器</strong></li>
</ul>
<p>容器卷技术</p>
<h2 id="实战安装mysql"><a href="#实战安装mysql" class="headerlink" title="实战安装mysql"></a>实战安装mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 mysql 镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">				外部端口，内部端口		挂在在外部目录	挂载的内部目录									环境配置</span></span><br><span class="line">docker run -d -p 3306:3306 -v /home/mysql/config5:/etc/mysqlconf.d -v /home/mysql/data5:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=nba666 --name mysql-5.7 mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -d -p 3306:3306 -v /home/mysql/config:/etc/mysqlconf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=nba666 --name mysql-8.0 mysql:8.0</span><br></pre></td></tr></table></figure>

<h2 id="运行容器端口占用-踩坑"><a href="#运行容器端口占用-踩坑" class="headerlink" title="运行容器端口占用 踩坑"></a>运行容器端口占用 踩坑</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看端口占用情况</span></span><br><span class="line">netstat -tanlp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">筛选出 3306 的端口</span></span><br><span class="line">sudo netstat -nlptu | grep 3306</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决端口占用问题</span> </span><br><span class="line">kill pid (占用端口的pid)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入正在运行的容器</span></span><br><span class="line">sudo docker attach 容器ID  </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql 创建y</span></span><br><span class="line">use mysql</span><br><span class="line">select Host,User from mysql.user;</span><br><span class="line"></span><br><span class="line">create user DuNa identified by &#x27;Duna123&#x27;;</span><br><span class="line"></span><br><span class="line">grant all privileges on *.* to root@&#x27;%&#x27; with grant option</span><br></pre></td></tr></table></figure>

<p>Dockerfile 构建过程</p>
<h2 id="关键保留字"><a href="#关键保留字" class="headerlink" title="关键保留字"></a>关键保留字</h2><p><strong>基础知识</strong></p>
<ol>
<li>每个保留关键字（指令）都必须是大写字母</li>
<li>执行从上到下顺序执行</li>
<li>“ # ”表示注释</li>
<li>每一个指令都会提交一个性的镜像层，并提交！</li>
<li>dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！docker 镜像逐渐成为企业交付的标准，必须掌握！</li>
<li>Dockerfile：构建文件，定义了一切的步骤，源代码</li>
<li>Dockerimages：通过dockerfile 构建生成的一个镜像，最终发布和运行的产品，原来是一个jar，war 包执行起来，全部都要变成容器</li>
</ol>
<h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h3 id="Docker-文件结构视图"><a href="#Docker-文件结构视图" class="headerlink" title="Docker 文件结构视图"></a>Docker 文件结构视图</h3><p><img src="/hexo/2021/11/14/docker/docker/image-20210708224811555.png"></p>
<h3 id="Dokcerfile-指令"><a href="#Dokcerfile-指令" class="headerlink" title="Dokcerfile 指令"></a>Dokcerfile 指令</h3><p><img src="/hexo/2021/11/14/docker/docker/image-20210708230532320.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM				# 基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER			# 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN					# 镜像构建的时候西药运行的命令</span><br><span class="line">ADD 				# 步骤：tomcat 镜像，这个 tomcat 压缩包</span><br><span class="line">WORKDIR				# 镜像的工作目录</span><br><span class="line">VOLUEME				# 挂载目录位置</span><br><span class="line">EXPOSE				# 暴露端口配置 也可通过 -p 暴露端口</span><br><span class="line">CMD					# 指定这个容器启动的时候需要运行的命令【只有最后一个会生效，可以被替代】</span><br><span class="line">ENTRYPOINT			# 指定这个容器启动的时候需要运行的命令【可以追加命令】</span><br><span class="line">ONBUILD				# 当构建一个被继承 DockerFile 这个时候就会运行 ONBUILD 的指令，触发指令</span><br><span class="line">COPY				# 类似 add 命令，将文件拷贝到镜像中</span><br><span class="line">ENV					# 构建的时候设置环境变量</span><br></pre></td></tr></table></figure>

<h3 id="定制镜像测试"><a href="#定制镜像测试" class="headerlink" title="定制镜像测试"></a>定制镜像测试</h3><p>Docker Hub 中 99% 的镜像都是从基础镜像构建过来的</p>
<ol>
<li><p>编写 dockerfile 文件，我这里的文件名：<code>mycentos</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个说明可选了《不是必须》.</span></span><br><span class="line">MAINTAINER	wflin&lt;test.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $&#123;MYPATH&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要执行的指令</span></span><br><span class="line">RUN yum update -n</span><br><span class="line">RUN yum -y install vim </span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出的信息，因为前面说 CMD 只有最后一个会生效，所以应该只会出现 /bin/bash</span></span><br><span class="line">CMD echo $&#123;MYPATH&#125;</span><br><span class="line">CMD echo &quot;--------end-----&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>


</li>
<li><p>构建镜像的指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建指令</span></span><br><span class="line">docker build -f  mycentos -t mycentos : 0.1 .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数说明：</span></span><br><span class="line"> -f 代表 指定 dockerfile 文件</span><br><span class="line"> -t tag，生成名字和版本</span><br><span class="line"> 最后还有一个 .</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">构建完成显示</span> </span><br><span class="line">Removing intermediate container eaa8273e8d38</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">3754b0b27b2a</span></span><br><span class="line">Step 7/10 : EXPOSE 80</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> b5205972ddad</span></span><br><span class="line">Removing intermediate container b5205972ddad</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">e1572c725b1c</span></span><br><span class="line">Step 8/10 : CMD echo $&#123;MYPATH&#125;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 5bec5095048a</span></span><br><span class="line">Removing intermediate container 5bec5095048a</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">4373e1577764</span></span><br><span class="line">Step 9/10 : CMD echo &quot;--------end-----&quot;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 6ba156902517</span></span><br><span class="line">Removing intermediate container 6ba156902517</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">edd1a48d3657</span></span><br><span class="line">Step 10/10 : CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 3301bd6a5ee4</span></span><br><span class="line">Removing intermediate container 3301bd6a5ee4</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">5432537134ad</span></span><br><span class="line">Successfully built 5432537134ad</span><br><span class="line">Successfully tagged mycentos:0.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看构建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">mycentos     0.1       5432537134ad   39 seconds ago   591MB</span><br><span class="line">nginx        latest    605c77e624dd   3 months ago     141MB</span><br><span class="line">redis        latest    7614ae9453d1   3 months ago     113MB</span><br><span class="line">mysql        latest    3218b38490ce   4 months ago     516MB</span><br><span class="line">centos       7         eeb6ee3f44bd   7 months ago     204MB</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行构建好的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker run -it mycentos:0.1</span><br><span class="line">[root@6c63c9bd9365 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@6c63c9bd9365 local]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接到了 工作目录 /usr/local,指令都能用</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>docker history  imageID 显示构建历史（构建过程）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker history 5432537134ad</span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">5432537134ad   7 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin…   0B       </span><br><span class="line">edd1a48d3657   7 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B       </span><br><span class="line">4373e1577764   7 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B       </span><br><span class="line">e1572c725b1c   7 minutes ago   /bin/sh -c #(nop)  EXPOSE 80                    0B       </span><br><span class="line">3754b0b27b2a   7 minutes ago   /bin/sh -c yum -y install net-tools             166MB   </span><br><span class="line">d16062eddd70   7 minutes ago   /bin/sh -c yum -y install vim                   221MB   </span><br><span class="line">e1733b608785   9 minutes ago   /bin/sh -c #(nop) WORKDIR /usr/local            0B       </span><br><span class="line">1d90358fa417   9 minutes ago   /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B       </span><br><span class="line">cc918b6281e4   9 minutes ago   /bin/sh -c #(nop)  MAINTAINER wflin&lt;test.com&gt;   0B       </span><br><span class="line">eeb6ee3f44bd   7 months ago    /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B       </span><br><span class="line">&lt;missing&gt;      7 months ago    /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B       </span><br><span class="line">&lt;missing&gt;      7 months ago    /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB   </span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>
</li>
<li><p>例如查看 nginx 的构建过程,可以显示官方镜像的构建过程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker history nginx</span><br><span class="line">IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT</span><br><span class="line">605c77e624dd   3 months ago   /bin/sh -c #(nop)  CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon…   0B        &lt;missing&gt;      3 months ago   /bin/sh -c #(nop)  STOPSIGNAL SIGQUIT           0B        &lt;missing&gt;      3 months ago   /bin/sh -c #(nop)  EXPOSE 80                    0B        &lt;missing&gt;      3 months ago   /bin/sh -c #(nop)  ENTRYPOINT [&quot;/docker-entr…   0B        &lt;missing&gt;      3 months ago   /bin/sh -c #(nop) COPY file:09a214a3e07c919a…   4.61kB    &lt;missing&gt;      3 months ago   /bin/sh -c #(nop) COPY file:0fd5fca330dcd6a7…   1.04kB    &lt;missing&gt;      3 months ago   /bin/sh -c #(nop) COPY file:0b866ff3fc1ef5b0…   1.96kB    &lt;missing&gt;      3 months ago   /bin/sh -c #(nop) COPY file:65504f71f5855ca0…   1.2kB     &lt;missing&gt;      3 months ago   /bin/sh -c set -x     &amp;&amp; addgroup --system -…   61.1MB    &lt;missing&gt;      3 months ago   /bin/sh -c #(nop)  ENV PKG_RELEASE=1~bullseye   0B        &lt;missing&gt;      3 months ago   /bin/sh -c #(nop)  ENV NJS_VERSION=0.7.1        0B        &lt;missing&gt;      3 months ago   /bin/sh -c #(nop)  ENV NGINX_VERSION=1.21.5     0B        &lt;missing&gt;      4 months ago   /bin/sh -c #(nop)  LABEL maintainer=NGINX Do…   0B        &lt;missing&gt;      4 months ago   /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B        &lt;missing&gt;      4 months ago   /bin/sh -c #(nop) ADD file:09675d11695f65c55…   80.4MB    root@wflin-server:~# </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="CMD-和-ENTRYPOINT"><a href="#CMD-和-ENTRYPOINT" class="headerlink" title="CMD 和 ENTRYPOINT"></a>CMD 和 ENTRYPOINT</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CMD					# 指定这个容器启动的时候需要运行的命令【只有最后一个会生效，可以被替代】</span><br><span class="line">ENTRYPOINT			# 指定这个容器启动的时候需要运行的命令【可以追加命令】</span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试CMD</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">vim cmdcentos</span></span><br><span class="line">FROM centos:7</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">构建镜像</span></span><br><span class="line">docker build -f cmdcentos -t cmdcentos:0.1 .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">run 镜像</span></span><br><span class="line">docker run f76ee2630109</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">anaconda-post.log</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">... ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加参数</span></span><br><span class="line">docker run f76ee2630109 -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">结果</span></span><br><span class="line">docker: Error response from daemon: failed to create shim: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">原因：cmd的情况下， -l 替换了 CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>] 命令，-l 不是命令，所以报错</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line">root@wflin-server:~# docker run 0d3e566bc0a5 ls -l</span><br><span class="line">total 56</span><br><span class="line">-rw-r--r--   1 root root 12114 Nov 13  2020 anaconda-post.log</span><br><span class="line">lrwxrwxrwx   1 root root     7 Nov 13  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root   340 Apr 20 02:52 dev</span><br><span class="line">drwxr-xr-x   1 root root  4096 Apr 20 02:52 etc</span><br><span class="line">drwxr-xr-x   2 root root  4096 Apr 11  2018 home</span><br><span class="line">lrwxrwxrwx   1 root root     7 Nov 13  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root     9 Nov 13  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x   2 root root  4096 Apr 11  2018 media</span><br><span class="line">drwxr-xr-x   2 root root  4096 Apr 11  2018 mnt</span><br><span class="line">drwxr-xr-x   2 root root  4096 Apr 11  2018 opt</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试 ENTRYPOINT</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把上面的 cmdcentos 的 cmd 改为 entropoint 试试</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">继续构建运行</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">vim cmdcentos</span></span><br><span class="line">FROM centos:7</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建忽略</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行</span></span><br><span class="line">root@wflin-server:~# docker run 00a71f921e2a</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">anaconda-post.log</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">... ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">追加指令</span></span><br><span class="line">root@wflin-server:~# docker run 00a71f921e2a -l</span><br><span class="line">total 64</span><br><span class="line">drwxr-xr-x   1 root root  4096 Apr 20 03:00 .</span><br><span class="line">drwxr-xr-x   1 root root  4096 Apr 20 03:00 ..</span><br><span class="line">-rwxr-xr-x   1 root root     0 Apr 20 03:00 .dockerenv</span><br><span class="line">-rw-r--r--   1 root root 12114 Nov 13  2020 anaconda-post.log</span><br><span class="line">lrwxrwxrwx   1 root root     7 Nov 13  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root   340 Apr 20 03:00 dev</span><br><span class="line">drwxr-xr-x   1 root root  4096 Apr 20 03:00 etc</span><br><span class="line">drwxr-xr-x   2 root root  4096 Apr 11  2018 home</span><br><span class="line">lrwxrwxrwx   1 root root     7 Nov 13  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root     9 Nov 13  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x   2 root root  4096 Apr 11  2018 media</span><br><span class="line">...  ...</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="实战：Tomcat-镜像"><a href="#实战：Tomcat-镜像" class="headerlink" title="实战：Tomcat 镜像"></a>实战：Tomcat 镜像</h3><ul>
<li><p>准备工作</p>
<ol>
<li><p>准备镜像文件 <code>tomcat</code> 压缩包，<code>jdk</code>的压缩包</p>
<p><img src="/hexo/2021/11/14/docker/docker/image-20220420111006420.png" alt="image-20220420111006420"></p>
</li>
<li><p>编写 <code>dockerfile</code> 文件，官方命名 <code>Dockerfile</code>，build 会自动寻找这个文件，就不用 -f 指定了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始镜像</span></span><br><span class="line">FROM centos:7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">镜像作者信息</span></span><br><span class="line">MAINTAINER wflin&lt;test.com&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只是拷贝文件，不会解压</span></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加jdk</span></span><br><span class="line">ADD jdk-8u281-linux-x64.tar.gz /usr/local/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 tomcat</span></span><br><span class="line">ADD apache-tomcat-9.0.62.tar.gz /usr/local/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 vim</span></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置工作目录</span></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置Java环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_281</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME  /usr/local/apache-tomcat-9.0.62</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.62</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暴露端口</span></span><br><span class="line">EXPOSE 80</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出信息</span></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.62/bin/startup.sh &amp;&amp; tail -f /usr/local/apache-tomcat-9.0.62/logs/catalina.out</span><br></pre></td></tr></table></figure>


</li>
<li><p>构建镜像</p>
<blockquote>
<p>docker build -t mytomcat  .</p>
</blockquote>
</li>
<li><p>查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">mytomcat     latest       cf6cb7c23e98   About a minute ago   798MB</span><br><span class="line">centos       7         eeb6ee3f44bd   7 months ago         204MB</span><br><span class="line">root@wflin-server:~/tomcat# </span><br></pre></td></tr></table></figure>
</li>
<li><p>使用镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~/tomcat# docker run -d -p8080:8080 --name diytomcat -v /home/wflin/tomcat/test/:/usr/local/apache-tomcat-9.0.62/webapps/test -v /home/wflin/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.62/logs mytomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">成功进入镜像</span></span><br><span class="line">root@wflin-server:~/tomcat# docker exec -it  diytomcat /bin/bash</span><br><span class="line">[root@ab92e0f3fff4 local]# </span><br></pre></td></tr></table></figure>
</li>
<li><p>测试镜像</p>
<blockquote>
<p>访问： 在容器外部访问： curl 127.0.0.1:8080</p>
</blockquote>
</li>
<li><p>发布项目(在网上找的)</p>
<ul>
<li><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        	System.out.println(<span class="string">&quot;wflin docker&quot;</span>);</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><blockquote>
<p>访问  curl 127.0.0.1:8080&#x2F;test</p>
</blockquote>
</li>
<li><p>查看运行日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:/home/wflin/tomcat/tomcatlogs# tail catalina.out </span><br><span class="line">wflin test log</span><br><span class="line">wflin test log</span><br><span class="line">wflin test log</span><br><span class="line">wflin test log</span><br><span class="line">wflin test log</span><br><span class="line">wflin test log</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="向-docker-hub-发布镜像"><a href="#向-docker-hub-发布镜像" class="headerlink" title="向 docker hub 发布镜像"></a>向 docker hub 发布镜像</h3><blockquote>
<p>docker hub</p>
</blockquote>
<ol>
<li><p>在 docker hub 注册自己的账号！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker login --help</span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string  </span><br></pre></td></tr></table></figure>


</li>
<li><p>确定这个账号可以登陆</p>
</li>
<li><p>在自己服务器上提交自己的镜像</p>
<blockquote>
<p>登陆完毕就可以提交镜像了，就是一步 docker push user&#x2F;image : tag【这样好区分，不然多半会提交被拒绝】</p>
</blockquote>
</li>
</ol>
<h3 id="提交到-阿里云容器仓库"><a href="#提交到-阿里云容器仓库" class="headerlink" title="提交到 阿里云容器仓库"></a>提交到 阿里云容器仓库</h3><ol>
<li><p>登陆阿里云</p>
<img src="/hexo/2021/11/14/docker/image-20220420142030709.png" alt="image-20220420142030709" style="zoom:50%;">
</li>
<li><p>找到容器镜像服务 并创建 容器镜像服务，个人版本好像是免费的</p>
<p><img src="/hexo/2021/11/14/docker/docker/image-20220420142516275.png" alt="image-20220420142516275"></p>
</li>
<li><p>创建好之后就是这个样子</p>
<p><img src="/hexo/2021/11/14/docker/docker/image-20220420142638675.png" alt="image-20220420142638675"></p>
</li>
<li><p>创建一个私有命名空间</p>
<p><img src="/hexo/2021/11/14/docker/docker/image-20220420142749025.png" alt="image-20220420142749025"></p>
</li>
<li><p>再创建一个镜像仓库,选择本地仓库</p>
<p><img src="/hexo/2021/11/14/docker/docker/image-20220420142855312.png" alt="image-20220420142855312"></p>
</li>
<li><p>根据提示操作就行（很详细）</p>
</li>
<li><p>登陆成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker login --username=user registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>
</li>
<li><blockquote>
<p>注意：提交的镜像 的名字 user&#x2F;image : tag </p>
<blockquote>
<p>docker push wflin&#x2F;tomcat : 1.0</p>
</blockquote>
</blockquote>
</li>
</ol>
<h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><h3 id="理解-Docker-0"><a href="#理解-Docker-0" class="headerlink" title="理解 Docker 0"></a>理解 Docker 0</h3><blockquote>
<p>测试：获取 IP 地址 ifconfig 或者 ip addr</p>
</blockquote>
<p><img src="/hexo/2021/11/14/docker/docker/image-20220330230041350.png" alt="image-20220330230041350"></p>
<blockquote>
<p>容器内部网络情况，外部可以 ping 通 docker 外部</p>
</blockquote>
<p><img src="/hexo/2021/11/14/docker/docker/image-20220330230210877.png" alt="image-20220330230210877"></p>
<blockquote>
<p>原理</p>
</blockquote>
<ol>
<li><p>每启动一个 docker 容器，docker 会给 docker 容器分配一个 IP ，只要安装了 docker，就会有一个 docker0的桥接模式的网卡，使用的技术是 <code>evth-pair</code> 技术</p>
<p><code>evth-pair</code>：就是一对虚拟设备接口，他们都是成对出现的,一端连接协议，一端彼此相连。所以就可以通</p>
</li>
<li><p>docker0 就是一个网桥（可以理解为一个路由）所有docker 容器之间的通信都是通过 docker0路由转发（小型局域网） 通信。</p>
</li>
<li><p>可以看图示</p>
<p><img src="/hexo/2021/11/14/docker/docker/image-20220420153503228.png" alt="image-20220420153503228"></p>
</li>
</ol>
<h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><blockquote>
<p>项目不重启的情况下，数据库的IP换掉了，可以通过容器别名 –link ping 通容器</p>
</blockquote>
<ul>
<li><p>启动俩容器：</p>
<blockquote>
<p>docker run -d -P –name tomcat01 tomcat</p>
<p>docker run -d -P –name tomcat02 tomcat</p>
</blockquote>
</li>
<li><p>尝试  <code>ping</code> 连接,连接不通</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker exec -it tomcat01 ping tomcat02 </span><br></pre></td></tr></table></figure>


</li>
<li><p>再启动一个 tomcat 容器</p>
<blockquote>
<p>docker run -d -P –name tomcat03 –link tomcat02 tomcat</p>
</blockquote>
</li>
<li><p>用 <code>tomcat03 ping tomcat02</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it tomcat03 ping tomcat02 #可以通</span><br><span class="line">docker exec -it tomcat02 ping tomcat03 #可以通不了</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><blockquote>
<p>​	docker0 局限性太大</p>
</blockquote>
<blockquote>
<p>查看所有 docker 网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">fe4a77565263   bridge    bridge    local</span><br><span class="line">bc5dacdb5f8b   host      host      local</span><br><span class="line">edd3947c7f0a   none      null      local</span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>

<blockquote>
<p>网络模式</p>
</blockquote>
<ul>
<li>bridge：桥接 docker（默认，一般自己也用）</li>
<li>none：不配置网络</li>
<li>host：和宿主机共享</li>
<li>container：容器网络连通（用得少）</li>
</ul>
<blockquote>
<p>网络可以选项指令</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker network --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run &#x27;docker network COMMAND --help&#x27; for more information on a command.</span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们直接启动命令 --net bridge，而这个就是我们的 docker0</span></span><br><span class="line">docker run -d -P --name tomcat01 tomcat</span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker0 的特点。默认的，不能被域名访问，--<span class="built_in">link</span> 可以打通直连</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义网络</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建网络指令</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker network create --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network create [OPTIONS] NETWORK</span><br><span class="line">Create a network</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --attachable           Enable manual container attachment</span><br><span class="line">      --aux-address map      Auxiliary IPv4 or IPv6 addresses used by Network</span><br><span class="line">                             driver (default map[])</span><br><span class="line">      --config-from string   The network from which to copy the configuration</span><br><span class="line">      --config-only          Create a configuration only network</span><br><span class="line">  -d, --driver string        Driver to manage the Network (default &quot;bridge&quot;)</span><br><span class="line">      --gateway strings      IPv4 or IPv6 Gateway for the master subnet</span><br><span class="line">      --ingress              Create swarm routing-mesh network</span><br><span class="line">      --internal             Restrict external access to the network</span><br><span class="line">      --ip-range strings     Allocate container ip from a sub-range</span><br><span class="line">      --ipam-driver string   IP Address Management Driver (default &quot;default&quot;)</span><br><span class="line">      --ipam-opt map         Set IPAM driver specific options (default map[])</span><br><span class="line">      --ipv6                 Enable IPv6 networking</span><br><span class="line">      --label list           Set metadata on a network</span><br><span class="line">  -o, --opt map              Set driver specific options (default map[])</span><br><span class="line">      --scope string         Control the network&#x27;s scope</span><br><span class="line">      --subnet strings       Subnet in CIDR format that represents a network segment</span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--driver 网络模式</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--subnet 子网网段和掩码</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--gateway 网关 网络名字</span></span><br><span class="line"></span><br><span class="line">root@wflin-server:~# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">db6d7453eebebef2b30695b1576cf6f1d53b472e1fd1ef92ac2256ebbddf5d94</span><br><span class="line">root@wflin-server:~#</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看创建的网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">fe4a77565263   bridge    bridge    local</span><br><span class="line">bc5dacdb5f8b   host      host      local</span><br><span class="line">db6d7453eebe   mynet     bridge    local    # 自己的网络创建成功</span><br><span class="line">edd3947c7f0a   none      null      local</span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看创建网络的详情</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;db6d7453eebebef2b30695b1576cf6f1d53b472e1fd1ef92ac2256ebbddf5d94&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-04-20T08:21:15.525137543Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>

<blockquote>
<p>网络创建完毕</p>
</blockquote>
<blockquote>
<p>发布容器到创建的网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行了两个 nginx 【tomcat 太大，伤不起】</span></span><br><span class="line">root@wflin-server:~# docker run -d -P --name nginx01 --net mynet nginx</span><br><span class="line">1e813d36e0e8b11368589b36ff2364c840cb2f302fc54f0ea57802fc4953cd39</span><br><span class="line">root@wflin-server:~# docker run -d -P --name nginx02 --net mynet nginx</span><br><span class="line">84e7c0daa060bc40779a26cd6605a5984737646977408d88f31d5afa980d0fbc</span><br><span class="line">root@wflin-server:~# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 mynet 网络</span></span><br><span class="line">root@wflin-server:~# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;db6d7453eebebef2b30695b1576cf6f1d53b472e1fd1ef92ac2256ebbddf5d94&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-04-20T08:21:15.525137543Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        </span><br><span class="line">        # 这里就有 nginx01 和 nginx02 的信息</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;1e813d36e0e8b11368589b36ff2364c840cb2f302fc54f0ea57802fc4953cd39&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;nginx01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;014c4b1bee8accafb4bd61af1ab604cfdfb40e2f0daf3662471d8aab1bfcc3bc&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;84e7c0daa060bc40779a26cd6605a5984737646977408d88f31d5afa980d0fbc&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;nginx02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;abc06f8372d33671196a1031f93865107ea2ce8a58586ba3290f0c79057dbd4e&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">root@wflin-server:~# ^C</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个两个 nginx  互 ping 一下</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于 nginx 没有 ping 工具，所以无法使用 ping 功能</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所以需要安装一下</span></span><br><span class="line">root@wflin-server:~# docker exec -it  nginx01 apt-get -y install inetutils-ping</span><br><span class="line">root@wflin-server:~# docker exec -it  nginx02 apt-get -y install inetutils-ping</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx02 ping nginx01</span></span><br><span class="line">root@wflin-server:~# docker exec -it nginx02 ping nginx01</span><br><span class="line">PING nginx01 (192.168.0.2): 56 data bytes</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=0 ttl=64 time=0.597 ms</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=1 ttl=64 time=0.053 ms</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx01 ping nginx02</span></span><br><span class="line">root@wflin-server:~# docker exec -it nginx01 ping nginx02</span><br><span class="line">PING nginx02 (192.168.0.3): 56 data bytes</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=0 ttl=64 time=0.042 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.091 ms</span><br></pre></td></tr></table></figure>

<h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><ul>
<li><blockquote>
<p>docker network –help</p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker network --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network  # 把一个容器连接到一个网络</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run &#x27;docker network COMMAND --help&#x27; for more information on a command.</span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>

<ul>
<li><blockquote>
<p>docker network  connet –help</p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker network connect  --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network connect [OPTIONS] NETWORK CONTAINER</span><br><span class="line">Connect a container to a network</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --alias strings           Add network-scoped alias for the container</span><br><span class="line">      --driver-opt strings      driver options for the network</span><br><span class="line">      --ip string               IPv4 address (e.g., 172.30.100.104)</span><br><span class="line">      --ip6 string              IPv6 address (e.g., 2001:db8::33)</span><br><span class="line">      --link list               Add link to another container</span><br><span class="line">      --link-local-ip strings   Add a link-local address for the container</span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>

<h4 id="测试-nginx03-通-mynet"><a href="#测试-nginx03-通-mynet" class="headerlink" title="测试 nginx03 通 mynet"></a>测试 nginx03 通 mynet</h4><ul>
<li><p>运行 nginx03</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@wflin-server:~# docker run -d --name nginx03 nginx # 网络默认是docker0</span><br><span class="line">a4bd9db4ba8fc857a39cfd8783ba989839063ae420c5998c2422a196358011bf</span><br><span class="line">root@wflin-server:~# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用 nginx02 ping nginx03   ping 不通</span></span><br><span class="line">root@wflin-server:~# docker exec -it nginx02 ping nginx03</span><br><span class="line">ping: unknown host</span><br><span class="line">root@wflin-server:~# </span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>nginx03 连接到 mynet</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx03 连接到 mynet</span></span><br><span class="line">root@wflin-server:~# docker network connect mynet nginx03</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 mynet 网络配置</span></span><br><span class="line">root@wflin-server:~# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;db6d7453eebebef2b30695b1576cf6f1d53b472e1fd1ef92ac2256ebbddf5d94&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-04-20T08:21:15.525137543Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;1e813d36e0e8b11368589b36ff2364c840cb2f302fc54f0ea57802fc4953cd39&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;nginx01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;56201d830e18e9d012e8ef3566ad2fcf0c7211a90cc5054dd716fccf8c62d1e7&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;84e7c0daa060bc40779a26cd6605a5984737646977408d88f31d5afa980d0fbc&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;nginx02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;abc06f8372d33671196a1031f93865107ea2ce8a58586ba3290f0c79057dbd4e&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">            # nginx03 网络加入了mynet</span><br><span class="line">            &quot;a4bd9db4ba8fc857a39cfd8783ba989839063ae420c5998c2422a196358011bf&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;nginx03&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;7bc12e716959f688ce647749280aac2e8e76ca8fc164930bac119a8c29f5cd28&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:04&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.4/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">root@wflin-server:~#</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一个容器两个 ip 地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">aliyun云服务: 公网ip，和 内网ip</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><ol>
<li>常用指令：</li>
</ol>
<ul>
<li>docker-compose <ul>
<li>up  直接启动（控制台打日志）<ul>
<li>-d 后台启动</li>
<li>–buid 重新构建并启动（部署 Dockerfile 的镜像时常用，改动文件后重新部署生成）</li>
</ul>
</li>
<li>ps -a 查看当前 yaml 文件下的所有容器服务列表</li>
<li>restart 重启 docker-compose.yaml 中所管理的服务</li>
</ul>
</li>
</ul>
<h3 id="模板文件："><a href="#模板文件：" class="headerlink" title="模板文件："></a>模板文件：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version &quot;3&quot;</span><br><span class="line"></span><br><span class="line">service:</span><br><span class="line"> serviceName:</span><br><span class="line"> 	image: 镜像名字</span><br><span class="line"> 	container_name: 容器别名</span><br><span class="line"> 	port: 暴露端口</span><br><span class="line"> 	volume: 挂载数据卷</span><br><span class="line"> 	environment：环境变量</span><br><span class="line"> 	command: 容器启动执行指令</span><br><span class="line"> 	network: 容器挂载网络</span><br><span class="line"> 	depend_on: 启动时依赖的其他服务先启动</span><br><span class="line"> </span><br><span class="line"> network：</span><br><span class="line"> 	- 配置网络</span><br></pre></td></tr></table></figure>

<h4 id="部署Java"><a href="#部署Java" class="headerlink" title="部署Java"></a>部署Java</h4><ol>
<li>编写 Dockerfile</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jre</span><br><span class="line">ADD *.jar /app/apps.jar</span><br><span class="line">ENV MYPATH /app</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line">EXPOSE 9090</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;]</span><br><span class="line">CMD [&quot;apps.jar&quot;]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写 docker-compose.yaml</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">prod:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理一组服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">back:</span>    <span class="comment">#后台服务</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">./back</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="comment"># ports:</span></span><br><span class="line">    <span class="comment">#   - &quot;9090:9090&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">back</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prod</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql5</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">front:</span>  <span class="comment">#前台服务</span></span><br><span class="line">  <span class="comment">#    build: ./</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./front</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">front</span></span><br><span class="line">    <span class="comment"># ports:</span></span><br><span class="line">    <span class="comment">#   - &quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prod</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql5</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">mysql5:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql-5.7</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">100mb</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3305:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysqlConfig/config5:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysqlData/data5:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=nba1234567</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">&quot;999:999&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span>   <span class="comment">#nginx服务</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/conf/:/etc/nginx/conf.d</span> <span class="comment">#配置文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/template:/usr/share/nginx</span> <span class="comment">#静态资源根目录挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/log:/var/log/nginx</span> <span class="comment">#日志文件挂载</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>

<p>注意：<code>在一个docker 网络中如果需要连接这个网络中的 redis、mysql 等中间件，如果没有对外映射端口。 需要将 application.yaml 中将数据库的连接改为对应服务名进行访问</code></p>
<h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><h5 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h5><ul>
<li><p>上午松哥审核并讲解了之前提交的代码，指出了代码中存在的一些问题，方法的单一职责，注释的书写，方法名称的定义等</p>
</li>
<li><p>薪哥讲解一下公司的物联网中台的大致样子，有哪些模块，支持几种通道tcp&#x2F;udp&#x2F;mqtt&#x2F;http 等，网关支持的协议</p>
</li>
<li><p>概述了一下base_service 的一些代码，主启动里面启动时注册了一些组件，然后责任链模式，报文解析的脚本 Groove</p>
</li>
<li><p>最后测试一下那个系统的拓展的选择时间范围查设备的功能</p>
</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 常用函数</title>
    <url>/hexo/2023/02/17/js-han-shu/</url>
    <content><![CDATA[<h2 id="JavaScript-下拉加载防抖节流函数"><a href="#JavaScript-下拉加载防抖节流函数" class="headerlink" title="JavaScript 下拉加载防抖节流函数"></a>JavaScript 下拉加载防抖节流函数</h2><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">        <span class="keyword">if</span> (nowTime - lastTime &gt;= delay) &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">            lastTime = nowTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="触底函数"><a href="#触底函数" class="headerlink" title="触底函数"></a>触底函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">handleScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> scrollTop =</span><br><span class="line">          <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">const</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">    <span class="keyword">const</span> clientHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        scrollTop + clientHeight &gt;= scrollHeight - <span class="number">5</span> &amp;&amp;</span><br><span class="line">        !<span class="variable language_">this</span>.<span class="property">isLoading</span> &amp;&amp;</span><br><span class="line">        !<span class="variable language_">this</span>.<span class="property">isFinished</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">loadData</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="vue中使用以上函数进行滚动加载"><a href="#vue中使用以上函数进行滚动加载" class="headerlink" title="vue中使用以上函数进行滚动加载"></a>vue中使用以上函数进行滚动加载</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">loadData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 调用 API 获取数据</span></span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">        <span class="attr">page</span>: <span class="variable language_">this</span>.<span class="property">currentPage</span>,</span><br><span class="line">        <span class="attr">size</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">fetchData</span>(params).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dataList</span> = <span class="variable language_">this</span>.<span class="property">dataList</span>.<span class="title function_">concat</span>(res.<span class="property">data</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">currentPage</span>++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isFinished</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>









<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isLoading</span>: <span class="literal">false</span>, <span class="comment">// 是否正在加载数据</span></span><br><span class="line">      <span class="attr">isFinished</span>: <span class="literal">false</span>, <span class="comment">// 是否已经加载完成所有数据</span></span><br><span class="line">      <span class="attr">currentPage</span>: <span class="number">1</span>, <span class="comment">// 当前页码</span></span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">10</span>, <span class="comment">// 每页数据条数</span></span><br><span class="line">      <span class="attr">dataList</span>: [], <span class="comment">// 加载的数据列表</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 防抖函数，防止用户频繁触发滚动事件</span></span><br><span class="line">    <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节流函数，限制函数执行频率</span></span><br><span class="line">    <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">        <span class="keyword">if</span> (nowTime - lastTime &gt;= delay) &#123;</span><br><span class="line">          fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">          lastTime = nowTime;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滚动事件处理函数</span></span><br><span class="line">    <span class="title function_">handleScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> scrollTop =</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">      <span class="keyword">const</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">      <span class="keyword">const</span> clientHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        scrollTop + clientHeight &gt;= scrollHeight - <span class="number">5</span> &amp;&amp;</span><br><span class="line">        !<span class="variable language_">this</span>.<span class="property">isLoading</span> &amp;&amp;</span><br><span class="line">        !<span class="variable language_">this</span>.<span class="property">isFinished</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">loadData</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载数据</span></span><br><span class="line">    <span class="title function_">loadData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 调用 API 获取数据</span></span><br><span class="line">      <span class="keyword">const</span> params = &#123;</span><br><span class="line">        <span class="attr">page</span>: <span class="variable language_">this</span>.<span class="property">currentPage</span>,</span><br><span class="line">        <span class="attr">size</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title function_">fetchData</span>(params).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">dataList</span> = <span class="variable language_">this</span>.<span class="property">dataList</span>.<span class="title function_">concat</span>(res.<span class="property">data</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">currentPage</span>++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">isFinished</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isLoading</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 监听滚动事件</span></span><br><span class="line">    <span class="keyword">const</span> debouncedScroll = <span class="variable language_">this</span>.<span class="title function_">debounce</span>(<span class="variable language_">this</span>.<span class="property">handleScroll</span>, <span class="number">300</span>);</span><br><span class="line">    <span class="keyword">const</span> throttledScroll = <span class="variable language_">this</span>.<span class="title function_">throttle</span>(debouncedScroll, <span class="number">500</span>);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, throttledScroll);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 取消滚动事件监听</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleScroll</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex</title>
    <url>/hexo/2022/03/09/latex/</url>
    <content><![CDATA[<h1 id="laTex-一些简单常用语法"><a href="#laTex-一些简单常用语法" class="headerlink" title="laTex 一些简单常用语法"></a>laTex 一些简单常用语法</h1><p><a href="https://www.latexlive.com/">latex在线工具</a></p>
<ul>
<li><p>上标</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">a<span class="built_in">^</span>2</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>



<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">a<span class="built_in">^</span>&#123;222222&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>



<p>效果<br>$$<br>a^2<br>$$</p>
<hr>
<p>$$<br>a^{222222}<br>$$</p>
</li>
<li><p>下标</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">A<span class="built_in">_</span>&#123;bb<span class="built_in">_</span>&#123;cc&#125;&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>A_{bb_{cc}}<br>$$</p>
</li>
<li><p>插入水平线</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\overline</span>&#123;a+b+c&#125;=<span class="keyword">\underline</span>&#123;a+b+c&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>\overline{a+b+c}&#x3D;\underline{a+b+c}<br>$$</p>
</li>
<li><p>开高次根号</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\sqrt</span>[5]&#123;a+v+b+p&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>\sqrt[5]{a+v+b+p}<br>$$</p>
</li>
<li><p>插入水平大括号</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\overbrace</span>&#123;2,3,4,<span class="keyword">\cdots</span>,100&#125;<span class="built_in">^</span>&#123;99&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>\overbrace{2,3,4,\cdots,100}^{99}<br>$$</p>
</li>
<li><p>分数</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\frac</span>&#123;asdasdas&#125;&#123;asifeqjs&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
</li>
</ul>
<p>$$<br>\frac{asdasdas}{asifeqjs}<br>$$</p>
<ul>
<li><p>积分</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\int</span><span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>



<p>效果：<br>$$<br>\int_{a}^{b}<br>$$</p>
</li>
<li><p>求和</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\sum</span><span class="keyword">\limits</span><span class="built_in">_</span>&#123;a&#125;<span class="built_in">^</span>&#123;b&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>\sum\limits_{a}^{b}<br>$$</p>
</li>
<li><p>向量</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\vec</span> a = <span class="keyword">\overrightarrow</span>&#123;AB&#125;=<span class="keyword">\overleftarrow</span>&#123;BA&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>\vec a&#x3D;\overrightarrow{AB}&#x3D;\overleftarrow{BA}<br>$$</p>
</li>
<li><p>空格</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\quad</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>\quad<br>$$</p>
</li>
<li><p>乘积</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\prod</span><span class="built_in">_</span>&#123;ad&#125;</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<p>效果：<br>$$<br>\prod_{ad}<br>$$</p>
</li>
</ul>
]]></content>
      <categories>
        <category>latex</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua</title>
    <url>/hexo/2019/08/27/lua/</url>
    <content><![CDATA[<h1 id="lua【为了解决高并发秒杀商品冗余问题】"><a href="#lua【为了解决高并发秒杀商品冗余问题】" class="headerlink" title="lua【为了解决高并发秒杀商品冗余问题】"></a>lua【为了解决高并发秒杀商品冗余问题】</h1><h2 id="lua运行的形式"><a href="#lua运行的形式" class="headerlink" title="lua运行的形式"></a>lua运行的形式</h2><ul>
<li><p>lua -i 交互式编程</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">$ lua -i </span><br><span class="line">$ Lua <span class="number">5.3</span><span class="number">.0</span>  Copyright (C) <span class="number">1994</span><span class="number">-2015</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;Hello World！&quot;</span>)</span><br><span class="line">Hello World！</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>脚本式编程</p>
<ul>
<li><p>hello.lua</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World！&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;www.runoob.com&quot;</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">$ lua hello.lua</span><br><span class="line">Hello World！</span><br><span class="line">www.runoob.com</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>也可以修改为一下脚本实现（在开头添加：#!&#x2F;usr&#x2F;local&#x2F;bin&#x2F;lua）</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#!/usr/<span class="keyword">local</span>/bin/lua</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World！&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;www.runoob.com&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上代码中，我们指定了 Lua 的解释器 &#x2F;usr&#x2F;local&#x2F;bin directory。加上 # 号标记解释器会忽略它。接下来我们为脚本添加可执行权限，并执行：chmod +x hello.lua</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">./hello.lua </span><br><span class="line">Hello World！</span><br><span class="line">www.runoob.com</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="注释方式"><a href="#注释方式" class="headerlink" title="注释方式"></a>注释方式</h2><ul>
<li><p>单行注释</p>
<blockquote>
<p><strong>–</strong></p>
</blockquote>
</li>
<li><p>多行注释</p>
<blockquote>
<p>–[[</p>
<p>​	 多行注释</p>
<p>–]]</p>
</blockquote>
</li>
<li><p>Lua 是一个区分大小写的编程语言</p>
</li>
<li><p>变量命名规则和C语言的命名规则一致</p>
</li>
</ul>
<h2 id="保留关键字"><a href="#保留关键字" class="headerlink" title="保留关键字"></a>保留关键字</h2><ul>
<li>以下列出了 Lua 的保留关键词。保留关键字不能作为常量或变量或其他用户自定义标示符：</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>break</td>
<td>do</td>
<td>else</td>
</tr>
<tr>
<td>elseif</td>
<td>end</td>
<td>false</td>
<td>for</td>
</tr>
<tr>
<td>function</td>
<td>if</td>
<td>in</td>
<td>local</td>
</tr>
<tr>
<td>nil</td>
<td>not</td>
<td>or</td>
<td>repeat</td>
</tr>
<tr>
<td>return</td>
<td>then</td>
<td>true</td>
<td>until</td>
</tr>
<tr>
<td>while</td>
<td>goto</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>一般约定，以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量。</li>
</ul>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ul>
<li><p>在默认情况下，变量总是认为是全局的。</p>
</li>
<li><p>全局变量不需要声明，给一个变量赋值后即创建了这个全局变量，访问一个没有初始化的全局变量也不会出错，只不过得到的结果是：nil</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">print</span>(b)</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">&gt; b=<span class="number">10</span></span><br><span class="line">&gt; <span class="built_in">print</span>(b)</span><br><span class="line"><span class="number">10</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你想删除一个全局变量，只需要将变量赋值为nil。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">b = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(b)      <span class="comment">--&gt; nil</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>这样变量b就好像从没被使用过一样。换句话说, 当且仅当一个变量不等于nil时，这个变量即存在。</p>
</li>
</ul>
<h2 id="Lua-数据类型"><a href="#Lua-数据类型" class="headerlink" title="Lua 数据类型"></a>Lua 数据类型</h2><ul>
<li><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p>
</li>
<li><p>Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</p>
<table>
<thead>
<tr>
<th align="left">数据类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">nil</td>
<td align="left">这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td>
</tr>
<tr>
<td align="left">boolean</td>
<td align="left">包含两个值：false和true。</td>
</tr>
<tr>
<td align="left">number</td>
<td align="left">表示双精度类型的实浮点数</td>
</tr>
<tr>
<td align="left">string</td>
<td align="left">字符串由一对双引号或单引号来表示</td>
</tr>
<tr>
<td align="left">function</td>
<td align="left">由 C 或 Lua 编写的函数</td>
</tr>
<tr>
<td align="left">userdata</td>
<td align="left">表示任意存储在变量中的C数据结构</td>
</tr>
<tr>
<td align="left">thread</td>
<td align="left">表示执行的独立线路，用于执行协同程序</td>
</tr>
<tr>
<td align="left">table</td>
<td align="left">Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td>
</tr>
</tbody></table>
</li>
<li><p>我们可以使用 type 函数测试给定变量或者值的类型：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;Hello world&quot;</span>))      <span class="comment">--&gt; string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10.4</span>*<span class="number">3</span>))             <span class="comment">--&gt; number</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">print</span>))              <span class="comment">--&gt; function</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>))               <span class="comment">--&gt; function</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">true</span>))               <span class="comment">--&gt; boolean</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">nil</span>))                <span class="comment">--&gt; nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>(X)))            <span class="comment">--&gt; string</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="nil（空）"><a href="#nil（空）" class="headerlink" title="nil（空）"></a>nil（空）</h3><ul>
<li><p>nil 类型表示一种没有任何有效值，它只有一个值 – nil，例如打印一个没有赋值的变量，便会输出一个 nil 值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>


</li>
<li><p>对于全局变量和 table，nil 还有一个”删除”作用，给全局变量或者 table 表里的变量赋一个 nil 值，等同于把它们删掉，执行下面代码就知：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">tab1 = &#123; key1 = <span class="string">&quot;val1&quot;</span>, key2 = <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span> &#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab1) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k .. <span class="string">&quot; - &quot;</span> .. v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-------------结果---------------</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="number">1</span> - val3</span><br><span class="line">key1 - val1</span><br><span class="line">key2 - val2</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用 nil 删除 table 的第一个元素</span></span><br><span class="line">tab1.key1 = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab1) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k .. <span class="string">&quot; - &quot;</span> .. v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-------------结果-----------------</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="number">1</span> - val3</span><br><span class="line">key2 - val2</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="nil-作为比较时应该加上双引号-“"><a href="#nil-作为比较时应该加上双引号-“" class="headerlink" title="nil 作为比较时应该加上双引号 “ "></a>nil 作为比较时应该加上双引号 <code>“ </code></h3><p>* </p>
  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">type</span>(X)</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">&gt; <span class="built_in">type</span>(X)==<span class="literal">nil</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&gt; <span class="built_in">type</span>(X)==<span class="string">&quot;nil&quot;</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>type(X)&#x3D;&#x3D;nil</strong> 结果为 <strong>false</strong> 的原因是 type(X) 实质是返回的 <strong>“nil”</strong> 字符串，是一个 string 类型</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="built_in">type</span>(X))==<span class="built_in">string</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="boolean（布尔）"><a href="#boolean（布尔）" class="headerlink" title="boolean（布尔）"></a>boolean（布尔）</h3><ul>
<li><p>boolean 类型只有两个可选值：true（真） 和 false（假），Lua 把 false 和 nil 看作是 false，其他的都为 true，数字 0 也是 true:</p>
</li>
<li><p>实例  <code>test.lua</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">true</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">false</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">nil</span>))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="literal">false</span> <span class="keyword">or</span> <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;至少有一个是 true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;false 和 nil 都为 false&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数字 0 是 true&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数字 0 为 false&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码执行结果</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">$ lua test.lua </span><br><span class="line">boolean</span><br><span class="line">boolean</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line"><span class="literal">false</span> 和 <span class="literal">nil</span> 都为 <span class="literal">false</span></span><br><span class="line">数字 <span class="number">0</span> 是 <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="number（数字）"><a href="#number（数字）" class="headerlink" title="number（数字）"></a>number（数字）</h3><ul>
<li><p>Lua 默认只有一种 number 类型 – double（双精度）类型（默认类型可以修改 luaconf.h 里的定义），以下几种写法都被看作是 number 类型</p>
</li>
<li><p>实例</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">2.2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">0.2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">2e+1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">0.2e-1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">7.8263692594256e-06</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上代码执行结果</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">number</span><br><span class="line">number</span><br><span class="line">number</span><br><span class="line">number</span><br><span class="line">number</span><br><span class="line">number</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="String-（字符串）"><a href="#String-（字符串）" class="headerlink" title="String （字符串）"></a>String （字符串）</h3><ul>
<li><p>字符串由一对双引号或者单引号表示</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">string1 = <span class="string">&quot;this is string1&quot;</span></span><br><span class="line">string2 = <span class="string">&#x27;this is string2&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以用 2 个方括号 “[[]]” 来表示 “一块” 字符串</p>
</li>
<li><p>实例：<code>test.lua</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">html = <span class="string">[[</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;a href=&quot;http://www.wflin.ltd/&quot;&gt;wflin&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure>
</li>
<li><p>以下代码执行结果为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.wflin.ltd/&quot;</span>&gt;</span>wflin<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在对一个数字字符串上进行算术操作时，Lua 会尝试将这个数字字符串转成一个数字:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span> + <span class="number">6</span>)</span><br><span class="line"><span class="number">8.0</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span> + <span class="string">&quot;6&quot;</span>)</span><br><span class="line"><span class="number">8.0</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;2 + 6&quot;</span>)</span><br><span class="line"><span class="number">2</span> + <span class="number">6</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;-2e2&quot;</span> * <span class="string">&quot;6&quot;</span>)</span><br><span class="line"><span class="number">-1200.0</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span> + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">stdin</span>:<span class="number">1</span>: attempt to perform arithmetic on a <span class="built_in">string</span> value</span><br><span class="line">stack <span class="built_in">traceback</span>:</span><br><span class="line">        <span class="built_in">stdin</span>:<span class="number">1</span>: <span class="keyword">in</span> main chunk</span><br><span class="line">        [C]: <span class="keyword">in</span> ?</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上代码中”error” + 1执行报错了，字符串连接使用的是 <strong><code>..</code></strong> ，如</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">print</span>(<span class="string">&quot;a&quot;</span> .. <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ab</span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="number">157</span> .. <span class="number">428</span>)</span><br><span class="line"><span class="number">157428</span></span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 # 来计算字符串的长度，放在字符串前面，如下实例</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">len</span> = <span class="string">&quot;www.wflin.ltd&quot;</span></span><br><span class="line">&gt; <span class="built_in">print</span>(#<span class="built_in">len</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line">&gt; <span class="built_in">print</span>(#<span class="string">&quot;www.wflin.ltd&quot;</span>)</span><br><span class="line"><span class="number">14</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="table（表）"><a href="#table（表）" class="headerlink" title="table（表）"></a>table（表）</h3><ul>
<li><p>在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。也可以在表里添加一些数据，直接初始化表</p>
</li>
<li><p>实例 <code>table_test.lua</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建一个空的 table</span></span><br><span class="line"><span class="keyword">local</span> tbl1 = &#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 直接初始表</span></span><br><span class="line"><span class="keyword">local</span> tbl2 = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;grape&quot;</span>&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串。</p>
</li>
<li><p>实例</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- table_test.lua 脚本文件</span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line">a[<span class="string">&quot;key&quot;</span>] = <span class="string">&quot;value&quot;</span></span><br><span class="line">key = <span class="number">10</span></span><br><span class="line">a[key] = <span class="number">22</span></span><br><span class="line">a[key] = a[key] + <span class="number">11</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(a) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k .. <span class="string">&quot; : &quot;</span> .. v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>脚本执行结果为</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">$ lua table_test.lua </span><br><span class="line">key : value</span><br><span class="line"><span class="number">10</span> : <span class="number">33</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不同于其他语言的数组把 0 作为数组的初始索引，在 Lua 里表的默认初始索引一般以 1 开始</p>
</li>
<li><p>实例</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- table_test2.lua 脚本文件</span></span><br><span class="line"><span class="keyword">local</span> tbl = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;grape&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> <span class="built_in">pairs</span>(tbl) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Key&quot;</span>, key)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行结果为</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">$ lua table_test2.lua </span><br><span class="line">Key    <span class="number">1</span></span><br><span class="line">Key    <span class="number">2</span></span><br><span class="line">Key    <span class="number">3</span></span><br><span class="line">Key    <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>table 不会固定长度大小，有新数据添加时 table 长度会自动增长，没初始的 table 都是 nil。</p>
</li>
<li><p>实例</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- table_test3.lua 脚本文件</span></span><br><span class="line">a3 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">    a3[i] = i</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">a3[<span class="string">&quot;key&quot;</span>] = <span class="string">&quot;val&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a3[<span class="string">&quot;key&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(a3[<span class="string">&quot;none&quot;</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行结果为</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">$ lua table_test3.lua </span><br><span class="line">val</span><br><span class="line"><span class="literal">nil</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>lua</category>
      </categories>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>minio</title>
    <url>/hexo/2022/11/05/minio/</url>
    <content><![CDATA[<h1 id="firstOne"><a href="#firstOne" class="headerlink" title="firstOne"></a>firstOne</h1><h2 id="MinIOUtils"><a href="#MinIOUtils" class="headerlink" title="MinIOUtils"></a>MinIOUtils</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wflin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wflin.pojo.ObjectItem;</span><br><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteError;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteObject;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.http.fileupload.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 判断bucket是否存在，不存在则创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">existBucket</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(name).build());</span><br><span class="line">            <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">                minioClient.makeBucket(MakeBucketArgs.builder().bucket(name).build());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建存储bucket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除存储bucket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">removeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeBucket(RemoveBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile[] multipartFile)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(multipartFile.length);</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : multipartFile) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取文件后缀名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">split</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 取文件名字并把文件种的.转为_</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> fileName.substring(<span class="number">0</span>,fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>)).replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            <span class="comment">// 新的文件名</span></span><br><span class="line">            fileName = oldName + <span class="string">&quot;_&quot;</span> + System.currentTimeMillis()+<span class="string">&quot;.&quot;</span>+ split;</span><br><span class="line"></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = file.getInputStream();</span><br><span class="line">                minioClient.putObject(PutObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(fileName)</span><br><span class="line">                        .stream(in, in.available(), -<span class="number">1</span>)</span><br><span class="line">                        .contentType(file.getContentType())</span><br><span class="line">                        .build()</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            names.add(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> names;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 下载文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: org.springframework.http.ResponseEntity&lt;byte [ ]&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; download(String fileName) &#123;</span><br><span class="line">        ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = minioClient.getObject(GetObjectArgs.builder().bucket(bucketName).object(fileName).build());</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            IOUtils.copy(in, out);</span><br><span class="line">            <span class="comment">//封装返回值</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = out.toByteArray();</span><br><span class="line">            <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            headers.setContentLength(bytes.length);</span><br><span class="line">            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">            headers.setAccessControlExposeHeaders(Arrays.asList(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">            responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;<span class="type">byte</span>[]&gt;(bytes, headers, HttpStatus.OK);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存储bucket内文件对象信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ObjectItem&gt; <span class="title function_">listObjects</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        List&lt;ObjectItem&gt; objectItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">                <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> result.get();</span><br><span class="line">                <span class="type">ObjectItem</span> <span class="variable">objectItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectItem</span>();</span><br><span class="line">                objectItem.setObjectName(item.objectName());</span><br><span class="line">                objectItem.setSize(item.size());</span><br><span class="line">                objectItems.add(objectItem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objectItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects 对象名称集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;Result&lt;DeleteError&gt;&gt; <span class="title function_">removeObjects</span><span class="params">(String bucketName, List&lt;String&gt; objects)</span> &#123;</span><br><span class="line">        List&lt;DeleteObject&gt; dos = objects.stream().map(e -&gt; <span class="keyword">new</span> <span class="title class_">DeleteObject</span>(e)).collect(Collectors.toList());</span><br><span class="line">        Iterable&lt;Result&lt;DeleteError&gt;&gt; results = minioClient.removeObjects(RemoveObjectsArgs.builder().bucket(bucketName).objects(dos).build());</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ObjectItem"><a href="#ObjectItem" class="headerlink" title="ObjectItem"></a>ObjectItem</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String objectName;</span><br><span class="line">    <span class="keyword">private</span> Long size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wflin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wflin.pojo.ObjectItem;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioUtil minioUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.remote_endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String remote_address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">       </span><br><span class="line">        List&lt;String&gt; upload = minioUtil.upload(<span class="keyword">new</span> <span class="title class_">MultipartFile</span>[]&#123;file&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建议不拼接网址，因为网址可能是变化的</span></span><br><span class="line">        log.info(<span class="string">&quot;图片的路径 &#123;&#125;&quot;</span>,remote_address+<span class="string">&quot;/&quot;</span>+bucketName+<span class="string">&quot;/&quot;</span>+upload.get(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> remote_address+<span class="string">&quot;/&quot;</span>+bucketName+<span class="string">&quot;/&quot;</span>+upload.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getImages&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getImages</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;ObjectItem&gt; images = minioUtil.listObjects(bucketName);</span><br><span class="line">        System.out.println(images);</span><br><span class="line">        ArrayList&lt;String&gt; imagesList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(ObjectItem item:images)&#123;</span><br><span class="line">            imagesList.add(remote_address+<span class="string">&quot;/&quot;</span>+bucketName+<span class="string">&quot;/&quot;</span>+item.getObjectName());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;minio 中所有图片的路径 &#123;&#125;&quot;</span>,imagesList);</span><br><span class="line">        <span class="keyword">return</span> imagesList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SencondTwo"><a href="#SencondTwo" class="headerlink" title="SencondTwo"></a>SencondTwo</h1><h2 id="MinIOConfig"><a href="#MinIOConfig" class="headerlink" title="MinIOConfig"></a>MinIOConfig</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wflin.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件服务器配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MinIOUitls"><a href="#MinIOUitls" class="headerlink" title="MinIOUitls"></a>MinIOUitls</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wflin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.http.Method;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Bucket;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteError;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteObject;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FastByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件服务器工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看存储bucket是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">bucketExists</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        Boolean found;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建存储bucket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除存储bucket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">removeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeBucket(RemoveBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部bucket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Bucket&gt; <span class="title function_">getAllBuckets</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> minioClient.listBuckets();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file,String bucketName)</span> &#123;</span><br><span class="line">        <span class="comment">// 修饰过的文件名 非源文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;2021-07/21/&quot;</span>;</span><br><span class="line">        fileName = fileName+file.getOriginalFilename();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">objectArgs</span> <span class="operator">=</span> PutObjectArgs.builder().bucket(bucketName).object(fileName)</span><br><span class="line">                    .stream(file.getInputStream(),file.getSize(),-<span class="number">1</span>).contentType(file.getContentType()).build();</span><br><span class="line">            <span class="comment">//文件名称相同会覆盖</span></span><br><span class="line">            minioClient.putObject(objectArgs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;上传文件失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bucketName+<span class="string">&quot;/&quot;</span>+fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预览图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@discription</span> 如果只有一个 bucketName 可以不传入 bucketName,如果有多个，则可以传入 bucketName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">preview</span><span class="params">(String fileName,String bucketName)</span>&#123;</span><br><span class="line">        <span class="comment">// 查看文件地址</span></span><br><span class="line">        <span class="type">GetPresignedObjectUrlArgs</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetPresignedObjectUrlArgs</span>().builder().bucket(bucketName).object(fileName).method(Method.GET).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> minioClient.getPresignedObjectUrl(build);</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String fileName,String bucketName, HttpServletResponse res)</span> &#123;</span><br><span class="line">        <span class="type">GetObjectArgs</span> <span class="variable">objectArgs</span> <span class="operator">=</span> GetObjectArgs.builder().bucket(bucketName)</span><br><span class="line">                .object(fileName).build();</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">GetObjectResponse</span> <span class="variable">response</span> <span class="operator">=</span> minioClient.getObject(objectArgs))&#123;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">FastByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastByteArrayOutputStream</span>())&#123;</span><br><span class="line">                <span class="keyword">while</span> ((len=response.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    os.write(buf,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                os.flush();</span><br><span class="line">                <span class="type">byte</span>[] bytes = os.toByteArray();</span><br><span class="line">                res.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="comment">//设置强制下载不打开</span></span><br><span class="line">                <span class="comment">//res.setContentType(&quot;application/force-download&quot;);</span></span><br><span class="line">                res.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> + fileName);</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">ServletOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> res.getOutputStream())&#123;</span><br><span class="line">                    stream.write(bytes);</span><br><span class="line">                    stream.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存储bucket内文件对象信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Item&gt; <span class="title function_">listObjects</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        List&lt;Item&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">                items.add(result.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(String fileName,String bucketName)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeObject( RemoveObjectArgs.builder().bucket(bucketName).object(fileName).build());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除文件对象（没测试）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects 对象名称集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;Result&lt;DeleteError&gt;&gt; <span class="title function_">removeObjects</span><span class="params">(List&lt;String&gt; objects,String bucketName)</span> &#123;</span><br><span class="line">        List&lt;DeleteObject&gt; dos = objects.stream().map(e -&gt; <span class="keyword">new</span> <span class="title class_">DeleteObject</span>(e)).collect(Collectors.toList());</span><br><span class="line">        Iterable&lt;Result&lt;DeleteError&gt;&gt; results = minioClient.removeObjects(RemoveObjectsArgs.builder().bucket(bucketName).objects(dos).build());</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MinIOController"><a href="#MinIOController" class="headerlink" title="MinIOController"></a>MinIOController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wflin.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wflin.utils.MinioUtil;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/file/v1&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioUtil minioUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/bucketExists&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">bucketExists</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        System.out.println(minioUtil.bucketExists(bucketName));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/makeBucket&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        System.out.println(minioUtil.makeBucket(bucketName));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/removeBucket&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">removeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        System.out.println(minioUtil.removeBucket(bucketName));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAllBuckets&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getAllBuckets</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(minioUtil.getAllBuckets());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">getlist</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Item&gt; itemList = minioUtil.listObjects(bucketName);</span><br><span class="line">        <span class="keyword">for</span> (Item item : itemList) &#123;</span><br><span class="line">            System.out.println(item.objectName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        System.out.println(minioUtil.upload(file,bucketName));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/preview&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">preview</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(minioUtil.preview(fileName,bucketName));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">download</span><span class="params">(String fileName, HttpServletResponse res)</span> &#123;</span><br><span class="line">        minioUtil.download(fileName,bucketName,res);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/remove&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">remove</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(minioUtil.remove(fileName,bucketName));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="three"><a href="#three" class="headerlink" title="three"></a>three</h1><p>utils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.InvalidEndpointException;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.InvalidPortException;</span><br><span class="line"><span class="keyword">import</span> io.minio.http.Method;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Bucket;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MinioClient</span>(<span class="string">&quot;http://127.0.0.1:9000&quot;</span>,<span class="string">&quot;minioadmin&quot;</span>,<span class="string">&quot;minioadmin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinioUtil</span><span class="params">()</span> <span class="keyword">throws</span> InvalidPortException, InvalidEndpointException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建一个桶</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">(String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> minioClient.bucketExists(bucket);</span><br><span class="line">		<span class="keyword">if</span> (!found) &#123;</span><br><span class="line">			minioClient.makeBucket(bucket);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 上传一个文件</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(InputStream stream, String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		minioClient.putObject(bucket,objectName,stream,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 列出所有的桶</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;String&gt; <span class="title function_">listBuckets</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		List&lt;Bucket&gt; list = minioClient.listBuckets();</span><br><span class="line">		List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">		list.forEach(b -&gt; &#123;</span><br><span class="line">			names.add(b.name());</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">return</span> names;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 列出一个桶中的所有文件和目录</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;Fileinfo&gt; <span class="title function_">listFiles</span><span class="params">(String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(bucket);</span><br><span class="line">			</span><br><span class="line">			List&lt;Fileinfo&gt; infos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">				results.forEach(r-&gt;&#123;</span><br><span class="line">					<span class="type">Fileinfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fileinfo</span>();</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> r.get();</span><br><span class="line">						info.setFilename(item.objectName());</span><br><span class="line">						info.setDirectory(item.isDir());</span><br><span class="line">						infos.add(info);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">		<span class="keyword">return</span> infos;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 下载一个文件</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> InputStream <span class="title function_">download</span><span class="params">(String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">stream</span> <span class="operator">=</span> minioClient.getObject(bucket,objectName);</span><br><span class="line">		<span class="keyword">return</span> stream;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 生成一个文件的预览地址</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">preview</span><span class="params">(String bucket, String objectName,Map&lt;String, String&gt; reqParams)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> minioClient.getPresignedObjectUrl(Method.GET,bucket,objectName,<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>,reqParams);</span><br><span class="line">		<span class="keyword">return</span> filePath;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除一个桶</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBucket</span><span class="params">(String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		minioClient.removeBucket(bucket);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除一个对象</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteObject</span><span class="params">(String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		minioClient.removeObject(bucket,objectName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>博客园</p>
<p>utils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.core.utils.OptionalUtil;</span><br><span class="line"><span class="keyword">import</span> com.core.utils.StringUtil;</span><br><span class="line"><span class="keyword">import</span> com.core.utils.minio.exception.MinioException;</span><br><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * minio 文件服务器工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MinioUtil</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secure&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean secure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MinioClient <span class="title function_">buildMinIoClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder().endpoint(url, port, secure).credentials(accessKey, secretKey).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 桶名 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean true 存在； false 不存在；</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 14:00 2020/10/29</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">bucketExists</span><span class="params">(String bucket)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> buildMinIoClient().bucketExists(BucketExistsArgs.builder().bucket(bucket).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果桶不存在则创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 桶名 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 14:00 2020/10/29</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBucketByNotExists</span><span class="params">(String bucket)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucketExists(bucket)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buildMinIoClient().makeBucket(MakeBucketArgs.builder().bucket(bucket).build());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(ex.getMessage(), ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流式上传文件:桶不存在会抛异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 桶名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 存储目标名称 <span class="doctag">@NotNull</span> 多路径存储实例： package/subpackage/.../objectName 开头不要有/</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is 输入流 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectSize 文件大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> partSize 分片大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType 文本类型 默认类型：application/octet-stream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 14:01 2020/10/29</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putObjectThrows</span><span class="params">(String bucket, String objectName, InputStream is, Long objectSize, Long partSize,</span></span><br><span class="line"><span class="params">        String contentType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucketExists(bucket)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(<span class="string">&quot;The bucket not exists.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        putObject(bucket, objectName, is, objectSize, partSize, contentType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流式上传文件:桶不存在会创建桶</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 桶名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 存储目标名称 <span class="doctag">@NotNull</span> 多路径存储实例： package/subpackage/.../objectName 开头不要有/</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is 输入流 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectSize 文件大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> partSize 分片大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType 文本类型 默认类型：application/octet-stream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 14:01 2020/10/29</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putObjectSafe</span><span class="params">(String bucket, String objectName, InputStream is, Long objectSize, Long partSize,</span></span><br><span class="line"><span class="params">        String contentType)</span> &#123;</span><br><span class="line">        createBucketByNotExists(bucket);</span><br><span class="line">        putObject(bucket, objectName, is, objectSize, partSize, contentType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件地址上传文件：桶不存在抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 桶名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 存储目标名称 <span class="doctag">@NotNull</span> 多路径存储实例： package/subpackage/.../objectName 开头不要有/</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件存储路径 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contentType 文本类型 默认类型：application/octet-stream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 14:01 2020/10/29</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadObjectThrows</span><span class="params">(String bucket, String objectName, String filePath, String contentType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucketExists(bucket)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(<span class="string">&quot;The bucket not exists.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buildMinIoClient().uploadObject(UploadObjectArgs.builder()</span><br><span class="line">                .bucket(bucket)</span><br><span class="line">                .object(objectName)</span><br><span class="line">                .filename(filePath)</span><br><span class="line">                .contentType(StringUtil.convertBlankToDef(contentType, <span class="string">&quot;application/octet-stream&quot;</span>))</span><br><span class="line">                .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 桶名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 存储目标名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.io.InputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 14:39 2020/10/29</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getObject</span><span class="params">(String bucket, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> buildMinIoClient().getObject(GetObjectArgs.builder()</span><br><span class="line">                .bucket(bucket)</span><br><span class="line">                .object(objectName)</span><br><span class="line">                .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节形式读取文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 桶名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 存储目标名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.io.InputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 14:39 2020/10/29</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getObjectWithByteArray(String bucket, String objectName) &#123;</span><br><span class="line">        ArrayList&lt;<span class="type">byte</span>[]&gt; partList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> buildMinIoClient().getObject(GetObjectArgs.builder()</span><br><span class="line">                .bucket(bucket).object(objectName).build());</span><br><span class="line">            <span class="type">byte</span>[] buffered = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffered)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">byte</span>[] temp = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">                System.arraycopy(buffered, <span class="number">0</span>, temp, <span class="number">0</span>, len);</span><br><span class="line">                partList.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (partList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">size</span> <span class="operator">=</span> partList.stream().map(x -&gt; x.length).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[size];</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span>[] bytes : partList) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">byte</span> aByte : bytes) &#123;</span><br><span class="line">                result[currentIndex++] = aByte;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 桶名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 存储目标名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 10:49 2020/10/30</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeFile</span><span class="params">(String bucket, String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buildMinIoClient().removeObject(RemoveObjectArgs.builder().bucket(bucket).object(objectName).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceBucket 源文件桶 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceObject 源文件名 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 目标桶 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 目标文件 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 11:04 2020/10/30</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyObject</span><span class="params">(String sourceBucket, String sourceObject, String bucket, String object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CopySource</span> <span class="variable">source</span> <span class="operator">=</span> CopySource.builder().bucket(sourceBucket).object(sourceObject).build();</span><br><span class="line">            buildMinIoClient().copyObject(CopyObjectArgs.builder().bucket(bucket).object(object).source(source).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流式上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket 桶名称 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 存储目标名称 <span class="doctag">@NotNull</span> 多路径存储实例： package/subpackage/.../objectName 开头不要有/</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is 输入流 <span class="doctag">@NotNull</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectSize 文件大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> partSize 分片大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> GYP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@operation</span> add</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 14:01 2020/10/29</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(String bucket, String objectName, InputStream is, Long objectSize, Long partSize,</span></span><br><span class="line"><span class="params">        String contentType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            objectSize = OptionalUtil.getValueOrDef(objectSize, Long.valueOf(is.available()));</span><br><span class="line">            partSize = OptionalUtil.getValueOrDef(partSize, -<span class="number">1L</span>);</span><br><span class="line">            buildMinIoClient().putObject(PutObjectArgs.builder()</span><br><span class="line">                .bucket(bucket)</span><br><span class="line">                .object(objectName)</span><br><span class="line">                .stream(is, objectSize, partSize)</span><br><span class="line">                .contentType(StringUtil.convertBlankToDef(contentType, <span class="string">&quot;application/octet-stream&quot;</span>))</span><br><span class="line">                .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MinioException</span>(ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>oos</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>oos</tag>
      </tags>
  </entry>
  <entry>
    <title>modbus</title>
    <url>/hexo/2020/05/31/modbus/</url>
    <content><![CDATA[<h2 id="GitHub中拉取源码"><a href="#GitHub中拉取源码" class="headerlink" title="GitHub中拉取源码"></a>GitHub中拉取源码</h2><blockquote>
<p>git clone <a href="https://github.com/stephane/libmodbus.git">https://github.com/stephane/libmodbus.git</a></p>
</blockquote>
<ul>
<li>如果无法访问 GitHub 网站，自行百度魔法。进行访问</li>
</ul>
<h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd libmodbus # 进入目录</span><br><span class="line">./autogen.sh # 生成 congfig 文件</span><br></pre></td></tr></table></figure>

<ul>
<li>这里可能会报错，<code>autoreconf</code> 找不到</li>
</ul>
<p>解决办法：</p>
<ul>
<li>centos 下载：</li>
</ul>
<blockquote>
<p>sudo yum install -y autoconf automake libtool</p>
</blockquote>
<ul>
<li>ubuntu 下载</li>
</ul>
<blockquote>
<p>sudo apt-get install -y autoconf automake libtool</p>
</blockquote>
<p>下载完成再次运行脚本，控制台会生成,则表示生成 config文件成功</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">------------------------------------------------------</span><br><span class="line">Initialized build system. You can now run ./configure </span><br><span class="line">------------------------------------------------------</span><br></pre></td></tr></table></figure>

<h2 id="生成modbus的-makefile-文件"><a href="#生成modbus的-makefile-文件" class="headerlink" title="生成modbus的 makefile 文件"></a>生成modbus的 makefile 文件</h2><p>使用命令：</p>
<ul>
<li>个人喜欢将其安装在 usr 目录下，因为不是系统自带，是用户自己安装方便管理</li>
</ul>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="make-编译"><a href="#make-编译" class="headerlink" title="make 编译"></a>make 编译</h2><ul>
<li>make 指令，-j2 为采用2个核心去编译。编译更快</li>
</ul>
<blockquote>
<p>make -j2 </p>
</blockquote>
<ul>
<li>这里可能会报错 需要 gcc 为c99 标准，而gcc 编译器默认支持 c89 编译器，所有此时 makefile make时会报错</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">modbus.c: In function &#x27;read_io_status&#x27;:</span><br><span class="line">modbus.c:1202:9: error: &#x27;for&#x27; loop initial declarations are only allowed in C99 mode</span><br><span class="line">         for (unsigned int i = offset; i &lt; offset_end; i++) &#123;</span><br><span class="line">         ^</span><br><span class="line">modbus.c:1202:9: note: use option -std=c99 or -std=gnu99 to compile your code</span><br></pre></td></tr></table></figure>



<ul>
<li>更改命令可完成编译</li>
</ul>
<blockquote>
<p>make -j2 CFLAGS&#x3D;-std&#x3D;c99</p>
</blockquote>
<h2 id="make-安装"><a href="#make-安装" class="headerlink" title="make 安装"></a>make 安装</h2><blockquote>
<p>make install </p>
</blockquote>
<ul>
<li>全程无报错则安装成功</li>
</ul>
<h2 id="modbus-报文结构"><a href="#modbus-报文结构" class="headerlink" title="modbus 报文结构"></a>modbus 报文结构</h2><h3 id="下行帧"><a href="#下行帧" class="headerlink" title="下行帧"></a>下行帧</h3><ul>
<li><strong>11 01 00 13 00 25 F9 C8</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  01		01 		  0013     0025		F9C8</span><br><span class="line">从机地址	操作码		起始地址   数据数量	  CRC</span><br></pre></td></tr></table></figure>

<ul>
<li><p>11为从机地址（1byte），地址号17；</p>
</li>
<li><p>01为功能码（1bye），读线圈状态；</p>
</li>
<li><p>0013为寄存器起始地址（2byte），起始地址19；</p>
<ul>
<li><strong>备注：程序的起始地址为0。起始地址19实际上是第20号接触器。</strong></li>
</ul>
</li>
<li><p>0025为数据数量（2byte），37个状态量，需要5个字节的空间；</p>
</li>
<li><p>F9C8为CRC码（2byte）。</p>
<ul>
<li><strong>释义：读取来自17号从机以20号接触器为起始的37个接触器状态。</strong></li>
</ul>
</li>
</ul>
<h3 id="上行帧"><a href="#上行帧" class="headerlink" title="上行帧"></a>上行帧</h3><ul>
<li><p><strong>上行帧：11 01 05 CD 6B B2 0E 1B 18 8D</strong></p>
</li>
<li><p>11为从机地址（1byte），地址号17；</p>
</li>
<li><p>01为功能码（1byte），读线圈状态；</p>
</li>
<li><p>05为数据区字节数（1byte），5个字节；</p>
</li>
<li><p>CD 6B B2 0E 1B为数据（5byte），仅解析第一个数据（CD）,CD转为二进制序列为11001101，<strong>从低位到高位读</strong>，每一位对应一个接触器的状态，0为分，1为合。</p>
</li>
<li><p>综上数据段中的CD，表示20号接触器合位、21号分位、22号合位、23号合位、24号分位、25号分位、26号合位、27号合位；</p>
</li>
<li><p>18 8D为CRC码（2byte）。</p>
<ul>
<li><strong>释义：上送来自17号从机的接触器状态，其数据字节数为5，信息为20号接触器合位、21号分位、22号合位、23号合位、24号分位、25号分位、26号合位、27号合位……</strong></li>
</ul>
</li>
</ul>
<h2 id="ModBus-Poll"><a href="#ModBus-Poll" class="headerlink" title="ModBus Poll"></a>ModBus Poll</h2><ul>
<li><p>Tx &#x3D; 0 ：发送帧数</p>
</li>
<li><p>Err &#x3D; 0：错误帧数</p>
</li>
<li><p>ID &#x3D; 1：从站ID</p>
</li>
<li><p>F &#x3D; 03 功能码</p>
</li>
<li><p>SR &#x3D; 1000ms：轮询周期</p>
</li>
<li><p>No connection 无连接</p>
<p><img src="/hexo/2020/05/31/modbus/blog/source/_posts/modbus/image-20230426150558525.png" alt="image-20230426150558525"></p>
</li>
</ul>
<h2 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h2><ul>
<li><p>从机配置</p>
<p><img src="/hexo/2020/05/31/modbus/blog/source/_posts/modbus/image-20230426151108754.png" alt="image-20230426151108754"></p>
</li>
<li><p>常用功能码及其地址对应表</p>
<p><img src="/hexo/2020/05/31/modbus/blog/source/_posts/modbus/image-20230426161902783.png" alt="image-20230426161902783"></p>
</li>
<li><p>修改名字及其对应的值</p>
<p><img src="/hexo/2020/05/31/modbus/blog/source/_posts/modbus/c603849b8caf4e4ba164d1224446bf9a.png"></p>
</li>
</ul>
<h2 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h2><h3 id="tcp报文"><a href="#tcp报文" class="headerlink" title="tcp报文"></a>tcp报文</h3><ul>
<li><p>发送报文格式</p>
<p><img src="/hexo/2020/05/31/modbus/blog/source/_posts/modbus/image-20230427173732124.png" alt="image-20230427173732124"></p>
</li>
<li><p>响应报文格式</p>
</li>
</ul>
<p><img src="/hexo/2020/05/31/modbus/blog/source/_posts/modbus/image-20230427173656515.png" alt="image-20230427173656515"></p>
<ul>
<li><p>结构、</p>
<ul>
<li><p>发送报文</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">事务处理标识 协议标识 报文长度 单元标识 功能码 起始地址 寄存器个数</span><br><span class="line"> 008B 		0000 	0006 	01 		03 	 0000 	000A</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">* 响应的报文</span><br><span class="line"></span><br><span class="line">  ```txt</span><br><span class="line">  Tx:000000-00 8B 00 00 00 06 01 03 00 00 00 0A</span><br><span class="line">  Rx:000001-00 8B 00 00 00 17 01 03 14 00 00 00 01 00 14 00 0A 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  Tx:000002-00 8C 00 00 00 06 01 03 00 00 00 0A</span><br><span class="line">  Rx:000003-00 8C 00 00 00 17 01 03 14 00 00 00 01 00 14 00 0A 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  Tx:000004-00 8D 00 00 00 06 01 03 00 00 00 0A</span><br><span class="line">  Rx:000005-00 8D 00 00 00 17 01 03 14 00 00 00 01 00 14 00 0A 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  Tx:000006-00 8E 00 00 00 06 01 03 00 00 00 0A</span><br><span class="line">  Rx:000007-00 8E 00 00 00 17 01 03 14 00 00 00 01 00 14 00 0A 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure>

<h3 id="串口报文"><a href="#串口报文" class="headerlink" title="串口报文"></a>串口报文</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Rx:000043-01 03 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A3 67</span><br><span class="line">Tx:000044-01 03 00 00 00 0A C5 CD</span><br><span class="line">Rx:000045-01 03 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A3 67</span><br><span class="line">Tx:000046-01 03 00 00 00 0A C5 CD</span><br><span class="line">Rx:000047-01 03 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 A3 67</span><br><span class="line">Tx:000048-01 06 00 00 00 0A 09 CD</span><br><span class="line">Rx:000049-01 06 00 00 00 0A 09 CD</span><br><span class="line">Tx:000050-01 03 00 00 00 0A C5 CD</span><br><span class="line">Rx:000051-01 03 14 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 38 BE</span><br><span class="line">Tx:000052-01 03 00 00 00 0A C5 CD</span><br><span class="line">Rx:000053-01 03 14 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 38 BE</span><br><span class="line">Tx:000054-01 03 00 00 00 0A C5 CD</span><br><span class="line">Rx:000055-01 03 14 00 0A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 38 BE</span><br></pre></td></tr></table></figure>

<h3 id="报文对比"><a href="#报文对比" class="headerlink" title="报文对比"></a>报文对比</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">00 8C 00 00 00 06 01 03 00 00 00 0A #tcp报文</span><br><span class="line">01 03 00 00 00 0A C5 CD #RTU报文</span><br></pre></td></tr></table></figure>

<p>* </p>
<h2 id="测试其他情况"><a href="#测试其他情况" class="headerlink" title="测试其他情况"></a>测试其他情况</h2><h3 id="通过串口测试："><a href="#通过串口测试：" class="headerlink" title="通过串口测试："></a>通过串口测试：</h3><h4 id="主站和从站寄存器连续"><a href="#主站和从站寄存器连续" class="headerlink" title="主站和从站寄存器连续"></a>主站和从站寄存器连续</h4><table>
<thead>
<tr>
<th align="center">主站读取寄存器个数</th>
<th align="center">从站读取寄存器个数</th>
<th align="center"></th>
<th align="center">现象</th>
<th align="center">响应报文</th>
</tr>
</thead>
<tbody><tr>
<td align="center">6</td>
<td align="center">4</td>
<td align="center">&gt;</td>
<td align="center">02 llegal Data（非法数据地址错误）</td>
<td align="center">异常（01 83 02 C0 F1）</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">5</td>
<td align="center">&gt;</td>
<td align="center">02 llegal Data（非法数据地址错误）</td>
<td align="center">异常（01 83 02 C0 F1）</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">6</td>
<td align="center">&#x3D;</td>
<td align="center">正常读取</td>
<td align="center">正常</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">6</td>
<td align="center">&lt;</td>
<td align="center">读取正常</td>
<td align="center">正常</td>
</tr>
</tbody></table>
<h4 id="从站寄存器地址跳跃"><a href="#从站寄存器地址跳跃" class="headerlink" title="从站寄存器地址跳跃"></a>从站寄存器地址跳跃</h4><p><strong>寄存器跳号</strong>（好像那个模拟器搞不了跳号，只能看看有没有其他软件）</p>
<h2 id="真实测试设备"><a href="#真实测试设备" class="headerlink" title="真实测试设备"></a>真实测试设备</h2><h3 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h3><h4 id="主要信息"><a href="#主要信息" class="headerlink" title="主要信息"></a>主要信息</h4><ul>
<li><p><code>设备id：03，寄存器开始地址：0000，长度：2，波特率：2400，无校验位</code></p>
</li>
<li><p>测试报文发送报文:</p>
<blockquote>
<p>03 03 00 00 00 02 C5 E9</p>
</blockquote>
</li>
<li><p>解析响应报文</p>
<p><code>03 03 04 01 6B 01 03 E8 42</code></p>
<blockquote>
<p>03 设备id </p>
<p>03 操作码</p>
<p>04 数据长度</p>
<p>016B 0103 数据 –&gt; 363 259</p>
<p>E8 42 CRC</p>
</blockquote>
</li>
</ul>
<h4 id="手册解释"><a href="#手册解释" class="headerlink" title="手册解释"></a>手册解释</h4><p><img src="/hexo/2020/05/31/modbus/blog/source/_posts/modbus/image-20230427141150127.png" alt="image-20230427141150127"></p>
<h4 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h4><p><strong>湿度</strong>：363&#x2F;10 &#x3D; 36.3 RH</p>
<p><strong>温度</strong>：259&#x2F;10 &#x3D; 25.9 摄氏度</p>
<h4 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h4><ul>
<li>这个设备只能读2个数据，但是现在要求测试读取 4个数据，5个数据，6个数据</li>
</ul>
<table>
<thead>
<tr>
<th>读取数据个数</th>
<th>发送报文</th>
<th>响应报文</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>0303 0000 0005 842B</td>
<td>0303 0A 017B 00F7 0000 0000 0000 E20C</td>
</tr>
<tr>
<td>6</td>
<td>0303 0000 0006 C42A</td>
<td>0303 0C 0182 00F7 0000 0000 0000 0000 6CFC</td>
</tr>
<tr>
<td>1</td>
<td>0303 0000 0001 85E8</td>
<td>0303 02 018D 0071</td>
</tr>
<tr>
<td>2</td>
<td>0303 0000 0002 C5E9</td>
<td>0303 04 018A 00F8 F867</td>
</tr>
</tbody></table>
<ul>
<li>温湿度结论：读的寄存器大于设备本身寄存器，响应报文会填 0 补充。</li>
</ul>
<h2 id="通过网关"><a href="#通过网关" class="headerlink" title="通过网关"></a>通过网关</h2><p><img src="/hexo/2020/05/31/modbus/blog/source/_posts/modbus/image-20230427163655007.png" alt="image-20230427163655007"></p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h3 id="发送报文思路"><a href="#发送报文思路" class="headerlink" title="发送报文思路"></a>发送报文思路</h3><ul>
<li><p>设备地址</p>
</li>
<li><p>操作码</p>
</li>
<li><p>寄存器地址</p>
</li>
<li><p>CRC (已完成)</p>
</li>
</ul>
<h3 id="分解响应思路："><a href="#分解响应思路：" class="headerlink" title="分解响应思路："></a>分解响应思路：</h3><ul>
<li>先把响应报文接收到</li>
<li>分解（拆四部分）<ul>
<li>机器地址和操作码</li>
<li>数据长度</li>
<li>数据</li>
<li>CRC</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>iot</tag>
        <tag>modbus</tag>
      </tags>
  </entry>
  <entry>
    <title>mqtt</title>
    <url>/hexo/2022/08/31/mqtt/</url>
    <content><![CDATA[<h2 id="mqtt"><a href="#mqtt" class="headerlink" title="mqtt"></a>mqtt</h2><ul>
<li>遥测传输协议，基于发布和订阅的轻量级通讯协议，构建在 tcp&#x2F;ip 协议之上</li>
<li>标准版，简化版 （MQTT-SN）。</li>
</ul>
<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ul>
<li><p>用极少代码和有限带宽，为远程设备提供实时可靠的消息服务。</p>
</li>
<li><p>开销低，带宽占用低。</p>
</li>
<li><p>基于 客户端-服务器。</p>
</li>
</ul>
<h2 id="工作模式："><a href="#工作模式：" class="headerlink" title="工作模式："></a>工作模式：</h2><ul>
<li>提供一对多消息分发模式，实现应用程序解耦</li>
<li>消息传递模式，消息不是直接发送到接收点，而是由 mqtt-server（MQTT-Broke） 分发</li>
</ul>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p><img src="/hexo/2022/08/31/mqtt/mqtt/v2-17b8d17ca2318b951ca48539f04306f7_720w.webp"></p>
<h2 id="QoS："><a href="#QoS：" class="headerlink" title="QoS："></a>QoS：</h2><ul>
<li>QoS0: 会发送消息丢失或重复，消息发布依赖于底层TCP&#x2F;IP网络。</li>
<li>QoS1: 消息至少一次传送给订阅者</li>
<li>QoS2：保证消息仅传送到目的地一次。为此，带有唯一消息 ID 的消息会存储两次，首先来自发送者，然后是接收者。QoS 级别 2 在网络中具有最高的开销，因为在发送方和接收方之间需要两个流。</li>
</ul>
<h2 id="数据包："><a href="#数据包：" class="headerlink" title="数据包："></a>数据包：</h2><ul>
<li><p><code>固定头（Fixed header）</code>，存在于所有<code>MQTT</code>数据包中，表示数据包类型及数据包的分组类标识；</p>
</li>
<li><p><code>可变头（Variable header）</code>，存在于部分<code>MQTT</code>数据包中，数据包类型决定了可变头是否存在及其具体内容；</p>
</li>
<li><p><code>消息体（Payload）</code>，存在于部分<code>MQTT</code>数据包中，表示客户端收到的具体内容；</p>
<p><img src="/hexo/2022/08/31/mqtt/mqtt/v2-861c089bea9570876bb13a031e6c3902_720w.webp"></p>
</li>
</ul>
<h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><ul>
<li><h3 id="Mosquitto"><a href="#Mosquitto" class="headerlink" title="Mosquitto"></a>Mosquitto</h3></li>
<li><h3 id="EMQ-X"><a href="#EMQ-X" class="headerlink" title="EMQ X"></a>EMQ X</h3></li>
<li><h3 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h3></li>
<li><h3 id="HiveMQ"><a href="#HiveMQ" class="headerlink" title="HiveMQ"></a>HiveMQ</h3></li>
</ul>
<h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h2><ul>
<li>mqtt-x</li>
</ul>
<h3 id="搭建："><a href="#搭建：" class="headerlink" title="搭建："></a>搭建：</h3><h4 id="建立文件夹"><a href="#建立文件夹" class="headerlink" title="建立文件夹"></a>建立文件夹</h4><ul>
<li>mkdir -p .&#x2F;mosquitto&#x2F;config</li>
<li>mkdir -p .&#x2F;mosquitto&#x2F;data</li>
<li>mkdir -p .&#x2F;mosquitto&#x2F;log</li>
</ul>
<h4 id="目录设置权限"><a href="#目录设置权限" class="headerlink" title="目录设置权限"></a>目录设置权限</h4><ul>
<li>chmod -R 755 .&#x2F;mosquitto</li>
<li>chmod -R 777 &#x2F;mosquitto&#x2F;log #日志目录要最大权限</li>
</ul>
<h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><ul>
<li><p>vi &#x2F;mosquitto&#x2F;config&#x2F;mosquitto.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">persistence true</span><br><span class="line">persistence_location /mosquitto/data</span><br><span class="line">log_dest file /mosquitto/log/mosquitto.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">监听端口默认是 9001，我的9001被占用所以我选择9002</span></span><br><span class="line">listener 9002</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#通信端口</span></span></span><br><span class="line">port 1883</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 关闭匿名模式</span></span></span><br><span class="line">allow_anonymous false</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定密码文件</span></span></span><br><span class="line">password_file /mosquitto/config/pwfile.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h4><p>docker-compose.yaml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot; </span><br><span class="line">services:</span><br><span class="line">    mqtt:</span><br><span class="line">        image: eclipse-mosquitto:2 </span><br><span class="line">        container_name: mqtt</span><br><span class="line">        privileged: true </span><br><span class="line">        ports: </span><br><span class="line">            - 1883:1883</span><br><span class="line">            - 9002:9001</span><br><span class="line">        volumes:</span><br><span class="line">            - ./mosquitto/config:/mosquitto/config</span><br><span class="line">            - ./mosquitto/data:/mosquitto/data</span><br><span class="line">            - ./mosquitto/log:/mosquitto/log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="进入容器执行"><a href="#进入容器执行" class="headerlink" title="进入容器执行"></a>进入容器执行</h4><ul>
<li><p>创建密码管理文件</p>
<p>touch &#x2F;mosquitto&#x2F;config&#x2F;pwfile.conf</p>
<p>chmod -R 755 &#x2F;mosquitto&#x2F;config&#x2F;pwfile.conf</p>
</li>
<li><p>创建用户名和密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mosquitto_passwd -b /mosquitto/config/pwfile.conf admin admin</span><br></pre></td></tr></table></figure>

<p><code>注意</code>：创建新用户之后都要重启容器重新加载配置文件，不然就会报没有认证</p>
</li>
</ul>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ul>
<li><p><img src="/hexo/2022/08/31/mqtt/mqtt/image-20230504162948660.png" alt="image-20230504162948660"></p>
</li>
<li><p>界面信息说明</p>
</li>
<li><p><img src="/hexo/2022/08/31/mqtt/mqtt/image-20230504163115396.png" alt="image-20230504163115396"></p>
</li>
</ul>
<h3 id="日志："><a href="#日志：" class="headerlink" title="日志："></a>日志：</h3><ul>
<li><img src="/hexo/2022/08/31/mqtt/mqtt/image-20230504163431942.png" alt="image-20230504163431942"></li>
</ul>
<h2 id="开源框架"><a href="#开源框架" class="headerlink" title="开源框架"></a>开源框架</h2><h3 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h3><ul>
<li><p>博客：<a href="https://blog.csdn.net/f4233441/article/details/121829743">https://blog.csdn.net/f4233441/article/details/121829743</a></p>
</li>
<li><p>pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.integration<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-integration-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-integration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.integration<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-integration-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.integration<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-integration-mqtt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h3><ul>
<li><p>Apollo</p>
<p>太旧不推荐，</p>
</li>
<li><p>Paho </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.paho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.eclipse.paho.client.mqttv3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>场景：就和一般情况下我们是通过mybatis组件模拟发送sql请求,mqtt消息模拟,我们可以通过Eclipse Paho Java Client组件。</p>
</li>
<li><p>对了一遍节前布置的代码，虽然效果满足，但是抽象和单一原则，多线程，异步方面基本没考虑，程哥指正有一些代码习惯的问题，编码优化上给了很多宝贵的建议。</p>
</li>
<li><p>自己在代码编码方面。对于方法的定位有点混淆。方法基本没法复用。</p>
</li>
<li><p>这两天重构一版出来</p>
</li>
</ul>
<h2 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h2><h1 id="日报"><a href="#日报" class="headerlink" title="日报"></a>日报</h1><h3 id="引入pom"><a href="#引入pom" class="headerlink" title="引入pom"></a>引入pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.paho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.eclipse.paho.client.mqttv3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>发布端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mqtt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttClient;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttConnectOptions;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttException;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttMessage;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *发布端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublishSample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="string">&quot;test2&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello mqtt&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">qos</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">broker</span> <span class="operator">=</span> <span class="string">&quot;tcp://47.108.94.36:1883&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> <span class="string">&quot;pubClient&quot;</span>;</span><br><span class="line">        <span class="comment">// 内存存储</span></span><br><span class="line">        <span class="type">MemoryPersistence</span> <span class="variable">persistence</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemoryPersistence</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建客户端</span></span><br><span class="line">            <span class="type">MqttClient</span> <span class="variable">sampleClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttClient</span>(broker, clientId, persistence);</span><br><span class="line">            <span class="comment">// 创建链接参数</span></span><br><span class="line">            <span class="type">MqttConnectOptions</span> <span class="variable">connOpts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttConnectOptions</span>();</span><br><span class="line">            <span class="comment">// 在重新启动和重新连接时记住状态</span></span><br><span class="line">            connOpts.setCleanSession(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 设置连接的用户名</span></span><br><span class="line">            connOpts.setUserName(userName);</span><br><span class="line">            connOpts.setPassword(password.toCharArray());</span><br><span class="line">            <span class="comment">// 建立连接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;连接到 broker: &quot;</span> + broker);</span><br><span class="line">            sampleClient.connect(connOpts);</span><br><span class="line">            System.out.println(<span class="string">&quot;连接成功.&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建消息</span></span><br><span class="line">            <span class="type">MqttMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttMessage</span>(content.getBytes());</span><br><span class="line">            <span class="comment">// 设置消息的服务质量</span></span><br><span class="line">            message.setQos(qos);</span><br><span class="line">            <span class="comment">// 发布消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;向&quot;</span> + topic + <span class="string">&quot;发送消息:&quot;</span> + message);</span><br><span class="line">            sampleClient.publish(topic, message);</span><br><span class="line">            <span class="comment">// 断开连接</span></span><br><span class="line">            sampleClient.disconnect();</span><br><span class="line">            <span class="comment">// 关闭客户端</span></span><br><span class="line">            sampleClient.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException me) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;reason &quot;</span> + me.getReasonCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;msg &quot;</span> + me.getMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;loc &quot;</span> + me.getLocalizedMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;cause &quot;</span> + me.getCause());</span><br><span class="line">            System.out.println(<span class="string">&quot;excep &quot;</span> + me);</span><br><span class="line">            me.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>订阅端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mqtt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.*;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *订阅端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubscribeSample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//EMQ X 默认端口 1883</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">broker</span> <span class="operator">=</span> <span class="string">&quot;tcp://47.108.94.36:1883&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">TOPIC</span> <span class="operator">=</span> <span class="string">&quot;test2&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">qos</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">clientid</span> <span class="operator">=</span> <span class="string">&quot;subClient&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWord</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// host为主机名，test为clientid即连接MQTT的客户端ID，一般以客户端唯一标识符表示，MemoryPersistence设置clientid的保存形式，默认为以内存保存</span></span><br><span class="line">            <span class="type">MqttClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttClient</span>(broker, clientid, <span class="keyword">new</span> <span class="title class_">MemoryPersistence</span>());</span><br><span class="line">            <span class="comment">// MQTT的连接设置</span></span><br><span class="line">            <span class="type">MqttConnectOptions</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MqttConnectOptions</span>();</span><br><span class="line">            <span class="comment">// 设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接</span></span><br><span class="line">            options.setCleanSession(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 设置连接的用户名</span></span><br><span class="line">            options.setUserName(userName);</span><br><span class="line">            <span class="comment">// 设置连接的密码</span></span><br><span class="line">            options.setPassword(passWord.toCharArray());</span><br><span class="line">            <span class="comment">// 设置超时时间 单位为秒</span></span><br><span class="line">            options.setConnectionTimeout(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">// 设置会话心跳时间 单位为秒 服务器会每隔1.5*20秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制</span></span><br><span class="line">            options.setKeepAliveInterval(<span class="number">20</span>);</span><br><span class="line">            <span class="comment">// 设置回调函数</span></span><br><span class="line">            client.setCallback(<span class="keyword">new</span> <span class="title class_">MqttCallback</span>() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectionLost</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;connectionLost&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;======监听到来自[&quot;</span> + topic + <span class="string">&quot;]的消息======&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;message content:&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(message.getPayload()));</span><br><span class="line">                    System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;deliveryComplete---------&quot;</span>+ token.isComplete());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立连接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;连接到 broker: &quot;</span> + broker);</span><br><span class="line">            client.connect(options);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;连接成功.&quot;</span>);</span><br><span class="line">            <span class="comment">//订阅消息</span></span><br><span class="line">            client.subscribe(TOPIC, qos);</span><br><span class="line">            System.out.println(<span class="string">&quot;开始监听&quot;</span> + TOPIC);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><ul>
<li>订阅端</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">连接到 broker: tcp://47.108.94.36:1883</span><br><span class="line">连接成功.</span><br><span class="line">开始监听test2</span><br><span class="line">======监听到来自[test2]的消息======</span><br><span class="line">message content:hello mqtt</span><br><span class="line">============</span><br></pre></td></tr></table></figure>

<ul>
<li>发布端</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">连接到 broker: tcp://47.108.94.36:1883</span><br><span class="line">连接成功.</span><br><span class="line">向test2发送消息:hello mqtt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>iot</category>
      </categories>
      <tags>
        <tag>iot</tag>
        <tag>mqtt</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis环境搭建</title>
    <url>/hexo/2021/10/09/mybatis/</url>
    <content><![CDATA[<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">别名				映射的类型</span><br><span class="line">_byte 				byte </span><br><span class="line">_long 				long </span><br><span class="line">_short 				short </span><br><span class="line">_int				int</span><br><span class="line">_integer 			int</span><br><span class="line">_double 			double </span><br><span class="line">_float 				float </span><br><span class="line">_boolean			boolean</span><br><span class="line">string 				String </span><br><span class="line">byte 				Byte </span><br><span class="line">long 				Long </span><br><span class="line">short 				Short </span><br><span class="line">int					Integer </span><br><span class="line">integer 			Integer </span><br><span class="line">double 				Double </span><br><span class="line">float 				Float </span><br><span class="line">boolean				Boolean </span><br><span class="line">date 				Date </span><br><span class="line">decimal 			BigDecimal</span><br><span class="line">bigdecimal			BigDecimal</span><br><span class="line">map         		Map/HashMap</span><br></pre></td></tr></table></figure>



<h1 id="mybatis-环境搭建"><a href="#mybatis-环境搭建" class="headerlink" title="mybatis 环境搭建"></a>mybatis 环境搭建</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">char</span>(<span class="number">6</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pwd` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">17</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br></pre></td></tr></table></figure>



<h2 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--可以配置多个环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 注册 mapper 部分--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--&lt;mappers&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/mappers&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="db-perperties"><a href="#db-perperties" class="headerlink" title="db.perperties"></a>db.perperties</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">driver=</span><br><span class="line">url=</span><br><span class="line">username=</span><br><span class="line">password=</span><br></pre></td></tr></table></figure>



<h2 id="获取-sqlsession"><a href="#获取-sqlsession" class="headerlink" title="获取 sqlsession"></a>获取 sqlsession</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">iS</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">// 创建 mapper 核心对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(iS);</span><br><span class="line"><span class="comment">// 获取 sqlSession</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">// 打印输出 sqlSession</span></span><br><span class="line">System.out.println(sqlSession);</span><br></pre></td></tr></table></figure>



<h2 id="生产实体类"><a href="#生产实体类" class="headerlink" title="生产实体类"></a>生产实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// set 和 get ，tostring 跳过</span></span><br></pre></td></tr></table></figure>



<h2 id="开发-Dao-接口"><a href="#开发-Dao-接口" class="headerlink" title="开发 Dao 接口"></a>开发 Dao 接口</h2><ul>
<li>接口中不能定义方法重载</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">save</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注册-mapper-文件"><a href="#注册-mapper-文件" class="headerlink" title="注册 mapper 文件"></a>注册 mapper 文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/wflin/mapper/**.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="开发-mapper-配置文件"><a href="#开发-mapper-配置文件" class="headerlink" title="开发 mapper 配置文件"></a>开发 mapper 配置文件</h2><ul>
<li>在 mybatis 文件中一个 dao 接口 对应一个 Mapper 配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace 属性，命名空间，用来书写当前 mapper 文件是对哪个 DAO 接口的实现</span></span><br><span class="line"><span class="comment">    全限定名，带包名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wflin.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id：方法名</span></span><br><span class="line"><span class="comment">        parameterType 参数类型,包，类</span></span><br><span class="line"><span class="comment">        注意：1.在 insert 内部写 sql</span></span><br><span class="line"><span class="comment">             2. #&#123;对象属性名&#125;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.wflin.entity.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user values (#&#123;id&#125;,#&#123;name&#125;,#&#123;sex&#125;,#&#123;pwd&#125;,#&#123;email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mybatis-setting</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- settings是 MyBatis 中全局的调整设置，它们会改变 MyBatis 的运行时行为,应谨慎设置 --&gt;</span>  </span><br><span class="line">	    <span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </span><br><span class="line">	        <span class="comment">&lt;!-- 该配置影响的所有映射器中配置的缓存的全局开关。默认值true --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">	      <span class="comment">&lt;!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认值false  --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">	        <span class="comment">&lt;!-- 是否允许单一语句返回多结果集（需要兼容驱动）。 默认值true --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">	      <span class="comment">&lt;!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认值true --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">	      <span class="comment">&lt;!-- 允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。 默认值false  --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">	     <span class="comment">&lt;!--  指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。 --&gt;</span>   </span><br><span class="line">	     <span class="comment">&lt;!-- 默认值PARTIAL --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span>  </span><br><span class="line">	        </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span>  </span><br><span class="line">	     <span class="comment">&lt;!--  配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。默认SIMPLE  --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span>  </span><br><span class="line">	      <span class="comment">&lt;!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span>  </span><br><span class="line">	        </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span>  </span><br><span class="line">	      <span class="comment">&lt;!-- 允许在嵌套语句中使用分页（RowBounds）默认值False --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">	      <span class="comment">&lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。  默认false --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span>  </span><br><span class="line">	      <span class="comment">&lt;!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。  </span></span><br><span class="line"><span class="comment">	             默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。  </span></span><br><span class="line"><span class="comment">	            若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。  --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span>  </span><br><span class="line">	      <span class="comment">&lt;!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。  --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span>  </span><br><span class="line">	    <span class="comment">&lt;!--   指定哪个对象的方法触发一次延迟加载。  --&gt;</span>  </span><br><span class="line">	      <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span>  </span><br><span class="line">	    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/hexo/2019/08/26/mysql/</url>
    <content><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul>
<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>
<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>
<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>
<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>
</ul>
<h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p>
<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li>
</ul>
<h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p>
<p>创建表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">	字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">	字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">	字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">	...</span><br><span class="line">	字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure>
<p><strong>最后一个字段后面没有逗号</strong></p>
<p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p>
<p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p>
<p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p>
<p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p>
<p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p>
<h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p>
<p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p>
<h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>字符串和日期类型数据应该包含在引号中</li>
<li>插入的数据大小应该在字段的规定范围内</li>
</ul>
<h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p>
<p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p>
<h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	字段列表</span><br><span class="line">FROM</span><br><span class="line">	表名字段</span><br><span class="line">WHERE</span><br><span class="line">	条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">	分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">	分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">	排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">	分页参数</span><br></pre></td></tr></table></figure>

<h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p>
<p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p>
<p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p>
<p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>&#x2F; 之后的_不作为通配符</p>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>
<p>条件：</p>
<table>
<thead>
<tr>
<th>比较运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小于等于</td>
</tr>
<tr>
<td>&#x3D;</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt; 或 !&#x3D;</td>
<td>不等于</td>
</tr>
<tr>
<td>BETWEEN … AND …</td>
<td>在某个范围内（含最小、最大值）</td>
</tr>
<tr>
<td>IN(…)</td>
<td>在in之后的列表中的值，多选一</td>
</tr>
<tr>
<td>LIKE 占位符</td>
<td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td>
</tr>
<tr>
<td>IS NULL</td>
<td>是NULL</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>AND 或 &amp;&amp;</td>
<td>并且（多个条件同时成立）</td>
</tr>
<tr>
<td>OR 或 &#124;&#124;</td>
<td>或者（多个条件任意一个成立）</td>
</tr>
<tr>
<td>NOT 或 !</td>
<td>非，不是</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &#x27;&#x27;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &#x27;女&#x27;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &#x27;__&#x27;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &#x27;%X&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>count</td>
<td>统计数量</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>sum</td>
<td>求和</td>
</tr>
</tbody></table>
<p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p>
<h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p>
<p>where 和 having 的区别：</p>
<ul>
<li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li>
<li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>执行顺序：where &gt; 聚合函数 &gt; having</li>
<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li>
</ul>
<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p>
<p>排序方式：</p>
<ul>
<li>ASC: 升序（默认）</li>
<li>DESC: 降序</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>
<h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>起始索引从0开始，起始索引 &#x3D; （查询页码 - 1） * 每页显示记录数</li>
<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li>
<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li>
</ul>
<h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p>
<h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure>

<p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p>
<p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p>
<p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">create user &#x27;test&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &#x27;test&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;1234&#x27;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &#x27;test&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>主机名可以使用 % 通配</li>
</ul>
<h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ALL, ALL PRIVILEGES</td>
<td>所有权限</td>
</tr>
<tr>
<td>SELECT</td>
<td>查询数据</td>
</tr>
<tr>
<td>INSERT</td>
<td>插入数据</td>
</tr>
<tr>
<td>UPDATE</td>
<td>修改数据</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除数据</td>
</tr>
<tr>
<td>ALTER</td>
<td>修改表</td>
</tr>
<tr>
<td>DROP</td>
<td>删除数据库&#x2F;表&#x2F;视图</td>
</tr>
<tr>
<td>CREATE</td>
<td>创建数据库&#x2F;表</td>
</tr>
</tbody></table>
<p>更多权限请看<a href="#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" title="权限一览表">权限一览表</a></p>
<p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p>
<h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>多个权限用逗号分隔</li>
<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>字符串函数</li>
<li>数值函数</li>
<li>日期函数</li>
<li>流程函数</li>
</ul>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CONCAT(s1, s2, …, sn)</td>
<td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td>
</tr>
<tr>
<td>LOWER(str)</td>
<td>将字符串全部转为小写</td>
</tr>
<tr>
<td>UPPER(str)</td>
<td>将字符串全部转为大写</td>
</tr>
<tr>
<td>LPAD(str, n, pad)</td>
<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>RPAD(str, n, pad)</td>
<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>TRIM(str)</td>
<td>去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td>SUBSTRING(str, start, len)</td>
<td>返回从字符串str从start位置起的len个长度的字符串</td>
</tr>
</tbody></table>
<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&#x27;Hello&#x27;, &#x27;World&#x27;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&#x27;Hello&#x27;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&#x27;Hello&#x27;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&#x27;01&#x27;, 5, &#x27;-&#x27;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&#x27; Hello World &#x27;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&#x27;Hello World&#x27;, 1, 5);</span><br></pre></td></tr></table></figure>

<h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CEIL(x)</td>
<td>向上取整</td>
</tr>
<tr>
<td>FLOOR(x)</td>
<td>向下取整</td>
</tr>
<tr>
<td>MOD(x, y)</td>
<td>返回x&#x2F;y的模</td>
</tr>
<tr>
<td>RAND()</td>
<td>返回0~1内的随机数</td>
</tr>
<tr>
<td>ROUND(x, y)</td>
<td>求参数x的四舍五入值，保留y位小数</td>
</tr>
</tbody></table>
<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CURDATE()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>CURTIME()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>NOW()</td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td>YEAR(date)</td>
<td>获取指定date的年份</td>
</tr>
<tr>
<td>MONTH(date)</td>
<td>获取指定date的月份</td>
</tr>
<tr>
<td>DAY(date)</td>
<td>获取指定date的日期</td>
</tr>
<tr>
<td>DATE_ADD(date, INTERVAL expr type)</td>
<td>返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值</td>
</tr>
<tr>
<td>DATEDIFF(date1, date2)</td>
<td>返回起始时间date1和结束时间date2之间的天数</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure>

<h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>IF(value, t, f)</td>
<td>如果value为true，则返回t，否则返回f</td>
</tr>
<tr>
<td>IFNULL(value1, value2)</td>
<td>如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr>
<td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>
<td>如果val1为true，返回res1，… 否则返回default默认值</td>
</tr>
<tr>
<td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>
<td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	name,</span><br><span class="line">	(case when age &gt; 30 then &#x27;中年&#x27; else &#x27;青年&#x27; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">	name,</span><br><span class="line">	(case workaddress when &#x27;北京市&#x27; then &#x27;一线城市&#x27; when &#x27;上海市&#x27; then &#x27;一线城市&#x27; else &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure>

<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p>
<table>
<thead>
<tr>
<th>约束</th>
<th>描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>非空约束</td>
<td>限制该字段的数据不能为null</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>唯一约束</td>
<td>保证该字段的所有数据都是唯一、不重复的</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>主键约束</td>
<td>主键是一行数据的唯一标识，要求非空且唯一</td>
<td>PRIMARY KEY</td>
</tr>
<tr>
<td>默认约束</td>
<td>保存数据时，如果未指定该字段的值，则采用默认值</td>
<td>DEFAULT</td>
</tr>
<tr>
<td>检查约束（8.0.1版本后）</td>
<td>保证字段值满足某一个条件</td>
<td>CHECK</td>
</tr>
<tr>
<td>外键约束</td>
<td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td>
<td>FOREIGN KEY</td>
</tr>
</tbody></table>
<p>约束是作用于表中字段上的，可以再创建表&#x2F;修改表的时候添加约束。</p>
<h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table>
<thead>
<tr>
<th>约束条件</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>主键</td>
<td>PRIMARY KEY</td>
</tr>
<tr>
<td>自动增长</td>
<td>AUTO_INCREMENT</td>
</tr>
<tr>
<td>不为空</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>唯一</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>逻辑条件</td>
<td>CHECK</td>
</tr>
<tr>
<td>默认值</td>
<td>DEFAULT</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">	name varchar(10) not null unique,</span><br><span class="line">	age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">	status char(1) default &#x27;1&#x27;,</span><br><span class="line">	gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">	字段名 字段类型,</span><br><span class="line">	...</span><br><span class="line">	[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure>

<p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p>
<h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h4><table>
<thead>
<tr>
<th>行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>NO ACTION</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与RESTRICT一致）</td>
</tr>
<tr>
<td>RESTRICT</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与NO ACTION一致）</td>
</tr>
<tr>
<td>CASCADE</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录</td>
</tr>
<tr>
<td>SET NULL</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td>
</tr>
<tr>
<td>SET DEFAULT</td>
<td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td>
</tr>
</tbody></table>
<p>更改删除&#x2F;更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul>
<li>一对多（多对一）</li>
<li>多对多</li>
<li>一对一</li>
</ul>
<h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p>
<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>
<h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p>
<blockquote>
<p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p>
</blockquote>
<p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p>
<h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p>
<p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p>
<p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p>
<p>显式性能比隐式高</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>

<h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p>
<p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>

<p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p>
<h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p>
<p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p>
<p>自连接查询，可以是内连接查询，也可以是外连接查询</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字</span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure>

<h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure>

<h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>UNION ALL 会有重复结果，UNION 不会</li>
<li>联合查询比使用or效率高，不会使索引失效</li>
</ul>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT &#x2F; UPDATE &#x2F; DELETE &#x2F; SELECT 的任何一个</strong></p>
<p>根据子查询结果可以分为：</p>
<ul>
<li>标量子查询（子查询结果为单个值）</li>
<li>列子查询（子查询结果为一列）</li>
<li>行子查询（子查询结果为一行）</li>
<li>表子查询（子查询结果为多行多列）</li>
</ul>
<p>根据子查询位置可分为：</p>
<ul>
<li>WHERE 之后</li>
<li>FROM 之后</li>
<li>SELECT 之后</li>
</ul>
<h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = &#x27;销售部&#x27;;</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）</span><br><span class="line">select * from employee where dept = (select id from dept where name = &#x27;销售部&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询xxx入职之后的员工信息</span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p>
<p>常用操作符：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IN</td>
<td>在指定的集合范围内，多选一</td>
</tr>
<tr>
<td>NOT IN</td>
<td>不在指定的集合范围内</td>
</tr>
<tr>
<td>ANY</td>
<td>子查询返回列表中，有任意一个满足即可</td>
</tr>
<tr>
<td>SOME</td>
<td>与ANY等同，使用SOME的地方都可以使用ANY</td>
</tr>
<tr>
<td>ALL</td>
<td>子查询返回列表的所有值都必须满足</td>
</tr>
</tbody></table>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = &#x27;销售部&#x27; or name = &#x27;市场部&#x27;);</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#x27;财务部&#x27;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#x27;研发部&#x27;));</span><br></pre></td></tr></table></figure>

<h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：&#x3D;, &lt;, &gt;, IN, NOT IN</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);</span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = &#x27;xxx&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = &#x27;xxx1&#x27; or name = &#x27;xxx2&#x27;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &#x27;2006-01-01&#x27;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>
<p>基本操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>

<p>操作方式二：</p>
<p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p>
<p>操作实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money - 1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money + 1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>

<h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul>
<li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li>
<li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li>
<li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>
<li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li>
</ul>
<h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table>
<thead>
<tr>
<th>问题</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读到另一个事务还没提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td>
</tr>
</tbody></table>
<blockquote>
<p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p>
</blockquote>
<p>并发事务隔离级别：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Read committed</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Repeatable Read(默认)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>Serializable</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<ul>
<li>√表示在当前隔离级别下该问题会出现</li>
<li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li>
</ul>
<p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>
<h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p>
<p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p>
<p>存储引擎就是存储数据、建立索引、更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p>
<p>相关操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">	...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure>

<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p>
<p>特点：</p>
<ul>
<li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li>
<li><strong>行级锁</strong>，提高并发访问性能</li>
<li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li>
</ul>
<p>文件：</p>
<ul>
<li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li>
</ul>
<p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p>
<p>知识点：</p>
<p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p>
<p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p>
<p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p>
<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p>
<p>特点：</p>
<ul>
<li>不支持事务，不支持外键</li>
<li>支持表锁，不支持行锁</li>
<li>访问速度快</li>
</ul>
<p>文件：</p>
<ul>
<li>xxx.sdi: 存储表结构信息</li>
<li>xxx.MYD: 存储数据</li>
<li>xxx.MYI: 存储索引</li>
</ul>
<h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p>
<p>特点：</p>
<ul>
<li>存放在内存中，速度快</li>
<li>hash索引（默认）</li>
</ul>
<p>文件：</p>
<ul>
<li>xxx.sdi: 存储表结构信息</li>
</ul>
<h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table>
<thead>
<tr>
<th>特点</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody><tr>
<td>存储限制</td>
<td>64TB</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>事务安全</td>
<td>支持</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>锁机制</td>
<td>行锁</td>
<td>表锁</td>
<td>表锁</td>
</tr>
<tr>
<td>B+tree索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>Hash索引</td>
<td>-</td>
<td>-</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持（5.6版本之后）</td>
<td>支持</td>
<td>-</td>
</tr>
<tr>
<td>空间使用</td>
<td>高</td>
<td>低</td>
<td>N&#x2F;A</td>
</tr>
<tr>
<td>内存使用</td>
<td>高</td>
<td>低</td>
<td>中等</td>
</tr>
<tr>
<td>批量插入速度</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>支持外键</td>
<td>支持</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p>
<ul>
<li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li>
<li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li>
<li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li>
</ul>
<p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p>
<h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（&#x2F;etc&#x2F;my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log&#x3D;1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time&#x3D;2<br>更改后记得重启MySQL服务，日志文件位置：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;localhost-slow.log</p>
<p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p>
<h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session&#x2F;global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p>
<h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain &#x2F; desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p>
<p>EXPLAIN 各字段含义：</p>
<ul>
<li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li>
<li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT&#x2F;WHERE之后包含了子查询）等</li>
<li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li>
<li>possible_key：可能应用在这张表上的索引，一个或多个</li>
<li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li>
<li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li>
<li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li>
<li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p>
<p>优缺点：</p>
<p>优点：</p>
<ul>
<li>提高数据检索效率，降低数据库的IO成本</li>
<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>
</ul>
<p>缺点：</p>
<ul>
<li>索引列也是要占用空间的</li>
<li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li>
</ul>
<h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table>
<thead>
<tr>
<th>索引结构</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>B+Tree</td>
<td>最常见的索引类型，大部分引擎都支持B+树索引</td>
</tr>
<tr>
<td>Hash</td>
<td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td>
</tr>
<tr>
<td>R-Tree(空间索引)</td>
<td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>
</tr>
<tr>
<td>Full-Text(全文索引)</td>
<td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>索引</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody><tr>
<td>B+Tree索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>Hash索引</td>
<td>不支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>R-Tree索引</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>Full-text</td>
<td>5.6版本后支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p>
<p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p>
<p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p>
<p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p>
<blockquote>
<p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p>
</blockquote>
<h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p>
<p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p>
<blockquote>
<p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p>
</blockquote>
<p>与 B-Tree 的区别：</p>
<ul>
<li>所有的数据都会出现在叶子节点</li>
<li>叶子节点形成一个单向链表</li>
</ul>
<p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p>
<p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p>
<h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p>
<p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p>
<p>特点：</p>
<ul>
<li>Hash索引只能用于对等比较（&#x3D;、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li>
<li>无法利用索引完成排序操作</li>
<li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li>
</ul>
<p>存储引擎支持：</p>
<ul>
<li>Memory</li>
<li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li>
</ul>
<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol>
<li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li>
</ol>
<ul>
<li>相对于二叉树，层级更少，搜索效率高</li>
<li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li>
<li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li>
</ul>
<h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>主键索引</td>
<td>针对于表中主键创建的索引</td>
<td>默认自动创建，只能有一个</td>
<td>PRIMARY</td>
</tr>
<tr>
<td>唯一索引</td>
<td>避免同一个表中某数据列中的值重复</td>
<td>可以有多个</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>常规索引</td>
<td>快速定位特定数据</td>
<td>可以有多个</td>
<td></td>
</tr>
<tr>
<td>全文索引</td>
<td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td>
<td>可以有多个</td>
<td>FULLTEXT</td>
</tr>
</tbody></table>
<p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>聚集索引(Clustered Index)</td>
<td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td>
<td>必须有，而且只有一个</td>
</tr>
<tr>
<td>二级索引(Secondary Index)</td>
<td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>
<td>可以存在多个</td>
</tr>
</tbody></table>
<p>演示图：</p>
<p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p>
<p>聚集索引选取规则：</p>
<ul>
<li>如果存在主键，主键索引就是聚集索引</li>
<li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li>
<li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li>
</ul>
<h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = &#x27;Arm&#x27;;</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure>

<p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p>
<p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p>
<p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p>
<p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p>
<p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p>
<p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p>
<p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p>
<p>案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure>

<h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p>
<p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;&#x3D;或者&lt;&#x3D;来规避索引失效问题。</p>
<h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol>
<li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li>
<li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li>
<li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li>
<li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li>
<li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li>
</ol>
<h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p>
<p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p>
<p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p>
<h4 id="覆盖索引-回表查询"><a href="#覆盖索引-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p>
<p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p>
<p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p>
<p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p>
<p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p>
<p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p>
<h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p>
<p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure>

<p>show index 里面的sub_part可以看到接取的长度</p>
<h4 id="单列索引-联合索引"><a href="#单列索引-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p>
<p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p>
<h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul>
<li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li>
</ul>
<h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol>
<li>针对于数据量较大，且查询比较频繁的表建立索引</li>
<li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li>
<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li>
<li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li>
<li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li>
<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li>
<li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li>
</ol>
<h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p>
<ol>
<li>采用批量插入（一次插入的数据不建议超过1000条）</li>
<li>手动提交事务</li>
<li>主键顺序插入</li>
</ol>
<p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table>
<thead>
<tr>
<th>类型名称</th>
<th>取值范围</th>
<th>大小</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>-128〜127</td>
<td>1个字节</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>-32768〜32767</td>
<td>2个宇节</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>-8388608〜8388607</td>
<td>3个字节</td>
</tr>
<tr>
<td>INT (INTEGHR)</td>
<td>-2147483648〜2147483647</td>
<td>4个字节</td>
</tr>
<tr>
<td>BIGINT</td>
<td>-9223372036854775808〜9223372036854775807</td>
<td>8个字节</td>
</tr>
</tbody></table>
<p>无符号在数据类型后加 unsigned 关键字。</p>
<h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>FLOAT</td>
<td>单精度浮点数</td>
<td>4 个字节</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>双精度浮点数</td>
<td>8 个字节</td>
</tr>
<tr>
<td>DECIMAL (M, D)，DEC</td>
<td>压缩的“严格”定点数</td>
<td>M+2 个字节</td>
</tr>
</tbody></table>
<h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><table>
<thead>
<tr>
<th>类型名称</th>
<th>日期格式</th>
<th>日期范围</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR</td>
<td>YYYY</td>
<td>1901 ~ 2155</td>
<td>1 个字节</td>
</tr>
<tr>
<td>TIME</td>
<td>HH:MM:SS</td>
<td>-838:59:59 ~ 838:59:59</td>
<td>3 个字节</td>
</tr>
<tr>
<td>DATE</td>
<td>YYYY-MM-DD</td>
<td>1000-01-01 ~ 9999-12-3</td>
<td>3 个字节</td>
</tr>
<tr>
<td>DATETIME</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>
<td>8 个字节</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>
<td>4 个字节</td>
</tr>
</tbody></table>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(M)</td>
<td>固定长度非二进制字符串</td>
<td>M 字节，1&lt;&#x3D;M&lt;&#x3D;255</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>变长非二进制字符串</td>
<td>L+1字节，在此，L&lt; &#x3D; M和 1&lt;&#x3D;M&lt;&#x3D;255</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>非常小的非二进制字符串</td>
<td>L+1字节，在此，L&lt;2^8</td>
</tr>
<tr>
<td>TEXT</td>
<td>小的非二进制字符串</td>
<td>L+2字节，在此，L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>中等大小的非二进制字符串</td>
<td>L+3字节，在此，L&lt;2^24</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>大的非二进制字符串</td>
<td>L+4字节，在此，L&lt;2^32</td>
</tr>
<tr>
<td>ENUM</td>
<td>枚举类型，只能有一个枚举字符串值</td>
<td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td>
</tr>
<tr>
<td>SET</td>
<td>一个设置，字符串对象可以有零个或 多个SET成员</td>
<td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td>
</tr>
</tbody></table>
<h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>BIT(M)</td>
<td>位字段类型</td>
<td>大约 (M+7)&#x2F;8 字节</td>
</tr>
<tr>
<td>BINARY(M)</td>
<td>固定长度二进制字符串</td>
<td>M 字节</td>
</tr>
<tr>
<td>VARBINARY (M)</td>
<td>可变长度二进制字符串</td>
<td>M+1 字节</td>
</tr>
<tr>
<td>TINYBLOB (M)</td>
<td>非常小的BLOB</td>
<td>L+1 字节，在此，L&lt;2^8</td>
</tr>
<tr>
<td>BLOB (M)</td>
<td>小 BLOB</td>
<td>L+2 字节，在此，L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMBLOB (M)</td>
<td>中等大小的BLOB</td>
<td>L+3 字节，在此，L&lt;2^24</td>
</tr>
<tr>
<td>LONGBLOB (M)</td>
<td>非常大的BLOB</td>
<td>L+4 字节，在此，L&lt;2^32</td>
</tr>
</tbody></table>
<h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote>
<p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档">官方文档</a></p>
</blockquote>
<p>GRANT 和 REVOKE 允许的静态权限</p>
<table>
<thead>
<tr>
<th align="left">Privilege</th>
<th align="left">Grant Table Column</th>
<th align="left">Context</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all"><code>ALL [PRIVILEGES]</code></a></td>
<td align="left">Synonym for “all privileges”</td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter"><code>ALTER</code></a></td>
<td align="left"><code>Alter_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine"><code>ALTER ROUTINE</code></a></td>
<td align="left"><code>Alter_routine_priv</code></td>
<td align="left">Stored routines</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create"><code>CREATE</code></a></td>
<td align="left"><code>Create_priv</code></td>
<td align="left">Databases, tables, or indexes</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role"><code>CREATE ROLE</code></a></td>
<td align="left"><code>Create_role_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine"><code>CREATE ROUTINE</code></a></td>
<td align="left"><code>Create_routine_priv</code></td>
<td align="left">Stored routines</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace"><code>CREATE TABLESPACE</code></a></td>
<td align="left"><code>Create_tablespace_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables"><code>CREATE TEMPORARY TABLES</code></a></td>
<td align="left"><code>Create_tmp_table_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user"><code>CREATE USER</code></a></td>
<td align="left"><code>Create_user_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view"><code>CREATE VIEW</code></a></td>
<td align="left"><code>Create_view_priv</code></td>
<td align="left">Views</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete"><code>DELETE</code></a></td>
<td align="left"><code>Delete_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop"><code>DROP</code></a></td>
<td align="left"><code>Drop_priv</code></td>
<td align="left">Databases, tables, or views</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role"><code>DROP ROLE</code></a></td>
<td align="left"><code>Drop_role_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event"><code>EVENT</code></a></td>
<td align="left"><code>Event_priv</code></td>
<td align="left">Databases</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute"><code>EXECUTE</code></a></td>
<td align="left"><code>Execute_priv</code></td>
<td align="left">Stored routines</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file"><code>FILE</code></a></td>
<td align="left"><code>File_priv</code></td>
<td align="left">File access on server host</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option"><code>GRANT OPTION</code></a></td>
<td align="left"><code>Grant_priv</code></td>
<td align="left">Databases, tables, or stored routines</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index"><code>INDEX</code></a></td>
<td align="left"><code>Index_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert"><code>INSERT</code></a></td>
<td align="left"><code>Insert_priv</code></td>
<td align="left">Tables or columns</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables"><code>LOCK TABLES</code></a></td>
<td align="left"><code>Lock_tables_priv</code></td>
<td align="left">Databases</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process"><code>PROCESS</code></a></td>
<td align="left"><code>Process_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy"><code>PROXY</code></a></td>
<td align="left">See <code>proxies_priv</code> table</td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references"><code>REFERENCES</code></a></td>
<td align="left"><code>References_priv</code></td>
<td align="left">Databases or tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload"><code>RELOAD</code></a></td>
<td align="left"><code>Reload_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client"><code>REPLICATION CLIENT</code></a></td>
<td align="left"><code>Repl_client_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave"><code>REPLICATION SLAVE</code></a></td>
<td align="left"><code>Repl_slave_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select"><code>SELECT</code></a></td>
<td align="left"><code>Select_priv</code></td>
<td align="left">Tables or columns</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases"><code>SHOW DATABASES</code></a></td>
<td align="left"><code>Show_db_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view"><code>SHOW VIEW</code></a></td>
<td align="left"><code>Show_view_priv</code></td>
<td align="left">Views</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown"><code>SHUTDOWN</code></a></td>
<td align="left"><code>Shutdown_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super"><code>SUPER</code></a></td>
<td align="left"><code>Super_priv</code></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger"><code>TRIGGER</code></a></td>
<td align="left"><code>Trigger_priv</code></td>
<td align="left">Tables</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update"><code>UPDATE</code></a></td>
<td align="left"><code>Update_priv</code></td>
<td align="left">Tables or columns</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage"><code>USAGE</code></a></td>
<td align="left">Synonym for “no privileges”</td>
<td align="left">Server administration</td>
</tr>
</tbody></table>
<p>GRANT 和 REVOKE 允许的动态权限</p>
<table>
<thead>
<tr>
<th align="left">Privilege</th>
<th align="left">Context</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin"><code>APPLICATION_PASSWORD_ADMIN</code></a></td>
<td align="left">Dual password administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt"><code>AUDIT_ABORT_EXEMPT</code></a></td>
<td align="left">Allow queries blocked by audit log filter</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin"><code>AUDIT_ADMIN</code></a></td>
<td align="left">Audit log administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td>
<td align="left">Authentication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin"><code>BACKUP_ADMIN</code></a></td>
<td align="left">Backup administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin"><code>BINLOG_ADMIN</code></a></td>
<td align="left">Backup and Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td>
<td align="left">Backup and Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin"><code>CLONE_ADMIN</code></a></td>
<td align="left">Clone administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin"><code>CONNECTION_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin"><code>ENCRYPTION_KEY_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin"><code>FIREWALL_ADMIN</code></a></td>
<td align="left">Firewall administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt"><code>FIREWALL_EXEMPT</code></a></td>
<td align="left">Firewall administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user"><code>FIREWALL_USER</code></a></td>
<td align="left">Firewall administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs"><code>FLUSH_OPTIMIZER_COSTS</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status"><code>FLUSH_STATUS</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables"><code>FLUSH_TABLES</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources"><code>FLUSH_USER_RESOURCES</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin"><code>GROUP_REPLICATION_ADMIN</code></a></td>
<td align="left">Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream"><code>GROUP_REPLICATION_STREAM</code></a></td>
<td align="left">Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td>
<td align="left">Redo log archiving administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user"><code>NDB_STORED_USER</code></a></td>
<td align="left">NDB Cluster</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin"><code>PASSWORDLESS_USER_ADMIN</code></a></td>
<td align="left">Authentication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier"><code>REPLICATION_APPLIER</code></a></td>
<td align="left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin"><code>REPLICATION_SLAVE_ADMIN</code></a></td>
<td align="left">Replication administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin"><code>RESOURCE_GROUP_ADMIN</code></a></td>
<td align="left">Resource group administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user"><code>RESOURCE_GROUP_USER</code></a></td>
<td align="left">Resource group administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin"><code>ROLE_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin"><code>SESSION_VARIABLES_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id"><code>SET_USER_ID</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine"><code>SHOW_ROUTINE</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user"><code>SYSTEM_USER</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin"><code>SYSTEM_VARIABLES_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin"><code>TABLE_ENCRYPTION_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin"><code>VERSION_TOKEN_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
<tr>
<td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin"><code>XA_RECOVER_ADMIN</code></a></td>
<td align="left">Server administration</td>
</tr>
</tbody></table>
<h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul>
<li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/">http://dev.mysql.com/downloads/workbench/</a></li>
<li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql">https://www.navicat.com/en/download/navicat-for-mysql</a></li>
<li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/">http://www.sequelpro.com/</a></li>
<li>HeidiSQL(免费): <a href="http://www.heidisql.com/">http://www.heidisql.com/</a></li>
<li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/">https://www.phpmyadmin.net/</a></li>
<li>SQLyog: <a href="https://sqlyog.en.softonic.com/">https://sqlyog.en.softonic.com/</a></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol>
<li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li>
<li>查看Mysql数据库占用空间：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT table_schema &quot;Database Name&quot;</span><br><span class="line">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Ngnix</title>
    <url>/hexo/2019/08/26/nginx/</url>
    <content><![CDATA[<h2 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user  nobody; <span class="comment">#以啥子用户运行</span></span></span><br><span class="line">worker_processes  1; #开启一个worker进程（和机器配置有关，动态调整）</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid; <span class="comment">#nginx pid</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; #一个 worker 的动态连接数量</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types; #支持接收和响应的类型</span><br><span class="line">    default_type  application/octet-stream; #默认的类型 </span><br><span class="line">    #access_log  logs/access.log  main; #连接日志</span><br><span class="line"> </span><br><span class="line">    sendfile        on; #开启高效网络传输，0拷贝</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"> </span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65; #tcp连接的过期时间</span><br><span class="line"> </span><br><span class="line">    #gzip  on;</span><br><span class="line"> </span><br><span class="line">    # 定义一个虚拟主机</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80; #监听端口</span><br><span class="line">        server_name  localhost; #主机名（或者解析的域名）</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; #文件根目录</span><br><span class="line">            index  index.html index.htm; #默认页名称</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        error_page   500 502 503 504  /50x.html; #报错码对应页</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><ul>
<li>原本一台服务器只能对应一个站点，通过虚拟主机技术可以虚拟化成多个站点同时对外提供服务</li>
</ul>
<h3 id="servername匹配规则"><a href="#servername匹配规则" class="headerlink" title="servername匹配规则"></a>servername匹配规则</h3><ul>
<li><p>需要注意的是servername匹配分先后顺序，写在前面的匹配上就不会继续往下匹配了。</p>
<ul>
<li><p>完整匹配： 我们可以在同一servername中匹配多个域名</p>
<blockquote>
<p>server_name 域名1 域名2</p>
</blockquote>
</li>
<li><p>通配符匹配</p>
<blockquote>
<p>server_name *.多级域名 （泛解析）</p>
</blockquote>
</li>
<li><p>通配符结束匹配</p>
<blockquote>
<p>server_name 域名.*;</p>
</blockquote>
</li>
<li><p>正则匹配</p>
<blockquote>
<p>server_name ~^[0-9]+.域名$;</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><h4 id="单个代理"><a href="#单个代理" class="headerlink" title="单个代理"></a>单个代理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">	proxy_pass http://192.168.96.3：8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="多个代理"><a href="#多个代理" class="headerlink" title="多个代理"></a>多个代理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen       9000;</span><br><span class="line">    listen  [::]:9000;</span><br><span class="line">    server_name  192.168.96.3;</span><br><span class="line"></span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location ~/edu/ &#123;</span><br><span class="line">        proxy_pass http://192.168.96.3:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~/vod/ &#123;</span><br><span class="line">        proxy_pass http://192.168.96.3:8081;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul>
<li>http 中加入负载均衡的规则</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">	upstream myserver&#123;</span><br><span class="line">        server 192.168.96.3:8080;</span><br><span class="line">        server 192.168.96.3:8081;</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>server 中配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">	location / &#123;</span><br><span class="line">        proxy_pass http://myserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><h4 id="轮询（默认）"><a href="#轮询（默认）" class="headerlink" title="轮询（默认）"></a>轮询（默认）</h4><blockquote>
<p>每个请求按照时间顺序逐一分配到不同后端服务器，如果后端服务器 down 掉，能自动删除</p>
</blockquote>
<h4 id="weight（权重）"><a href="#weight（权重）" class="headerlink" title="weight（权重）"></a>weight（权重）</h4><blockquote>
<p>weight 代表权重默认是 1，权重越高被分配到的客户端越多</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">        server 192.168.96.3:8080 weight=5;</span><br><span class="line">        server 192.168.96.3:8081;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明：这时候 8080 端口被分配到5个客户端之后 8081 端口才会被分配到 1 个</span></span><br><span class="line"></span><br><span class="line">upstream myserver&#123;</span><br><span class="line">        server 192.168.96.3:8080 weight=5;</span><br><span class="line">        server 192.168.96.3:8081 weight=10;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明：这时候 8081 端口被分配到 10 个客户端之后 8081 端口才会被分配到 5 个</span></span><br></pre></td></tr></table></figure>

<h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h4><blockquote>
<p>每个请求按访问ip的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">	server 192.168.96.3:8080;</span><br><span class="line">	server 192.168.96.3:8081;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h4><blockquote>
<p>按照后端服务器的响应时间来分配请求，响应时间短的优先分配</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream myserver&#123;</span><br><span class="line">    server 192.168.96.3:8080;</span><br><span class="line">    server 192.168.96.3:8081;</span><br><span class="line">    # 需要单独配置</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nginx-动静分离"><a href="#nginx-动静分离" class="headerlink" title="nginx 动静分离"></a>nginx 动静分离</h2><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080; #(有这个 proxy_pass 后面的root 和 index 就失效了)</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">css 的 location</span></span><br><span class="line">location /css &#123;</span><br><span class="line">    root /usr/local/nginx/static;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">图片 的 location</span></span><br><span class="line">location /images &#123;</span><br><span class="line">    root /usr/local/nginx/static;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">js 的 location</span></span><br><span class="line">location /js &#123;</span><br><span class="line">    root /usr/local/nginx/static;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="正则匹配（多）"><a href="#正则匹配（多）" class="headerlink" title="正则匹配（多）"></a>正则匹配（多）</h3><h4 id="匹配说明"><a href="#匹配说明" class="headerlink" title="匹配说明:"></a>匹配说明:</h4><ul>
<li><code>/ 通用匹配，任何请求都会匹配到</code></li>
<li><code>= 精准匹配，不是以指定模式开头</code></li>
<li><code>~ 正则匹配，区分大小写</code></li>
<li><code>~* 正则匹配，不区分大小写</code></li>
<li><code>^~ 非正则匹配，匹配以指定模式开头的location</code></li>
</ul>
<h4 id="使用正则"><a href="#使用正则" class="headerlink" title="使用正则"></a>使用正则</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">css 的 location</span></span><br><span class="line">location ~*/(js|img|css) &#123;</span><br><span class="line">    root /usr/local/nginx/static;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="location匹配说明"><a href="#location匹配说明" class="headerlink" title="location匹配说明"></a>location匹配说明</h2><ul>
<li><code>多个正则location直接按书写顺序匹配，成功后就不会继续往后面匹配</code></li>
<li><code>普通（非正则）location会一直往下，直到找到匹配度最高的（最大前缀匹配）</code></li>
<li><code>当普通location与正则location同时存在，如果正则匹配成功,则不会再执行普通匹配</code></li>
<li><code>所有类型location存在时，“=”匹配 &gt; “^~”匹配 &gt; 正则匹配 &gt; 普通（最大前缀匹配）</code></li>
</ul>
<h2 id="docker-运行一个-nginx"><a href="#docker-运行一个-nginx" class="headerlink" title="docker 运行一个 nginx"></a>docker 运行一个 nginx</h2><ul>
<li><blockquote>
<p>docker run -d -p80:80 –name ng nginx</p>
</blockquote>
</li>
</ul>
<p>访问 192.168.151.135:80  访问到 nginx 首页</p>
<ul>
<li>进入容器查看 nginx 文件 docker exec -it ng bash<ul>
<li>配置文件：&#x2F;etc&#x2F;niginx&#x2F;conf.d</li>
<li>日志文件：&#x2F;var&#x2F;log&#x2F;nginx</li>
<li>页面文件：&#x2F;usr&#x2F;share&#x2F;nignx&#x2F;html</li>
</ul>
</li>
<li>更改 index.html 内容<ul>
<li>nginx -s reload</li>
</ul>
</li>
<li>重新访问，发现页面已经更改</li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv</title>
    <url>/hexo/2020/08/26/opencv-config/</url>
    <content><![CDATA[<h2 id="视觉常用依赖库"><a href="#视觉常用依赖库" class="headerlink" title="视觉常用依赖库"></a>视觉常用依赖库</h2><ul>
<li><p>opencv 和 mediapipe</p>
<blockquote>
<p>安装指令 ： pip install -r requirements.txt</p>
</blockquote>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip</span><br><span class="line">absl-py==1.0.0</span><br><span class="line">attrs==21.4.0</span><br><span class="line">click==8.0.4</span><br><span class="line">cmake==3.22.4</span><br><span class="line">dataclasses==0.8</span><br><span class="line">dlib==19.18.0</span><br><span class="line">face-recognition==1.3.0</span><br><span class="line">face-recognition-models==0.3.0</span><br><span class="line">importlib-metadata==4.8.3</span><br><span class="line">mediapipe==0.8.3</span><br><span class="line">numpy==1.19.3</span><br><span class="line">opencv-python==4.5.5.64</span><br><span class="line">Pillow==8.4.0</span><br><span class="line">pkg_resources==0.0.0</span><br><span class="line">protobuf==3.19.4</span><br><span class="line">six==1.16.0</span><br><span class="line">typing_extensions==4.1.1</span><br><span class="line">zipp==3.6.0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt</title>
    <url>/hexo/2023/07/09/openwrt/</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>额。。。 建议按照这个来(因为我就按照这个编译成功了)，因为最新镜像有时候要求你的 python 必须要 3.7 以上，所以编译的环境我推荐选用 ubuntu20</p>
<ol>
<li><p>安装镜像（ubuntu20） 略</p>
</li>
<li><p>下载下面的命令下载软件</p>
<blockquote>
<p>sudo apt-get update</p>
</blockquote>
<blockquote>
<p>sudo apt-get -y install build-essential asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf</p>
</blockquote>
</li>
</ol>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><ul>
<li><p>拉取源码(openwrt 的)【最好给 git 配置个魔法，因为GitHub有时候拉不到，而且后面也会去git一些东西】</p>
</li>
<li><p>源码拉取后更改目录权限为 可读可写可执行 (sudo chmod +x  openwrt 777)</p>
</li>
<li><blockquote>
<p>.&#x2F;script&#x2F;feeds update -a </p>
</blockquote>
</li>
<li><blockquote>
<p>.&#x2F;script&#x2F;feeds install -a</p>
</blockquote>
</li>
<li><blockquote>
<p>make configmenu 【选择自己机型对应的配置】</p>
</blockquote>
</li>
<li><blockquote>
<p>make -j1 V&#x3D;s 【第一次编译建议单线程编译成功率高】</p>
</blockquote>
</li>
</ul>
<p>编译大概会持续 4-5 小时，所以只有慢慢等</p>
<h1 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h1><h2 id="usb-转-ttl-连接开发板"><a href="#usb-转-ttl-连接开发板" class="headerlink" title="usb 转 ttl 连接开发板"></a>usb 转 ttl 连接开发板</h2><ul>
<li>我的是树莓派，我用usb转串口进入的，也可以烧写进入之后连接网线和显示器的方式打开或者直接修改配置文件开启ssh ，使用 ssh 进入</li>
</ul>
<p><img src="/hexo/2023/07/09/openwrt/openwrt/image-20230731160005185.png" alt="image-20230731160005185"></p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>iot</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>python thread-pool</title>
    <url>/hexo/2020/08/26/python-thread-pool/</url>
    <content><![CDATA[<h1 id="手写池"><a href="#手写池" class="headerlink" title="手写池"></a>手写池</h1><p><a href="https://blog.csdn.net/qq_41493224/article/details/108301855">参考博客</a></p>
<h2 id="python-线程池"><a href="#python-线程池" class="headerlink" title="python 线程池"></a>python 线程池</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一个基于thread和queue的线程池，以任务为队列元素，动态创建线程，重复利用线程，</span></span><br><span class="line"><span class="string">通过close和terminate方法关闭线程池。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空对象,用于停止线程</span></span><br><span class="line">StopEvent = <span class="built_in">object</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">status, result</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据需要进行的回调函数，默认不执行。</span></span><br><span class="line"><span class="string">    :param status: action函数的执行状态</span></span><br><span class="line"><span class="string">    :param result: action函数的返回值</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">thread_name, arg</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    真实的任务定义在这个函数里</span></span><br><span class="line"><span class="string">    :param thread_name: 执行该方法的线程名</span></span><br><span class="line"><span class="string">    :param arg: 该函数需要的参数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    resp = requests.get(url=<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">    <span class="comment"># 模拟该函数执行了0.1秒</span></span><br><span class="line">    resp.encoding = resp.apparent_encoding</span><br><span class="line">    <span class="built_in">print</span>(resp.text)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># print(&quot;第%s个任务调用了线程 %s，并打印了这条信息！&quot; % (arg + 1, thread_name))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, max_num, max_task_num=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化线程池</span></span><br><span class="line"><span class="string">        :param max_num: 线程池最大线程数量</span></span><br><span class="line"><span class="string">        :param max_task_num: 任务队列长度</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果提供了最大任务数的参数，则将队列的最大元素个数设置为这个值。</span></span><br><span class="line">        <span class="keyword">if</span> max_task_num:</span><br><span class="line">            self.q = queue.Queue(max_task_num)</span><br><span class="line">        <span class="comment"># 默认队列可接受无限多个的任务</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.q = queue.Queue()</span><br><span class="line">        <span class="comment"># 设置线程池最多可实例化的线程数</span></span><br><span class="line">        self.max_num = max_num</span><br><span class="line">        <span class="comment"># 任务取消标识</span></span><br><span class="line">        self.cancel = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 任务中断标识</span></span><br><span class="line">        self.terminal = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 已实例化的线程列表</span></span><br><span class="line">        self.generate_list = []</span><br><span class="line">        <span class="comment"># 处于空闲状态的线程列表</span></span><br><span class="line">        self.free_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, func, args, callback=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        往任务队列里放入一个任务</span></span><br><span class="line"><span class="string">        :param func: 任务函数</span></span><br><span class="line"><span class="string">        :param args: 任务函数所需参数</span></span><br><span class="line"><span class="string">        :param callback: 任务执行失败或成功后执行的回调函数，回调函数有两个参数</span></span><br><span class="line"><span class="string">        1、任务函数执行状态；2、任务函数返回值（默认为None，即：不执行回调函数）</span></span><br><span class="line"><span class="string">        :return: 如果线程池已经终止，则返回True否则None</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 先判断标识，看看任务是否取消了</span></span><br><span class="line">        <span class="keyword">if</span> self.cancel:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 如果没有空闲的线程，并且已创建的线程的数量小于预定义的最大线程数，则创建新线程。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.free_list) == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(self.generate_list) &lt; self.max_num:</span><br><span class="line">            self.generate_thread()</span><br><span class="line">        <span class="comment"># 构造任务参数元组，分别是调用的函数，该函数的参数，回调函数。</span></span><br><span class="line">        w = (func, args, callback,)</span><br><span class="line">        <span class="comment"># 将任务放入队列</span></span><br><span class="line">        self.q.put(w)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_thread</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建一个线程</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 每个线程都执行call方法</span></span><br><span class="line">        t = threading.Thread(target=self.call)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        循环去获取任务函数并执行任务函数。在正常情况下，每个线程都保存生存状态，</span></span><br><span class="line"><span class="string">        直到获取线程终止的flag。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 获取当前线程的名字</span></span><br><span class="line">        current_thread = threading.currentThread().getName()</span><br><span class="line">        <span class="comment"># 将当前线程的名字加入已实例化的线程列表中</span></span><br><span class="line">        self.generate_list.append(current_thread)</span><br><span class="line">        <span class="comment"># 从任务队列中获取一个任务</span></span><br><span class="line">        event = self.q.get()</span><br><span class="line">        <span class="comment"># print(event)</span></span><br><span class="line">        <span class="comment"># 让获取的任务不是终止线程的标识对象时</span></span><br><span class="line">        <span class="keyword">while</span> event != StopEvent:</span><br><span class="line">            <span class="comment"># 解析任务中封装的三个参数</span></span><br><span class="line">            func, arguments, callback = event</span><br><span class="line">            <span class="comment"># 抓取异常，防止线程因为异常退出</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 正常执行任务函数</span></span><br><span class="line">                result = func(current_thread, *arguments)</span><br><span class="line">                success = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># 当任务执行过程中弹出异常</span></span><br><span class="line">                result = <span class="literal">None</span></span><br><span class="line">                success = <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 如果有指定的回调函数</span></span><br><span class="line">            <span class="keyword">if</span> callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 执行回调函数，并抓取异常</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    callback(success, result)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            <span class="comment"># 当某个线程正常执行完一个任务时，先执行worker_state方法</span></span><br><span class="line">            <span class="keyword">with</span> self.worker_state(self.free_list, current_thread):</span><br><span class="line">                <span class="comment"># 如果强制关闭线程的flag开启，则传入一个StopEvent元素</span></span><br><span class="line">                <span class="keyword">if</span> self.terminal:</span><br><span class="line">                    event = StopEvent</span><br><span class="line">                <span class="comment"># 否则获取一个正常的任务，并回调worker_state方法的yield语句</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 从这里开始又是一个正常的任务循环</span></span><br><span class="line">                    event = self.q.get()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 一旦发现任务是个终止线程的标识元素，将线程从已创建线程列表中删除</span></span><br><span class="line">            self.generate_list.remove(current_thread)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        执行完所有的任务后，让所有线程都停止的方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 设置flag</span></span><br><span class="line">        self.cancel = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 计算已创建线程列表中线程的个数，然后往任务队列里推送相同数量的终止线程的标识元素</span></span><br><span class="line">        full_size = <span class="built_in">len</span>(self.generate_list)</span><br><span class="line">        <span class="keyword">while</span> full_size:</span><br><span class="line">            self.q.put(StopEvent)</span><br><span class="line">            full_size -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">terminate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在任务执行过程中，终止线程，提前退出。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.terminal = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 强制性的停止线程</span></span><br><span class="line">        <span class="keyword">while</span> self.generate_list:</span><br><span class="line">            self.q.put(StopEvent)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该装饰器用于上下文管理</span></span><br><span class="line"><span class="meta">    @contextlib.contextmanager</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">worker_state</span>(<span class="params">self, state_list, worker_thread</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        用于记录空闲的线程，或从空闲列表中取出线程处理任务</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 将当前线程，添加到空闲线程列表中</span></span><br><span class="line">        state_list.append(worker_thread)</span><br><span class="line">        <span class="comment"># 捕获异常</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 在此等待</span></span><br><span class="line">            <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 将线程从空闲列表中移除</span></span><br><span class="line">            state_list.remove(worker_thread)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用方式</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个最多包含5个线程的线程池</span></span><br><span class="line">    pool = ThreadPool(<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 创建100个任务，让线程池进行处理</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        pool.put(action, (i,), callback)</span><br><span class="line">    <span class="comment"># 等待一定时间，让线程执行任务</span></span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    <span class="comment"># print(&quot;-&quot; * 50)</span></span><br><span class="line">    <span class="comment"># print(&quot;任务停止之前线程池中有%s个线程，空闲的线程有%s个!&quot;</span></span><br><span class="line">    <span class="comment">#       % (len(pool.generate_list), len(pool.free_list)))</span></span><br><span class="line">    <span class="comment"># 正常关闭线程池</span></span><br><span class="line">    pool.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务执行完毕，正常退出！&quot;</span>)</span><br><span class="line">    <span class="comment"># 强制关闭线程池</span></span><br><span class="line">    <span class="comment"># pool.terminate()</span></span><br><span class="line">    <span class="comment"># print(&quot;强制停止任务！&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="pthon-数据库连接池"><a href="#pthon-数据库连接池" class="headerlink" title="pthon 数据库连接池"></a>pthon 数据库连接池</h2><h2 id="java-数据库连接池"><a href="#java-数据库连接池" class="headerlink" title="java 数据库连接池"></a>java 数据库连接池</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>qt</title>
    <url>/hexo/2023/08/24/qt/</url>
    <content><![CDATA[<h1 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h1><ol>
<li><p>信号：信号指控件发出的特定信号。</p>
<p>比如按钮信号</p>
</li>
</ol>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903164907782.png" alt="image-20230903164907782"></p>
<ul>
<li>槽：就是槽函数的意思，我们可以把槽函数绑定在某一个控件信号上</li>
</ul>
<h1 id="关联信号和槽"><a href="#关联信号和槽" class="headerlink" title="关联信号和槽"></a>关联信号和槽</h1><h2 id="自动关联"><a href="#自动关联" class="headerlink" title="自动关联"></a>自动关联</h2><ul>
<li><p>手动选择控件，然后右键 -&gt; 转到槽</p>
</li>
<li><p>自动关联会给我们的工程添加以下内容</p>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903165542104.png" alt="image-20230903165542104"></p>
</li>
<li><p>槽函数只能声明到 <strong>private slot</strong> 或者 <strong>public slot</strong></p>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903165817793.png" alt="image-20230903165817793"></p>
</li>
</ul>
<h2 id="手动关联"><a href="#手动关联" class="headerlink" title="手动关联"></a>手动关联</h2><ul>
<li><p>使用 connect 函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">connect</span>(ui-&gt; reBtn,<span class="built_in">SIGNAL</span>(<span class="built_in">clicked</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">on_reBtn_clicked</span>()));</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(A,<span class="built_in">SIGNAL</span>(B),C,<span class="built_in">SLOT</span>(D));</span><br><span class="line">#当对象 A 发出 B 信号的时候，就会触发对象 c 的槽函数 D</span><br></pre></td></tr></table></figure>

<p><img src="/hexo/2023/08/24/qt/qt/image-20230903171021719.png" alt="image-20230903171021719"></p>
<p>​	<img src="/hexo/2023/08/24/qt/qt/image-20230903171108708.png" alt="image-20230903171108708"></p>
</li>
</ul>
<h1 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h1><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><ol>
<li><p>添加 qt 资源文件</p>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903171248242.png" alt="image-20230903171248242"></p>
</li>
<li><p>添加资源文件 open with-&gt; 资源编辑器</p>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903171915787.png" alt="image-20230903171915787"></p>
</li>
<li><p>添加前置路径</p>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903172017953.png" alt="image-20230903172017953"></p>
</li>
<li><p>点击添加文件选项，将要要的图片添加进去</p>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903172125200.png" alt="image-20230903172125200"></p>
</li>
<li><p>添加 qlabel 控件，更改样式表</p>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903172252879.png" alt="image-20230903172252879"></p>
</li>
<li><p>添加资源 img（border-images）</p>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903172503880.png" alt="image-20230903172503880"></p>
</li>
<li><p>效果</p>
<ul>
<li>border-images</li>
</ul>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903172626974.png" alt="image-20230903172626974"></p>
</li>
</ol>
<ul>
<li><p>background-images</p>
<p><img src="/hexo/2023/08/24/qt/qt/image-20230903172748573.png" alt="image-20230903172748573"></p>
</li>
</ul>
<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="水平布局"><a href="#水平布局" class="headerlink" title="水平布局"></a>水平布局</h2><h2 id="垂直布局"><a href="#垂直布局" class="headerlink" title="垂直布局"></a>垂直布局</h2><h2 id="栅格化布局"><a href="#栅格化布局" class="headerlink" title="栅格化布局"></a>栅格化布局</h2><h1 id="界面切换"><a href="#界面切换" class="headerlink" title="界面切换"></a>界面切换</h1><h1 id="qt下的串口编程"><a href="#qt下的串口编程" class="headerlink" title="qt下的串口编程"></a>qt下的串口编程</h1><h1 id="qt网络编程"><a href="#qt网络编程" class="headerlink" title="qt网络编程"></a>qt网络编程</h1><h1 id="qt下操作GPIO"><a href="#qt下操作GPIO" class="headerlink" title="qt下操作GPIO"></a>qt下操作GPIO</h1>]]></content>
      <categories>
        <category>qt</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>qt</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/hexo/2022/03/19/rabbitmq/</url>
    <content><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="1-MQ引言"><a href="#1-MQ引言" class="headerlink" title="1. MQ引言"></a>1. MQ引言</h2><h3 id="1-1-什么是MQ"><a href="#1-1-什么是MQ" class="headerlink" title="1.1 什么是MQ"></a>1.1 什么是MQ</h3><ul>
<li>MQ（Message Quene）:翻译为 <code>消息队列</code> ，通过典型的<code>生产者</code>和<code>消费者</code>模型 ,生产者不断向消息队列中产生消息，消费者不断从队列中获得消息。因为消息的产生和消费都是异步的，而且只关心消息的发送和接收，没用业务逻辑的侵入。轻松实现系统解耦。别名为<code>消息中间件</code> 通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统集成。</li>
</ul>
<h3 id="1-2-MQ-的种类"><a href="#1-2-MQ-的种类" class="headerlink" title="1.2 MQ 的种类"></a>1.2 MQ 的种类</h3><ul>
<li>当今市面上有很多主流消息中间件，如老牌的 <code>ActiveMQ</code>,<code>RabbitMQ</code>,炙手可热的<code>KafKa</code>,阿里巴巴自主开发的 <code>RocketMQ</code></li>
</ul>
<h3 id="1-3-不同-MQ-特点"><a href="#1-3-不同-MQ-特点" class="headerlink" title="1.3 不同 MQ 特点"></a>1.3 不同 MQ 特点</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1. ActiveMQ</span></span><br><span class="line"><span class="code">	ActiveMQ 是 apache 出品，最流行，能力强劲的开源数据总线。它是一个完全支持 JMS 规范的消息中间件，丰富的 API，多种集群架构模式让 ActiveMQ 在业界成为老牌消息中间件，中小企业很受欢迎</span></span><br><span class="line"><span class="code"># 2. Kafka</span></span><br><span class="line"><span class="code">	Kafka 是 LinkedIn 开源的分布式发布-订阅消息系统，目前归属于 apache 顶级项目。Kafka 的主要特点是基于 Pull 的来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，0.8 版本之后开始支持复制，不支持事务。对消息的重复，丢失，错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。</span></span><br><span class="line"><span class="code"># 3. RocketMQ</span></span><br><span class="line"><span class="code">	RocketMQ 是阿里开源的消息中间件，它是纯 Java 开发，具有高吞吐量，高可用性，适合大规模分布式系统应用的特点，RocketMQ 思路是起源于 Kafka，但并不是 Kafka 的一个 copy，它对于消息的可靠传输及事务性做了优化，目前在 阿里集团广泛被用于交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景</span></span><br><span class="line"><span class="code"># 4. RabbitMQ</span></span><br><span class="line"><span class="code">	RabbitMQ 是使用 Erlang 语言开发的开源消息队列系统，基于 AMQP 协议来实现。AMQP 的主要特点是面向消息，队列路由（包括点对点和发布订阅），可靠性，安全。AMQP 协议更多用在企业系统内对数据一致性，稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>RabbitMQ 和 Kafka 可靠，Kafka 更适合高 IO 的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如 ELK 日志收集</p>
</blockquote>
<h2 id="2-RabbitMQ-引言"><a href="#2-RabbitMQ-引言" class="headerlink" title="2. RabbitMQ 引言"></a>2. RabbitMQ 引言</h2><h3 id="2-1-RabbitMQ"><a href="#2-1-RabbitMQ" class="headerlink" title="2.1 RabbitMQ"></a>2.1 RabbitMQ</h3><blockquote>
<p>基于 <code>AMOP</code> 协议，Erlang 语言开发，是部署最广泛的开源消息中间件，是最受欢迎的消息中间件之一。</p>
</blockquote>
<p><img src="/hexo/2022/03/19/rabbitmq/RabbitMQ/image-20220429151921446.png" alt="image-20220429151921446"></p>
<p><code>官网</code>：[<a href="https://www.rabbitmq.com/">Messaging that just works — RabbitMQ</a>](<a href="https://www.rabbitmq.com/">Messaging that just works — RabbitMQ</a>)</p>
<p><code>官方教程</code>：[<a href="https://www.rabbitmq.com/getstarted.html">RabbitMQ Tutorials — RabbitMQ</a>](<a href="https://www.rabbitmq.com/getstarted.html">RabbitMQ Tutorials — RabbitMQ</a>)</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># AMQP 介绍</span></span><br><span class="line">AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</span><br><span class="line"><span class="code">	AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</span></span><br><span class="line"><span class="code">	AMQP在消息提供者和客户端的行为进行了强制规定，使得不同卖商之间真正实现了互操作能力。</span></span><br><span class="line"><span class="code">	JMS是早期消息中间件进行标准化的一个尝试，它仅仅是在API级进行了规范，离创建互操作能力还差很远。</span></span><br><span class="line"><span class="code">	与JMS不同，AMQP是一个Wire级的协议，它描述了在网络上传输的数据的格式，以字节为流。因此任何遵守此数据格式的工具，其创建和解释消息，都能与其他兼容工具进行互操作。</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-RabbitMQ-的作用"><a href="#2-2-RabbitMQ-的作用" class="headerlink" title="2.2 RabbitMQ 的作用"></a>2.2 RabbitMQ 的作用</h3><ul>
<li><p><strong>解耦</strong>。如图所示。假设有系统B、C、D都需要系统A的数据，于是系统A调用三个方法发送数据到B、C、D。这时，系统D不需要了，那就需要在系统A把相关的代码删掉。假设这时有个新的系统E需要数据，这时系统A又要增加调用系统E的代码。为了降低这种强耦合，就可以使用MQ，<strong>系统A只需要把数据发送到MQ，其他系统如果需要数据，则从MQ中获取即可</strong>。</p>
<p><img src="/hexo/2022/03/19/rabbitmq/RabbitMQ/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3OGM3YTgxY2MxYzA" alt="aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3OGM3YTgxY2MxYzA (589×254) (csdnimg.cn)"></p>
</li>
<li><p><strong>异步</strong>。如图所示。一个客户端请求发送进来，系统A会调用系统B、C、D三个系统，同步请求的话，响应时间就是系统A、B、C、D的总和，也就是800ms。<strong>如果使用MQ，系统A发送数据到MQ，然后就可以返回响应给客户端，不需要再等待系统B、C、D的响应，可以大大地提高性能</strong>。对于一些非必要的业务，比如发送短信，发送邮件等等，就可以采用MQ。</p>
<p><img src="/hexo/2022/03/19/rabbitmq/RabbitMQ/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3OTQ1YThjNGRmNzM"></p>
</li>
<li><p><strong>削峰</strong>。如图所示。这其实是MQ一个很重要的应用。假设系统A在某一段时间请求数暴增，有5000个请求发送过来，系统A这时就会发送5000条SQL进入MySQL进行执行，MySQL对于如此庞大的请求当然处理不过来，MySQL就会崩溃，导致系统瘫痪。<strong>如果使用MQ，系统A不再是直接发送SQL到数据库，而是把数据发送到MQ，MQ短时间积压数据是可以接受的，然后由消费者每次拉取2000条进行处理，防止在请求峰值时期大量的请求直接发送到MySQL导致系统崩溃</strong>。</p>
<p><img src="/hexo/2022/03/19/rabbitmq/RabbitMQ/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3YTlkOTAyY2NhNGY"></p>
</li>
</ul>
<h2 id="3-RabbitMQ-特点"><a href="#3-RabbitMQ-特点" class="headerlink" title="3. RabbitMQ 特点"></a>3. RabbitMQ 特点</h2><ul>
<li>可靠性。支持持久化，传输确认，发布确认等保证了MQ的可靠性。</li>
<li>灵活的分发消息策略。这应该是RabbitMQ的一大特点。在消息进入MQ前由Exchange(交换机)进行路由消息。分发消息策略有：简单模式、工作队列模式、发布订阅模式、路由模式、通配符模式。</li>
<li>支持集群。多台RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。</li>
<li>多种协议。RabbitMQ支持多种消息队列协议，比如 STOMP、MQTT 等等。</li>
<li>支持多种语言客户端。RabbitMQ几乎支持所有常用编程语言，包括 Java、.NET、Ruby 等等。</li>
<li>可视化管理界面。RabbitMQ提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker。</li>
<li>插件机制。RabbitMQ提供了许多插件，可以通过插件进行扩展，也可以编写自己的插件。</li>
</ul>
<h2 id="4-安装-RabbitMQ"><a href="#4-安装-RabbitMQ" class="headerlink" title="4. 安装 RabbitMQ"></a>4. 安装 RabbitMQ</h2><ul>
<li>我是用的 docker 安装</li>
</ul>
<ol>
<li><p>拉取镜像</p>
<blockquote>
<p> docker pull rabbitmq:management</p>
</blockquote>
</li>
<li><p>查看镜像列表</p>
<blockquote>
<p>docker images</p>
</blockquote>
</li>
<li><p>运行 MQ (简单版本)</p>
<blockquote>
<p>docker run -d -p 5672:5672 -p 15672:15672 –name rabbitmq rabbitmq:management</p>
</blockquote>
</li>
<li><p>修改配置运行</p>
<blockquote>
<p>docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER&#x3D;admin -e RABBITMQ_DEFAULT_PASS&#x3D;admin –name rabbitmq rabbitmq:management</p>
<blockquote>
<ul>
<li>-d 后台运行</li>
<li>-p 隐射端口</li>
<li>–name 指定rabbitMQ名称</li>
<li>RABBITMQ_DEFAULT_USER 指定用户账号</li>
<li>RABBITMQ_DEFAULT_PASS 指定账号密码</li>
</ul>
</blockquote>
</blockquote>
</li>
<li><pre><code class="txt"># latest RabbitMQ 3.9
docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.9-management
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 5. java 连接 mq</span><br><span class="line"></span><br><span class="line">### 5.1 加入 mq 依赖</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
<h3 id="5-2-建立连接"><a href="#5-2-建立连接" class="headerlink" title="5.2 建立连接"></a>5.2 建立连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessagfe</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 创建连接 mq 的工厂对象</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// mq 的连接地址</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.96.137&quot;</span>);</span><br><span class="line">        <span class="comment">// mq 连接的端口</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 设置虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">        <span class="comment">// mq 连接用户名</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">        <span class="comment">// mq 连接的用户名密码</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="comment">// 建立连接获取连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">// 获取连接中的通道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 一定记得关，我老忘</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-向-mq-中发送消息"><a href="#5-3-向-mq-中发送消息" class="headerlink" title="5.3 向 mq 中发送消息"></a>5.3 向 mq 中发送消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Provider</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessagfe</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 创建连接 mq 的工厂对象</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// mq 的连接地址</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.96.137&quot;</span>);</span><br><span class="line">        <span class="comment">// mq 连接的端口</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 设置虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">        <span class="comment">// mq 连接用户名</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">        <span class="comment">// mq 连接的用户名密码</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="comment">// 建立连接获取连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">// 获取连接中的通道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通道绑定对应消息队列</span></span><br><span class="line"><span class="comment">         * 参数一：队列名称，如果队列不存在自动创建</span></span><br><span class="line"><span class="comment">         * 参数二：用来定义队列是否持久化 true 独占队列，false 不持久化</span></span><br><span class="line"><span class="comment">         * 参数三：execlusive 是否独占对队列，true 独占，false 不独占</span></span><br><span class="line"><span class="comment">         * 参数四：autoDelete 是否在消息完成后自动删除队列  true自动删除，false不自动删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 发布消息</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数 1 ：交换机名字，因为直连，没有交换机，所以没写</span></span><br><span class="line"><span class="comment">         * 参数 2 ：队列名称</span></span><br><span class="line"><span class="comment">         * 参数 3 ：传递消息的设置</span></span><br><span class="line"><span class="comment">         * 参数 4 ： 发送消息的内容（发送的是 byte类型的数组）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;hello rabbitmq&quot;</span>.getBytes());</span><br><span class="line">         <span class="comment">// 一定记得关，我老忘</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-消费者从-mq-中取消息"><a href="#5-4-消费者从-mq-中取消息" class="headerlink" title="5.4 消费者从 mq 中取消息"></a>5.4 消费者从 mq 中取消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 代码冗余了，所以后面会创建一个工具类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 创建连接 mq 的工厂对象</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// mq 的连接地址</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.96.137&quot;</span>);</span><br><span class="line">        <span class="comment">// mq 连接的端口</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 设置虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/ems&quot;</span>);</span><br><span class="line">        <span class="comment">// mq 连接用户名</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">        <span class="comment">// mq 连接的用户名密码</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="comment">// 建立连接获取连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">// 获取通道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 绑定通道</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 消费消息</span></span><br><span class="line">        <span class="comment">// 参数一 ：消费那个队列的消息，队列名称</span></span><br><span class="line">        <span class="comment">// 参数二 ： 开启消息的自动确认机制</span></span><br><span class="line">        <span class="comment">// 参数三 ：消费消息时回调接口</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数说明：</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 			消息的内容</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;new String(body)=&quot;</span>+ <span class="keyword">new</span> <span class="title class_">String</span>(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 这俩一般不关闭，因为我们希望消费者一直监听我们的消息</span></span><br><span class="line">        <span class="comment">//channel.close();</span></span><br><span class="line">        <span class="comment">//connection.close();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-hello-world-模型"><a href="#6-hello-world-模型" class="headerlink" title="6. hello world 模型"></a>6. hello world 模型</h2><ul>
<li>选用上面的模型</li>
</ul>
]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>RaspberryPi</title>
    <url>/hexo/2023/06/09/raspberrypi/</url>
    <content><![CDATA[<h1 id="下载和烧写镜像"><a href="#下载和烧写镜像" class="headerlink" title="下载和烧写镜像"></a>下载和烧写镜像</h1><ul>
<li>从官网下载树莓派镜像，使用烧写工具 balena-etcher 烧录镜像</li>
</ul>
<h2 id="串口登录"><a href="#串口登录" class="headerlink" title="串口登录"></a>串口登录</h2><ul>
<li><p>将系统烧写到 SD 卡后，重新拔插 SD 卡，连接到系统 usb，电脑会出现树莓派的 boot 分区</p>
</li>
<li><p>修改 config.txt 文件，将内容追加到文件末尾（停止了蓝牙，解除了对串口的占用）</p>
<blockquote>
<p>dtoverlay&#x3D;pi3-miniuart-bt</p>
</blockquote>
</li>
<li><p>覆盖 cmdline.txt，万一失效，所以建议先把这个文件备份一份</p>
<p><strong>原来的</strong></p>
<blockquote>
<p>console&#x3D;serial0,115200 console&#x3D;tty1 root&#x3D;PARTUUID&#x3D;738a4d67-02 rootfstype&#x3D;ext4 elevator&#x3D;deadline fsck.repair&#x3D;yes rootwait quiet init&#x3D;&#x2F;usr&#x2F;lib&#x2F;raspi-config&#x2F;init_resize.sh</p>
</blockquote>
<p><strong>修改后</strong></p>
<blockquote>
<p>dwc_otg.lpm_enable&#x3D;0 console&#x3D;tty1 console&#x3D;serial0,115200 root&#x3D;&#x2F;dev&#x2F;mmcblk0p2 rootfstype&#x3D;ext4 elevator&#x3D;deadline fsck.repair&#x3D;yes rootwait</p>
</blockquote>
</li>
<li><p>使用 USB-TTL转换模块如图连接线,TTL 的 TXD 连接到树莓派的 RXD，另一根也反向接线便可</p>
<p><img src="/hexo/2023/06/09/raspberrypi/raspberrypi/aHR0cHM6Ly9zeWpzeHhqeS5naXRodWIuaW8vbXlibG9nL2Fzc2V0cy8xLzIwMTgwNjIyLTk5ZjRjNWE1LnBuZw.png" alt="aHR0cHM6Ly9zeWpzeHhqeS5naXRodWIuaW8vbXlibG9nL2Fzc2V0cy8xLzIwMTgwNjIyLTk5ZjRjNWE1LnBuZw"></p>
</li>
<li><p>线接好后插入电脑（电脑有安装了 USB 转串口驱动）在设备管理器看看使用的是哪个 COMS，使用终端工具选择串口和波特率进行连接便可</p>
</li>
</ul>
<h2 id="SSH登录-我常用"><a href="#SSH登录-我常用" class="headerlink" title="SSH登录(我常用)"></a>SSH登录(我常用)</h2><ul>
<li><p>烧写好镜像后，一样把 SD 卡插入电脑，显示出 boot 分区</p>
</li>
<li><p>在boot目录添加两个文件</p>
<ul>
<li><p>ssh（不要后缀，直接名字就叫 ssh，这样就可以开启 ssh）</p>
</li>
<li><p>创建并添加一个文件 <code>wpa_supplicant.conf</code></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">country=CN</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=&quot;无线网名称&quot;</span><br><span class="line">        psk=&quot;无线网密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>添加好两个文件后直接上电，在路由器的管理后台(或者 windows 直接开热点，连接Windows的热点)查看树莓派的IP</p>
</li>
<li><p>然后使用ssh 登录到树莓派</p>
</li>
<li><p>默认账户：pi</p>
</li>
<li><p>默认密码：raspberry</p>
</li>
</ul>
<h1 id="库编程"><a href="#库编程" class="headerlink" title="库编程"></a>库编程</h1><p><img src="/hexo/2023/06/09/raspberrypi/raspberrypi/image-20230808141416928.png" alt="image-20230808141416928"></p>
<h2 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h2><ul>
<li><p><strong>静态函数库</strong>：是在程序执行前（编译）就加入到目标程序中去了 ；</p>
</li>
<li><p><strong>优点</strong>：运行快，发布程序无需提供静态库，因为已经在app中，移植方便</p>
</li>
<li><p><strong>缺点</strong>：编译生成的文件大</p>
</li>
</ul>
<h2 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h2><ul>
<li><strong>动态函数库</strong>，是在程序执行时动态（临时）由目标程序去调用</li>
<li><strong>缺点</strong>： 运行慢</li>
<li><strong>优点</strong>： 小</li>
</ul>
<p><img src="/hexo/2023/06/09/raspberrypi/raspberrypi/image-20230808141527323.png" alt="image-20230808141527323"></p>
<h2 id="生成库"><a href="#生成库" class="headerlink" title="生成库"></a>生成库</h2><h3 id="静态库-1"><a href="#静态库-1" class="headerlink" title="静态库"></a>静态库</h3><ul>
<li><p>静态库的生成：格式：xxxx.a </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc calcufuncs.c -c 生成xxx.o文件</span><br><span class="line"></span><br><span class="line">ar rcs libcalcufunc.a calcufuncs.o xxx.o文件生成xxx.a静态库文件</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="动态库-1"><a href="#动态库-1" class="headerlink" title="动态库"></a>动态库</h3><ul>
<li><p>动态库的生成：格式：xxxxx.so</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -shared -fpic calcufuncs.c -o libcalc.so</span><br><span class="line"></span><br><span class="line">-shared 指定生成动态库</span><br><span class="line">-fpic 标准，fPIC 选项作用于编译阶段,在生成目标文件时就得使用该选项,以生成位置无关的代码。</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="库的使用"><a href="#库的使用" class="headerlink" title="库的使用"></a>库的使用</h2><h3 id="静态库-2"><a href="#静态库-2" class="headerlink" title="静态库"></a>静态库</h3><ul>
<li><pre><code class="shell">gcc calculatorT.c -lcalcufunc -L ./ -o mainProStatic

-lcalcufunc -l #是制定要用的动态库，库名砍头去尾
-L #告诉gcc编译器从-L制定的路径去找静态库。默认是从/usr/lib  /usr/local/lib去找
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* eg:</span><br><span class="line"></span><br><span class="line">  &gt; gcc calculatorT.c -lcalc -L ./ -o main libcalc.so</span><br><span class="line"></span><br><span class="line">### 动态库</span><br><span class="line"></span><br><span class="line">[推荐阅读博文]([linux动态库(.so)搜索路径(目录)设置方法 - zhangzheng08pku - 博客园 (cnblogs.com)](https://www.cnblogs.com/progamming/p/13043652.html))</span><br><span class="line"></span><br><span class="line">* Linux动态库的默认搜索路径是/lib和/usr/lib。动态库被创建后，一般都复制到这两个目录中。当程序执行时需要某动态库，并且该动 态库还未加载到内存中，则系统会自动到这两个默认搜索路径中去查找相应的动态库文件，然后加载该文件到内存中，这样程序就可以使用该动态库中的函数，以及该动态库的其它资源了。在Linux 中，动态库的搜索路径除了默认的搜索路径外，还可以通过以下三种方法来指定。</span><br><span class="line"></span><br><span class="line">  * 在配置文件/etc/ld.so.conf中指定动态库搜索路径；</span><br><span class="line"></span><br><span class="line">    ```shell</span><br><span class="line">    vi /etc/ld.so.conf #添加 lib目录（绝对路径）</span><br><span class="line">    ldconfig</span><br></pre></td></tr></table></figure>

  

* 通过环境变量LD_LIBRARY_PATH指定动态库搜索路径；

  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=”LD_LIBRARY_PATH:libpath”</span><br></pre></td></tr></table></figure>

  

* 在编译目标代码时指定该程序的动态库搜索路径。

  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">还可以在编译目标代码时指定程序的动态库搜索路径。通过gcc 的参数”-Wl,-rpath,”指定</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h1 id="gpio"><a href="#gpio" class="headerlink" title="gpio"></a>gpio</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">+-----+-----+---------+------+---+---Pi 3B--+---+------+---------+-----+-----+</span><br><span class="line">| BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |</span><br><span class="line">+-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+</span><br><span class="line">|     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |</span><br><span class="line">|   2 |   8 |   SDA.1 |   IN | 1 |  3 || 4  |   |      | 5v      |     |     |</span><br><span class="line">|   3 |   9 |   SCL.1 |   IN | 1 |  5 || 6  |   |      | 0v      |     |     |</span><br><span class="line">|   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 1 | ALT0 | TxD     | 15  | 14  |</span><br><span class="line">|     |     |      0v |      |   |  9 || 10 | 1 | ALT0 | RxD     | 16  | 15  |</span><br><span class="line">|  17 |   0 | GPIO. 0 |   IN | 0 | 11 || 12 | 0 | IN   | GPIO. 1 | 1   | 18  |</span><br><span class="line">|  27 |   2 | GPIO. 2 |   IN | 0 | 13 || 14 |   |      | 0v      |     |     |</span><br><span class="line">|  22 |   3 | GPIO. 3 |   IN | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |</span><br><span class="line">|     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  |</span><br><span class="line">|  10 |  12 |    MOSI |   IN | 0 | 19 || 20 |   |      | 0v      |     |     |</span><br><span class="line">|   9 |  13 |    MISO |   IN | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  |</span><br><span class="line">|  11 |  14 |    SCLK |   IN | 0 | 23 || 24 | 1 | IN   | CE0     | 10  | 8   |</span><br><span class="line">|     |     |      0v |      |   | 25 || 26 | 1 | IN   | CE1     | 11  | 7   |</span><br><span class="line">|   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |</span><br><span class="line">|   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |</span><br><span class="line">|   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  |</span><br><span class="line">|  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     |</span><br><span class="line">|  19 |  24 | GPIO.24 |   IN | 0 | 35 || 36 | 0 | IN   | GPIO.27 | 27  | 16  |</span><br><span class="line">|  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  |</span><br><span class="line">|     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |</span><br><span class="line">+-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+</span><br><span class="line">| BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |</span><br><span class="line">+-----+-----+---------+------+---+---Pi 3B--+---+------+---------+-----+-----+</span><br></pre></td></tr></table></figure>

<h1 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>编译高版本的可以使用这个</p>
<p><a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads">https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads</a></p>
<p>交叉编译工具链</p>
<p><a href="https://github.com/raspberrypi/tools.git">https://github.com/raspberrypi/tools.git</a></p>
<p>树莓派 linux 源码</p>
<p><a href="https://github.com/raspberrypi/linux.git">https://github.com/raspberrypi/linux.git</a></p>
<h3 id="临时配置"><a href="#临时配置" class="headerlink" title="临时配置"></a>临时配置</h3><ol>
<li><p>打印系统环境变量</p>
<blockquote>
<p>echo $PATH</p>
</blockquote>
</li>
<li><p>把 tools bin 追加到PATH</p>
<blockquote>
<p>export PATH&#x3D;$PATH:(toolsPATH)</p>
</blockquote>
</li>
<li><p>shell 脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">DIR=&quot;$( cd &quot;$( dirname &quot;$&#123;BASH_SOURCE[0]&#125;&quot; )&quot; &amp;&amp; pwd )&quot;</span><br><span class="line">export PATH=&quot;$PATH:$DIR/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/&quot;</span><br><span class="line">export ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- KERNEL=kernel7</span><br></pre></td></tr></table></figure>



<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取脚本所在目录的绝对路径</span></span><br><span class="line">SCRIPT_DIR=$(cd &quot;$(dirname &quot;$0&quot;)&quot; &amp;&amp; pwd)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置临时变量</span></span><br><span class="line">TEMP_VAR=&quot;$SCRIPT_DIR/tools/arm-bcm2708/arm-linux-gnueabihf/bin&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 TEMP_VAR 变量中的路径添加到 PATH 中</span></span><br><span class="line">export PATH=&quot;$TEMP_VAR:$PATH&quot;</span><br><span class="line"></span><br><span class="line">export ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- KERNEL=kernel7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出变量值</span></span><br><span class="line">echo &quot;New PATH: $PATH&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<blockquote>
<p>source env.sh</p>
</blockquote>
</li>
</ol>
<h3 id="永久配置"><a href="#永久配置" class="headerlink" title="永久配置"></a>永久配置</h3><p>则是将上面的shell 放到 profile 文件中</p>
<h1 id="内核编译"><a href="#内核编译" class="headerlink" title="内核编译"></a>内核编译</h1><p><a href="https://blog.csdn.net/nicekwell/article/details/78482833">树莓派-内核开发-说明 下载代码 编译 替换内核_nicekwell的博客-CSDN博客</a>)</p>
<p>编译64位 <a href="https://blog.csdn.net/m0_49475727/article/details/109247979">自己制作树莓派3B+ 64位系统（编译内核+rootfs制作）_自己复刻树莓派_请叫我雯子小姐的小爷的博客-CSDN博客</a></p>
<h3 id="安装的软件"><a href="#安装的软件" class="headerlink" title="安装的软件"></a>安装的软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install bc -y</span><br><span class="line">sudo apt-get install libncurses5-dev libncursesw5-dev -y</span><br><span class="line">sudo apt-get install zlib1g:i386 -y</span><br><span class="line">sudo apt-get install libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 -y</span><br><span class="line">sudo apt install flex -y</span><br><span class="line">sudo apt install bison -y</span><br><span class="line">sudo apt-get install libelf-dev -y</span><br><span class="line">sudo apt-get install lib32z1 -y</span><br><span class="line">sudo apt-get install libgmp-dev -y</span><br></pre></td></tr></table></figure>

<p>踩坑 </p>
<ul>
<li><code>Unable to locate package zlib1g:i386</code></li>
</ul>
<p>解决</p>
<ul>
<li>sudo dpkg –add-architecture i386</li>
<li>sudo apt-get update</li>
<li>sudo apt-get install zlib1g:i386 -y</li>
</ul>
<h3 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h3><ul>
<li>make ARCH&#x3D;arm CROSS_COMPILE&#x3D;arm-linux-gnueabihf- bcm2709_defconfig</li>
</ul>
<h4 id="执行-menuconfig"><a href="#执行-menuconfig" class="headerlink" title="执行 menuconfig"></a>执行 menuconfig</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- KERNEL=kernel7 make menuconfig</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">指定arm架构  指定编译器                       树莓派            主要核心指令</span></span><br></pre></td></tr></table></figure>

<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- KERNEL=kernel7 make -j2 zImage modules dtbs &gt;&amp;1 | tee build.log</span><br><span class="line">以n进程编译。不指明几进程的话则默认以单进程编译。</span><br></pre></td></tr></table></figure>

<ul>
<li>zImage：生成内核镜像</li>
<li>modules：生成驱动模块</li>
<li>dtbs：配置文件</li>
</ul>
<p>编译成功会生成 vmlinux 源码树目录，失败则无，编译成功后，目标 zimage 镜像 arch&#x2F;arm&#x2F;boot目录下，需要打包 zImage 成树莓派可用的 xxx.img</p>
<h5 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h5><p>很明显编译不会那么顺利…….</p>
<ul>
<li>错误：</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">error: #error New address family defined, please update secclass_map.</span><br><span class="line">  246 | #error New address family defined, please update secclass_map.</span><br></pre></td></tr></table></figure>

<ul>
<li>解决办法：</li>
</ul>
<p>[<a href="https://lore.kernel.org/selinux/20190225005528.28371-1-paulo@paulo.ac/">PATCH] selinux: use kernel linux&#x2F;socket.h definitions for PF_MAX - Paulo Alcantara</a></p>
<ul>
<li>错误</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">No rule to make target &#x27;debian/canonical-certs.pem&#x27;, needed by &#x27;certs/x509_certificate_list&#x27;.  Stop.</span><br></pre></td></tr></table></figure>

<ul>
<li>解决办法</li>
</ul>
<p><a href="https://blog.csdn.net/qq_36393978/article/details/118157426">内核错误: No rule to make target ‘debian&#x2F;canonical-certs.pem‘, needed by ‘certs&#x2F;x509_certificate_list‘_no rule to make target ‘debian&#x2F;canonical-certs.pem_Imagine Miracle的博客-CSDN博客</a></p>
<h4 id="打包-zimage-镜像"><a href="#打包-zimage-镜像" class="headerlink" title="打包 zimage 镜像"></a>打包 zimage 镜像</h4><ul>
<li><p>直接用linux源码包里的工具：</p>
<blockquote>
<p>.&#x2F;scripts&#x2F;mkknlimg arch&#x2F;arm&#x2F;boot&#x2F;zImage .&#x2F;kernel_new.img</p>
</blockquote>
</li>
<li><p>复制到内核</p>
<blockquote>
<p>sudo cp kernel_new.img &#x2F;home&#x2F;ubuntu&#x2F;raspberrypi&#x2F;boot&#x2F;kernel7.img</p>
</blockquote>
</li>
</ul>
<h3 id="数据拷贝"><a href="#数据拷贝" class="headerlink" title="数据拷贝"></a>数据拷贝</h3><ul>
<li>mkdir  boot data</li>
</ul>
<h4 id="挂载sd卡"><a href="#挂载sd卡" class="headerlink" title="挂载sd卡"></a>挂载sd卡</h4><ul>
<li>mount &#x2F;dev&#x2F;sdb1 boot       一个 fat 分区，是 boot 相关的内容，kernel 的 img</li>
<li>mount &#x2F;dev&#x2F;sdb2 data       一个是 ext4 分区，也就是系统的根目录分区</li>
</ul>
<h4 id="安装-moudles"><a href="#安装-moudles" class="headerlink" title="安装 moudles"></a>安装 moudles</h4><ul>
<li><p>设备驱动文件：hdmi，usb，wifi，io ……</p>
<blockquote>
<p>sudo ARCH&#x3D;arm CROSS_COMPILE&#x3D;arm-linux-gnueabihf- KERNEL&#x3D;kernel7 make INSTALL_MOD_PATH&#x3D;(根目录)[ext4] modules_install</p>
</blockquote>
</li>
<li><p>我的指令</p>
<blockquote>
<p>sudo ARCH&#x3D;arm CROSS_COMPILE&#x3D;arm-linux-gnueabihf- KERNEL&#x3D;kernel7 make INSTALL_MOD_PATH&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;raspberrypi&#x2F;data modules_install</p>
</blockquote>
</li>
</ul>
<h3 id="更新-kernel-img-文件"><a href="#更新-kernel-img-文件" class="headerlink" title="更新 kernel.img 文件"></a>更新 kernel.img 文件</h3><p>备份原来的镜像</p>
<blockquote>
<p>cp kernel7.img kernel7.old.img</p>
</blockquote>
<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>将新镜像复制到boot</p>
<blockquote>
<p>cp kernel_new.img boot&#x2F;kernel.img</p>
</blockquote>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>将新镜像复制到boot</p>
<blockquote>
<p>cp kernel_new.img boot&#x2F;kernel8.img</p>
</blockquote>
<p>编辑 boot&#x2F;config.txt 文件，在最后加入一行：</p>
<blockquote>
<p>kernel&#x3D;kernel_new.img </p>
</blockquote>
<h3 id="复制其他相关文件"><a href="#复制其他相关文件" class="headerlink" title="复制其他相关文件"></a>复制其他相关文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp arch/arm/boot/dts/*.*dtb* [fat]/</span><br><span class="line">cp arch/arm/boot/dts/overlays/*.dtb* [fat]/overlays/</span><br><span class="line">cp arch/arm/boot/dts/overlays/README [fat]/overlays/</span><br></pre></td></tr></table></figure>

<p>我的指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp arch/arm/boot/dts/*.dtb /home/ubuntu/raspberrypi/boot/</span><br><span class="line">sudo cp arch/arm/boot/dts/overlays/*.dtb* /home/ubuntu/raspberrypi/boot/overlays/</span><br><span class="line">sudo cp arch/arm/boot/dts/overlays/README /home/ubuntu/raspberrypi/boot/overlays/</span><br></pre></td></tr></table></figure>





<p>更新完成后插回树莓派即可开机，开机后可以用 uname -a 命令查看kernel信息已经改变</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派国内镜像源</title>
    <url>/hexo/2021/11/19/raspi-source/</url>
    <content><![CDATA[<h1 id="树莓派国内镜像源地址"><a href="#树莓派国内镜像源地址" class="headerlink" title="树莓派国内镜像源地址"></a>树莓派国内镜像源地址</h1><ul>
<li><p>查看树莓版本命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="buster-版本"><a href="#buster-版本" class="headerlink" title="buster 版本"></a>buster 版本</h2><h3 id="中科大"><a href="#中科大" class="headerlink" title="中科大"></a>中科大</h3><p>在<code>/etc/apt/sources.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">----中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/apt/sources.list.d/raspi.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--中科大--raspi.list</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ buster main ui</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ buster main ui</span><br></pre></td></tr></table></figure>

<h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><p>在<code>/etc/apt/sources.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">----阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ buster main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main non-free contrib</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/apt/sources.list.d/raspi.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--阿里云--raspi.list</span></span><br><span class="line">deb http://mirrors.aliyun.com/raspberrypi/ buster main ui</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspberrypi/ buster main ui</span><br></pre></td></tr></table></figure>

<h3 id="清华大学"><a href="#清华大学" class="headerlink" title="清华大学"></a>清华大学</h3><p>在<code>/etc/apt/sources.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib rpi</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/apt/sources.list.d/raspi.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--清华大学---raspi.list</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br></pre></td></tr></table></figure>

<h3 id="整合源"><a href="#整合源" class="headerlink" title="整合源"></a>整合源</h3><p>在<code>/etc/apt/sources.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">buster source.list</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free $</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-f$</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">----中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ buster main contrib non-free r$</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ buster main contrib non-fr$</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">----阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ buster main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main non-free contrib</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/apt/sources.list.d/raspi.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">buster rasp.list</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--清华大学--raspi.list</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--中科大--raspi.list</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ buster main ui</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ buster main ui</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--阿里云--raspi.list</span></span><br><span class="line">deb http://mirrors.aliyun.com/raspberrypi/ buster main ui</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspberrypi/ buster main ui</span><br></pre></td></tr></table></figure>

<h2 id="stretch"><a href="#stretch" class="headerlink" title="stretch"></a>stretch</h2><h3 id="中科大-1"><a href="#中科大-1" class="headerlink" title="中科大"></a>中科大</h3><p>在<code>/etc/apt/sources.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/apt/sources.list.d/raspi.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--中科大--rasp.list</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui</span><br></pre></td></tr></table></figure>

<h3 id="阿里云-1"><a href="#阿里云-1" class="headerlink" title="阿里云"></a>阿里云</h3><p>在<code>/etc/apt/sources.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ stretch main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ stretch main non-free contrib</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/apt/sources.list.d/raspi.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--阿里云--rasp.list</span></span><br><span class="line">deb http://mirrors.aliyun.com/raspberrypi/ stretch main ui</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspberrypi/ stretch main ui</span><br></pre></td></tr></table></figure>

<h3 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h3><p>在<code>/etc/apt/sources.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/apt/sources.list.d/raspi.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--清华大学--rasp.list</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main ui</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main ui</span><br></pre></td></tr></table></figure>

<h3 id="整合源-1"><a href="#整合源-1" class="headerlink" title="整合源"></a>整合源</h3><p>在<code>/etc/apt/sources.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stretch source.list</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ stretch main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ stretch main non-free contrib</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br></pre></td></tr></table></figure>

<p>在 <code>/etc/apt/sources.list.d/raspi.list</code> 加入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--中科大--rasp.list</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--阿里云--rasp.list</span></span><br><span class="line">deb http://mirrors.aliyun.com/raspberrypi/ stretch main ui</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspberrypi/ stretch main ui</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--清华大学--rasp.list</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main ui</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main ui</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <categories>
        <category>raspberrypi</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>raspberrypi</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/hexo/2022/01/26/redis/</url>
    <content><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h2><ol>
<li><p>下载 redis 包</p>
<p><a href="https://download.redis.io/releases/redis-6.2.6.tar.gz">传送门</a></p>
</li>
<li><p>安装</p>
<ul>
<li>解压：tar -xvf .&#x2F;redis.tar.gz</li>
<li>安装：make&amp;make install</li>
</ul>
</li>
<li><p>启动 redis</p>
<blockquote>
<p>容器启动</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -e &quot;ACCEPT_EULA=Y&quot; -e &quot;SA_PASSWORD=@nba6666&quot; \</span><br><span class="line">   -p 1433:1433 --name sql1 --hostname sql1 \</span><br><span class="line">   -d mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">   </span><br><span class="line">docker run --name oracle -d  registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure>

<blockquote>
<p>前台启动</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后台启动</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先复制一份 redis。conf 文件到 /etc 配置目录下。</span></span><br><span class="line">cp /redis-6.2.6/redis.conf  /etc/redis.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然后打开 redis.conf 更改 daemonize 的值为 <span class="built_in">yes</span></span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始启动</span></span><br><span class="line">redis-server /etc/redis.conf #[redis 配置文件路径]</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接 redis</p>
<blockquote>
<p>redis-cli</p>
</blockquote>
<p>​	redis 默认 16 【0-15】  张表，每张表的密码都是一样的。</p>
</li>
<li><p>redis 设置密码</p>
<ul>
<li><p>改配置文件的方式,开放 redis.conf 中的 requirepass passwd</p>
</li>
<li><p>在 redis 中 通过命令改【个人推荐这么改，因为配置文件的改密码的位置不好找】</p>
<blockquote>
<p>redis-cli  # 连接redis</p>
<p>127.0.0.1:6389 &gt; config redis set requirepass passwd</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="redis-键-key"><a href="#redis-键-key" class="headerlink" title="redis 键 (key)"></a>redis 键 (key)</h2><ol>
<li><p><strong>set key value</strong>   设置键值对</p>
</li>
<li><p>**keys ***   查看当前库所有的 key</p>
</li>
<li><p><strong>exists key</strong>   判断某个 key 是否存在 </p>
</li>
<li><p><strong>type key</strong>  查看 key 的类型</p>
</li>
<li><p><strong>del key</strong>  删除 key（立即删除） </p>
</li>
<li><p><strong>unlink key</strong>  根据 value 非阻塞删除</p>
</li>
<li><p><strong>expire key  second</strong>   设置过期时间</p>
</li>
<li><p><strong>ttl key</strong> 查看还有多少秒过期，</p>
<ul>
<li><p>-1 表示永不过期</p>
</li>
<li><p>-2 表示已经过期</p>
</li>
</ul>
</li>
<li><p><strong>select</strong> 切换操作库  select number ( 0-15 )，默认是 0 号库，最多 15 号库</p>
</li>
<li><p><strong>dbsize</strong> 查看当前数据库中 key 的数量</p>
</li>
<li><p><strong>flushdb</strong>  清空当前库</p>
</li>
<li><p><strong>flushall</strong> 通杀全部库</p>
</li>
</ol>
<h2 id="redis-字符串（string）"><a href="#redis-字符串（string）" class="headerlink" title="redis 字符串（string）"></a>redis 字符串（string）</h2><ul>
<li>string 是redis 基础的数据类型之一，采用 key-value 的形式。是二进制安全的，也就是 redis 的 string  是可以包含任何数据数据的，比如 jpg png 图片 或者 序列化的对象。</li>
<li>一个 redis 中 string 的字符串 value 最多可以是 512M</li>
</ul>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ol>
<li><p><strong>get</strong>  <key> 查询对应键值</key></p>
</li>
<li><p><strong>set</strong> <key> <value>  设置对应键值</value></key></p>
<ul>
<li>如果有相同的 key 被多次赋值，那么这个 key 对应的值只会是最后被赋予的值</li>
</ul>
</li>
<li><p><strong>append</strong> <key> <value> 追加到原来值的末尾</value></key></p>
</li>
<li><p><strong>strlen</strong> <key> 计算 key 对应值的长</key></p>
</li>
<li><p><strong>setnx</strong> <key> <value> 只要当 key 不存在时才设置 key 的值</value></key></p>
</li>
<li><p><strong>incr</strong> <key></key></p>
<ul>
<li>将 key 中存储的数字值增 1</li>
<li>只能对数字值操作，如果为 空，新增值为 1</li>
<li>incrby <key> 20  key的值增加 20</key></li>
</ul>
</li>
<li><p><strong>decr</strong> <key></key></p>
<ul>
<li>将 key 中存储的数字值减 1</li>
<li>decrby <key> 20 key 的值减少 20</key></li>
</ul>
</li>
<li><p><strong>mset</strong> <key> <value> <key> <value>  …… </value></key></value></key></p>
<ul>
<li>可以同时设置一个或者多个 key-value 对</li>
</ul>
</li>
<li><p><strong>mget</strong>  <key> <value> <key> <value>  ……</value></key></value></key></p>
<ul>
<li>同时获取一个或者多个 value</li>
</ul>
</li>
<li><p><strong>msetnx</strong> <key> <value> <key> <value> ……</value></key></value></key></p>
<ul>
<li>同时设置一个或者多个 key-value、只有当 所给定的 key 都不存在。原子性，有一个失败则都失败。</li>
</ul>
</li>
<li><p><strong>getrange</strong> <key> &lt;起始位置&gt; &lt;结束位置&gt;  获得值的范围，类似于 Java 中的 substring，前包，后包</key></p>
</li>
<li><p><strong>setrange</strong> <key> &lt;插入起始位置&gt;  &lt;内容&gt;，覆盖内容，索引从 0 开始</key></p>
<blockquote>
<p>演示案例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 &quot;goof&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;goof&quot;</span><br><span class="line">127.0.0.1:6379&gt; getrange k1 0 2</span><br><span class="line">&quot;goo&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange k1 2 abc</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;goabc&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange k1 2 a</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;goabc&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange k1 3 a</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;goaac&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>setex</strong> <key> &lt;过期时间&gt; <value> 设置键值的时候，设置过期时间，单位为 秒。</value></key></p>
</li>
<li><p><strong>getset</strong> <key> <value> 以新值换旧值，设置新值的同时获取旧值</value></key></p>
<blockquote>
<p>演示案例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 good</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;good&quot;</span><br><span class="line">127.0.0.1:6379&gt; getset k1 java</span><br><span class="line">&quot;good&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;java&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="redis-列表-list"><a href="#redis-列表-list" class="headerlink" title="redis 列表( list )"></a>redis 列表( list )</h2><ul>
<li>单键多值，可以从头或者尾加，底层为双向循环链表结构，所以两端的操作性很高，通过索引下标操作中间节点的性能会较差。</li>
</ul>
<h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><ol>
<li><p>l<strong>push&#x2F;rpush</strong> <key> <value1> <value2> <value3> …… </value3></value2></value1></key></p>
<ul>
<li>从左边或者右边插入多个值</li>
<li>值在键在，值亡键亡</li>
</ul>
</li>
<li><p><strong>lrange</strong> <key> 0 -1 遍历全部</key></p>
<blockquote>
<p>演示案例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@192 etc]# flushdb</span><br><span class="line">-bash: flushdb: 未找到命令</span><br><span class="line">[root@192 etc]# cd</span><br><span class="line">[root@192 ~]# redis-cli </span><br><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lpush k1 20 v1 v2 v3</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v1&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li>从左边放，就是栈结构 先进后出</li>
<li>从右边放，就是 正常顺序</li>
</ul>
</li>
<li><p><strong>lpop&#x2F;rpop</strong> <key> 从左边 &#x2F; 右边吐出一个值。值在键在，值光键亡</key></p>
<blockquote>
<p>演示案例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpop k1 </span><br><span class="line">&quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1</span><br><span class="line">1) &quot;v2&quot;</span><br><span class="line">2) &quot;v1&quot;</span><br><span class="line">3) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop k1 </span><br><span class="line">&quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1</span><br><span class="line">1) &quot;v2&quot;</span><br><span class="line">2) &quot;v1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当 key 里没值了</span></span><br><span class="line">127.0.0.1:6379&gt; rpop k1 </span><br><span class="line">&quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop k1 </span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>rpoplpush</strong> <key1> <key2> 从 key1 列表右边吐出一个值，插到 key2 列表左边。</key2></key1></p>
<blockquote>
<p>演示案例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1</span><br><span class="line">1) &quot;20&quot;</span><br><span class="line">2) &quot;v1&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">4) &quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange k2 0 -1</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v1&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush k1 k2</span><br><span class="line">&quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1</span><br><span class="line">1) &quot;20&quot;</span><br><span class="line">2) &quot;v1&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange k2 0 -1</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v3&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">4) &quot;v1&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>lrange</strong> <key> <start> <stop></stop> 按照索引下标获得元素（从左到右）</start></key></p>
<ul>
<li>类似 python 语言的 切片语法</li>
</ul>
<blockquote>
<p>演示案例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange k1 0 3</span><br><span class="line">1) &quot;20&quot;</span><br><span class="line">2) &quot;v1&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 -4 -1</span><br><span class="line">1) &quot;20&quot;</span><br><span class="line">2) &quot;v1&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>lindex</strong> <key> <index> 按照索引下标获取元素（从左到右）</index></key></p>
</li>
<li><p><strong>llen</strong> <key> 获取列表的长度</key></p>
</li>
<li><p><strong>linsert</strong> <key> <strong>before&#x2F;after</strong> <value> <newvalue> 在 <value> 的前面 &#x2F; 后面插入 <newvalue> 插入值</newvalue></value></newvalue></value></key></p>
<blockquote>
<p>演示案例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">after</span></span><br><span class="line">127.0.0.1:6379&gt; linsert k1 after 20  kk</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1</span><br><span class="line">1) &quot;20&quot;</span><br><span class="line">2) &quot;kk&quot;</span><br><span class="line">3) &quot;v1&quot;</span><br><span class="line">4) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">before</span> </span><br><span class="line">127.0.0.1:6379&gt; linsert k1 before 20  jj</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1</span><br><span class="line">1) &quot;jj&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">3) &quot;kk&quot;</span><br><span class="line">4) &quot;v1&quot;</span><br><span class="line">5) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>lrem</strong> <key> <n> <value> 从左边删除 n 个 value</value></n></key></p>
</li>
<li><p><strong>lset</strong> <key> <index> <value> 将列表 key 下标为 index 的值替换成 value</value></index></key></p>
</li>
</ol>
<h2 id="redis-集合（set）"><a href="#redis-集合（set）" class="headerlink" title="redis 集合（set）"></a>redis 集合（set）</h2><h2 id="redis-哈希（Hash）"><a href="#redis-哈希（Hash）" class="headerlink" title="redis 哈希（Hash）"></a>redis 哈希（Hash）</h2><h2 id="redis-有序集合-（Zset）"><a href="#redis-有序集合-（Zset）" class="headerlink" title="redis 有序集合 （Zset）"></a>redis 有序集合 （Zset）</h2><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><h2 id="redis-的发布和订阅"><a href="#redis-的发布和订阅" class="headerlink" title="redis 的发布和订阅"></a>redis 的发布和订阅</h2><h2 id="redis6-新数据类型"><a href="#redis6-新数据类型" class="headerlink" title="redis6 新数据类型"></a>redis6 新数据类型</h2><h2 id="spring-or-web-整合-redis6"><a href="#spring-or-web-整合-redis6" class="headerlink" title="spring or web 整合 redis6"></a>spring or web 整合 redis6</h2><h3 id="加入-Maven-依赖"><a href="#加入-Maven-依赖" class="headerlink" title="加入 Maven 依赖"></a>加入 Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--redis 的依赖包--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="连接并测试源码程序"><a href="#连接并测试源码程序" class="headerlink" title="连接并测试源码程序"></a>连接并测试源码程序</h3><ul>
<li><code>JedisDemo1.java</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建 Jedis 对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//测试是否可以连接上</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ping</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(ping);</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单元测试，操作 key</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建 Jedis 对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;wflin-Nas.local&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向 redis 里面添加</span></span><br><span class="line">        jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向 redis 里面获取东西</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置多个 key-value</span></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        jedis.mset(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">        List&lt;String&gt; values = jedis.mget(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;k2&quot;</span>, <span class="string">&quot;k3&quot;</span>);</span><br><span class="line">        System.out.println(values);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h3 id="小案例-redis-模拟手机验证码发送"><a href="#小案例-redis-模拟手机验证码发送" class="headerlink" title="小案例 redis 模拟手机验证码发送"></a>小案例 redis 模拟手机验证码发送</h3><ul>
<li><p><code>PhoneCode.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 输入手机号，点击发送后随机生成 6 位数字码，2 min有效</span></span><br><span class="line"><span class="comment"> * 2. 输入验证码，点击验证，返回成功或者失败</span></span><br><span class="line"><span class="comment"> * 3. 每个手机号每天只能输入3次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 这俩方法分开运行,好看效果</span></span><br><span class="line">        <span class="comment">// 模拟验证码的发送</span></span><br><span class="line">        verifyCode(<span class="string">&quot;1111111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行消息验证</span></span><br><span class="line">        getRedisCode(<span class="string">&quot;1111111&quot;</span>,<span class="string">&quot;998810&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 验证码的校验</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getRedisCode</span><span class="params">(String phone, String code)</span> &#123;</span><br><span class="line">        <span class="comment">//链接 redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;wflin-Nas.local&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">codeKey</span> <span class="operator">=</span> <span class="string">&quot;VerifyCode&quot;</span> + phone + <span class="string">&quot;code&quot;</span>;</span><br><span class="line">        <span class="comment">// 得到验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">redisCode</span> <span class="operator">=</span> jedis.get(codeKey);</span><br><span class="line">        <span class="comment">// 做判断</span></span><br><span class="line">        <span class="keyword">if</span> (redisCode.equals(code)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.每个手机每天只能发送三次,验证码放到 redis 中,设置过期时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">verifyCode</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="comment">//链接 redis</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;wflin-Nas.local&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接 key</span></span><br><span class="line">        <span class="comment">// 手机发送次数 key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">countKey</span> <span class="operator">=</span> <span class="string">&quot;VerifyCode&quot;</span> + phone + <span class="string">&quot;count&quot;</span>;</span><br><span class="line">        <span class="comment">// 验证码 key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codeKey</span> <span class="operator">=</span> <span class="string">&quot;VerifyCode&quot;</span> + phone + <span class="string">&quot;code&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每个手机,每天只能发送三次</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">count</span> <span class="operator">=</span> jedis.get(countKey);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有发送次数</span></span><br><span class="line">            <span class="comment">// 设置发送次数是 1</span></span><br><span class="line">            jedis.setex(countKey, <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Integer.parseInt(count) &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 发送次数+1</span></span><br><span class="line">            jedis.incr(countKey);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Integer.parseInt(count) &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;今天发送次数已经超过了3次&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把 key 和 value 放到 redis 里面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">vcode</span> <span class="operator">=</span> getCode();</span><br><span class="line">        <span class="comment">// 不切换换窗口,测试方便,直接打印</span></span><br><span class="line">        System.out.println(<span class="string">&quot;生成的验证码:&quot;</span>+vcode);</span><br><span class="line">        jedis.setex(codeKey, <span class="number">120</span>, vcode);</span><br><span class="line">        jedis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 6 位数验证码</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            code += random.nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="springboot-整合-redis6"><a href="#springboot-整合-redis6" class="headerlink" title="springboot 整合 redis6"></a>springboot 整合 redis6</h2><h3 id="加入-Maven-依赖-1"><a href="#加入-Maven-依赖-1" class="headerlink" title="加入 Maven 依赖"></a>加入 Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- redis starter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="redis6-配置类"><a href="#redis6-配置类" class="headerlink" title="redis6 配置类"></a>redis6 配置类</h3><h3 id="springboot-配置文件配置redis6"><a href="#springboot-配置文件配置redis6" class="headerlink" title="springboot 配置文件配置redis6"></a>springboot 配置文件配置redis6</h3><ul>
<li><p><code>application.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Redis服务器地址</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">&#x27;wflin-Nas.local&#x27;</span></span><br><span class="line"><span class="comment">#Redis服务器连接端口</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="attr">spring.redis.database</span>= <span class="string">0</span></span><br><span class="line"><span class="comment">#连接超时时间（毫秒）</span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">1800000</span></span><br><span class="line"><span class="comment">#连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="comment">#最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment">#连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
</li>
<li><p><code>application.yaml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">	<span class="comment"># redis IP</span></span><br><span class="line">	<span class="attr">host:</span> <span class="string">&quot;wflin-Nas.local&quot;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6389</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">connect-timeout:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="comment"># 连接池设置</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>RedisConfig.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.redis.config;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line"><span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"><span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line"><span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>RedisTestController.java</code>，连接测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置值到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//从redis获取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问 http:127.0.0.1:8080 可以访问到 lucy</p>
</li>
</ul>
<h2 id="redis-事务"><a href="#redis-事务" class="headerlink" title="redis 事务"></a>redis 事务</h2><ul>
<li><code>Redis事务</code>是一个单独的隔离操作：<code>事务中的所有命令都会序列化</code>、按<code>顺序地执行</code>。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
<li>Redis事务的主要作用就是<code>串联多个命令防止别的命令插队</code>。</li>
</ul>
<h3 id="事务成功"><a href="#事务成功" class="headerlink" title="事务成功"></a>事务成功</h3><p><img src="/hexo/2022/01/26/redis/redis/image-20220324135303964.png" alt="image-20220324135303964"></p>
<h4 id="Multi"><a href="#Multi" class="headerlink" title="Multi"></a>Multi</h4><ul>
<li>创建一个队列 Queen<ul>
<li>类似 MySQL 中的开启事务（translate）</li>
</ul>
</li>
</ul>
<h4 id="Exec"><a href="#Exec" class="headerlink" title="Exec"></a>Exec</h4><ul>
<li>提交队列<ul>
<li>类似 MySQL 中的提交事务（commit），代表事务结束</li>
</ul>
</li>
</ul>
<h4 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h4><ul>
<li>取消队列<ul>
<li>类似 MySQL中的回滚（rollback）</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k12 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set a1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set a2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; DISCARD</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<h3 id="事务失败"><a href="#事务失败" class="headerlink" title="事务失败"></a>事务失败</h3><h4 id="组队中出错"><a href="#组队中出错" class="headerlink" title="组队中出错"></a>组队中出错</h4><ul>
<li><p><code>组队中某个命令出现报告错误，执行时整个的所有队列都会被取消</code></p>
<p><img src="/hexo/2022/01/26/redis/redis/image-20220324142858758.png" alt="image-20220324142858758"></p>
</li>
<li><p>事例演示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k3</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;set&#x27; command</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="执行时出错"><a href="#执行时出错" class="headerlink" title="执行时出错"></a>执行时出错</h4><ul>
<li><p><code>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚</code></p>
<p><img src="/hexo/2022/01/26/redis/redis/image-20220324143105145.png" alt="image-20220324143105145"></p>
</li>
<li><p>实例演示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) (integer) 1</span><br><span class="line">4) OK </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="为什么要做成事务"><a href="#为什么要做成事务" class="headerlink" title="为什么要做成事务"></a>为什么要做成事务</h3><ul>
<li>有很多人有你的账户,同时去参加双十一抢购</li>
</ul>
<h3 id="事务冲突的问题"><a href="#事务冲突的问题" class="headerlink" title="事务冲突的问题"></a>事务冲突的问题</h3><ul>
<li>事例子：</li>
</ul>
<p><img src="/hexo/2022/01/26/redis/redis/image-20220417231850767.png" alt="image-20220417231850767"></p>
<h2 id="Redis-事务-秒杀案例"><a href="#Redis-事务-秒杀案例" class="headerlink" title="Redis_事务_秒杀案例"></a>Redis_事务_秒杀案例</h2><h3 id="1、解决计数器和人员记录的事务操作"><a href="#1、解决计数器和人员记录的事务操作" class="headerlink" title="1、解决计数器和人员记录的事务操作"></a>1、解决计数器和人员记录的事务操作</h3><p><img src="/hexo/2022/01/26/redis/redis/image-20220419144211964-1672285122941.png" alt="image-20220419144211964"></p>
<h3 id="2、Redis事务–秒杀并发模拟"><a href="#2、Redis事务–秒杀并发模拟" class="headerlink" title="2、Redis事务–秒杀并发模拟"></a>2、Redis事务–秒杀并发模拟</h3><h3 id="jedis秒杀实例"><a href="#jedis秒杀实例" class="headerlink" title="jedis秒杀实例"></a>jedis秒杀实例</h3><blockquote>
<p>待整理</p>
</blockquote>
<h3 id="RedisTemplate-秒杀实例"><a href="#RedisTemplate-秒杀实例" class="headerlink" title="RedisTemplate 秒杀实例"></a>RedisTemplate 秒杀实例</h3><p><a href="seckill.html" title=":include">RedisTemplate</a></p>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h4 id="悲观锁：-Pessimistic-Lock"><a href="#悲观锁：-Pessimistic-Lock" class="headerlink" title="悲观	锁：(Pessimistic Lock)"></a>悲观	锁：(Pessimistic Lock)</h4><ul>
<li><p>顾名思义，就是很悲观，<code>每次去拿数据的时候都认为别人会修改</code>，所以<code>每次在拿数据的时候都会上锁</code>，这样<code>别人想拿这个数据就会block直到它拿到锁</code>。传统的关系型数据库里边就用到了很多这种锁机制，比如<code>行锁，表锁等，读锁，写锁</code>等，都是在做操作之前先上锁。</p>
<p><img src="/hexo/2022/01/26/redis/redis/image-20220417232210268.png" alt="image-20220417232210268"></p>
</li>
</ul>
<h4 id="乐观锁-Optimistic-Lock"><a href="#乐观锁-Optimistic-Lock" class="headerlink" title="乐观锁 (Optimistic Lock)"></a>乐观锁 (Optimistic Lock)</h4><ul>
<li><p>顾名思义，就是很乐观，<code>每次去拿数据的时候都认为别人不会修改</code>，所以<code>不会上锁</code>，但是<code>在更新的时候会判断</code>一下在此期间别人有没有去更新这个数据，可以<code>使用版本号等机制</code>。<code>乐观锁适用于多读的应用类型</code>，这样可以提高吞吐量。<code>Redis就是利用这种check-and-set机制实现事务的</code>。(MybatisPlus 事务机制很像)</p>
<p><img src="/hexo/2022/01/26/redis/redis/image-20220417232444176.png" alt="image-20220417232444176"></p>
</li>
</ul>
<h4 id="watch-and-unwatch"><a href="#watch-and-unwatch" class="headerlink" title="watch and unwatch"></a>watch and unwatch</h4><ul>
<li><p>watch </p>
<ul>
<li>在<code>执行multi之前</code>，先执行<code>watch key1 [key2]</code>,可以<code>监视</code>一个(或多个) key ，<code>如果在事务执行之前这个(或这些) key 被其他命令所改动，</code>那么<code>事务将被打断</code>。</li>
</ul>
</li>
<li><p>unwatch</p>
<ul>
<li><code>取消 WATCH 命令对所有 key 的监视</code>。如果在执行WATCH 命令之后，<code>EXEC 命令或DISCARD 命令先被执行了的话</code>，那么就<code>不需要再执行UNWATCH</code> 了。</li>
</ul>
</li>
<li><p>举例子</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set ban 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch ban</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby ban 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; decrby ban 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec</span><br><span class="line">1) (integer) 110</span><br><span class="line">2) (integer) 90</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; get ban</span><br><span class="line">&quot;90&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="redis-事务的特性"><a href="#redis-事务的特性" class="headerlink" title="redis 事务的特性"></a>redis 事务的特性</h3><ul>
<li>单独的隔离操作<ul>
<li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
</ul>
</li>
<li>没有隔离级别的概念<ul>
<li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li>
</ul>
</li>
<li>不保证原子性<ul>
<li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li>
</ul>
</li>
</ul>
<h2 id="Redis-通过-mybatis-做二级缓存"><a href="#Redis-通过-mybatis-做二级缓存" class="headerlink" title="Redis 通过 mybatis 做二级缓存"></a>Redis 通过 mybatis 做二级缓存</h2><h3 id="开启-mybatis-的二级缓存"><a href="#开启-mybatis-的二级缓存" class="headerlink" title="开启 mybatis 的二级缓存"></a>开启 mybatis 的二级缓存</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;rediscache.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--开启mybatis的二级缓存--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type 是缓存的设置位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;rediscache.cache.RedisCache&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-ApplicationContextUtils-工具类获取-redisTemplate-对象"><a href="#创建-ApplicationContextUtils-工具类获取-redisTemplate-对象" class="headerlink" title="创建 ApplicationContextUtils 工具类获取 redisTemplate 对象"></a>创建 ApplicationContextUtils 工具类获取 redisTemplate 对象</h3><p>* </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextUtils</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContex)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        applicationContext = applicationContex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="创建-Redis-cache-类并继承-mybatisCache-重写里面的方法"><a href="#创建-Redis-cache-类并继承-mybatisCache-重写里面的方法" class="headerlink" title="创建 Redis cache 类并继承 mybatisCache 重写里面的方法"></a>创建 Redis cache 类并继承 mybatisCache 重写里面的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span> <span class="keyword">implements</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisCache</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ReadWriteLock <span class="title function_">getReadWriteLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 放缓存,最好设置一下过期时间</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object o, Object o1)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取缓存</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRedisTemlate().opsForHash().get(id.toString(),fetKeyToMd5(o.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不用实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">removeObject</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;移除数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空缓存</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;清空数据&quot;</span>);</span><br><span class="line">        getRedisTemlate().delete(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算缓存大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过工厂获得 RedisTeplate 的实例</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate <span class="title function_">getRedisTemlate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> (RedisTemplate) ApplicationContextUtils.getBean(<span class="string">&quot;redisTemplate&quot;</span>);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//封装对 key 进行 md5 处理的方法</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">fetKeyToMd5</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.md5DigestAsHex(key.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="搭建-redis-主从复制"><a href="#搭建-redis-主从复制" class="headerlink" title="搭建 redis 主从复制"></a>搭建 redis 主从复制</h2><ul>
<li>因为我是使用 docker 搭建的 redis 所以就需要去 redis 官网下载 redis.conf 文件，我下载下来了，下载过程略</li>
</ul>
<ol>
<li><p>更改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置文件中的 daemonize 改为 no</span></span><br><span class="line">daemonize  no</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭 aof 持久化</span></span><br><span class="line">appendonly no</span><br></pre></td></tr></table></figure>


</li>
<li><p>编写三个配置文件</p>
<ul>
<li><p>redis6379.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">include /redis.conf #[绝对路径]</span><br><span class="line">pidfile /var/run/redis6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br></pre></td></tr></table></figure>


</li>
<li><p>redis6380.conf</p>
</li>
<li><p>redis6381.conf <code>(这俩配置文件书写格式和上面那个一样，只是pid，和 port 更换了)</code></p>
</li>
</ul>
</li>
<li><p>启动 redis</p>
<blockquote>
<p>redis-server  配置文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis/redis6379.conf</span><br><span class="line">redis-server /etc/redis/redis6380.conf</span><br><span class="line">redis-server /etc/redis/redis6381.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接 redis </p>
<blockquote>
<p>redis-cli [host] -p port </p>
<p>例如 ：redis-cli -p 6379 </p>
</blockquote>
</li>
<li><p>设置 <code>master [主机]</code> 和  <code>salve</code>,【没设置时全是主服务器】</p>
<ul>
<li><p><strong>info replication</strong> 查看是主机还是从机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:806dd36b7fd33288b2271d076e015ee143e872ce</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>

<p>​	</p>
</li>
<li><p><strong>slaveof <ip> <port></port></ip></strong> 成为 host &#x3D; ip，端口为 port 的从机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@87c630d733ee:~# redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前 redis 的主从信息</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:`slave&#x27;</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:7</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:28</span><br><span class="line">slave_repl_offset:28</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:300e89aa27a8f1c79079fdbfbc659595f57ffed5</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:28</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:28</span><br><span class="line">127.0.0.1:6380&gt; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拥有 从机之后 主机信息</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1 # 显示了一个从机信息</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=266,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:300e89aa27a8f1c79079fdbfbc659595f57ffed5</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:266</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:266</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p>全部加入后 主机信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=812,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=812,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:300e89aa27a8f1c79079fdbfbc659595f57ffed5</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:812</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:812</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h3><ul>
<li>注意：当一个从机挂掉之后，重启会变成主机，需要重新设置为从机才行</li>
<li>当主机挂掉之后，从机不会变为主机，当主机重启之后还是其他从机的主机</li>
</ul>
<h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><ul>
<li>Slave启动成功连接到master后会发送一个sync<code>(数据同步的消息)</code>命令</li>
<li>Master接到命令启动后台的存盘进程<code>（持久化）</code>，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步<code>（完成复制）</code></li>
<li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>
<li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li>
<li>但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</li>
<li><img src="/hexo/2022/01/26/redis/redis/image-20220419222150752.png" alt="image-20220419222150752"></li>
</ul>
<h3 id="薪伙相传"><a href="#薪伙相传" class="headerlink" title="薪伙相传"></a>薪伙相传</h3><ul>
<li>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</li>
<li>传递性，有一主二从的特点，不会上位，优点去中心化</li>
</ul>
<h3 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h3><ul>
<li>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</li>
<li>用slaveof no one 将从机变为主机。</li>
<li>缺点要把在从机上<code>手动设置</code>不是自动过程。<code>哨兵模式可以自动切换</code></li>
</ul>
<h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><ul>
<li><p><code>反客为主的自动版</code>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>
</li>
<li><p>在一主二从的模式下使用</p>
</li>
</ul>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li><p>自定义的&#x2F;myredis目录下新建 <strong>sentinel.conf</strong> 文件，<code>名字绝不能错</code>。</p>
<ul>
<li><p>sectinel.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动哨兵</p>
</li>
<li><p><code>redis-sentinel /etc/redis/sentinel.conf </code></p>
</li>
<li><pre><code class="shell">root@87c630d733ee:~# redis-sentinel /etc/redis/sentinel.conf 
449:X 19 Apr 2022 14:41:15.067 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
449:X 19 Apr 2022 14:41:15.067 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=449, just started
449:X 19 Apr 2022 14:41:15.067 # Configuration loaded
449:X 19 Apr 2022 14:41:15.067 * monotonic clock: POSIX clock_gettime
                _._                                                  
           _.-``__ &#39;&#39;-._                                             
      _.-``    `.  `_.  &#39;&#39;-._           Redis 6.2.6 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ &#39;&#39;-._                                  
 (    &#39;      ,       .-`  | `,    )     Running in sentinel mode
 |`-._`-...-` __...-.``-._|&#39;` _.-&#39;|     Port: 26379
 |    `-._   `._    /     _.-&#39;    |     PID: 449
  `-._    `-._  `-./  _.-&#39;    _.-&#39;                                   
 |`-._`-._    `-.__.-&#39;    _.-&#39;_.-&#39;|                                  
 |    `-._`-._        _.-&#39;_.-&#39;    |           https://redis.io       
  `-._    `-._`-.__.-&#39;_.-&#39;    _.-&#39;                                   
 |`-._`-._    `-.__.-&#39;    _.-&#39;_.-&#39;|                                  
 |    `-._`-._        _.-&#39;_.-&#39;    |                                  
  `-._    `-._`-.__.-&#39;_.-&#39;    _.-&#39;                                   
      `-._    `-.__.-&#39;    _.-&#39;                                       
          `-._        _.-&#39;                                           
              `-.__.-&#39;                                               

449:X 19 Apr 2022 14:41:15.068 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
449:X 19 Apr 2022 14:41:15.071 # Sentinel ID is ac8525ead4acf2c39c82986dfa0594aefa5a9852
449:X 19 Apr 2022 14:41:15.071 # +monitor master mymaster 127.0.0.1 6379 quorum 1
449:X 19 Apr 2022 14:41:15.072 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379
449:X 19 Apr 2022 14:41:15.081 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. &gt;使用 `shutdown` 把主机搞挂</span><br><span class="line"></span><br><span class="line">   ```shell</span><br><span class="line">    127.0.0.1:6379&gt; shutdown</span><br><span class="line">   not connected&gt; exit</span><br><span class="line">   root@87c630d733ee:~# ^C</span><br><span class="line">   root@87c630d733ee:~# </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><blockquote>
<p>哨兵选举新的主机</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">462:X 19 Apr 2022 14:45:18.261 # +failover-end master mymaster 127.0.0.1 6379</span><br><span class="line">462:X 19 Apr 2022 14:45:18.261 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span><br><span class="line">462:X 19 Apr 2022 14:45:18.261 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380</span><br><span class="line">462:X 19 Apr 2022 14:45:18.261 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class="line">462:X 19 Apr 2022 14:45:48.307 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">哨兵显示 端口 6380 的成了新的主机</span></span><br></pre></td></tr></table></figure>


</li>
<li><blockquote>
<p>查看 6380 和 6381 的信息</p>
</blockquote>
<ul>
<li><p><strong>6381</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:44847</span><br><span class="line">slave_repl_offset:44847</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:2bb32d28437d5ef70f5c79a78a851573ea8ed624</span><br><span class="line">master_replid2:300e89aa27a8f1c79079fdbfbc659595f57ffed5</span><br><span class="line">master_repl_offset:44847</span><br><span class="line">second_repl_offset:17119</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:799</span><br><span class="line">repl_backlog_histlen:44049</span><br><span class="line">127.0.0.1:6381&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>6380</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@87c630d733ee:~# redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=49999,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:2bb32d28437d5ef70f5c79a78a851573ea8ed624</span><br><span class="line">master_replid2:300e89aa27a8f1c79079fdbfbc659595f57ffed5</span><br><span class="line">master_repl_offset:49999</span><br><span class="line">second_repl_offset:17119</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:49999</span><br><span class="line">127.0.0.1:6380&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><blockquote>
<p>结果显示 6380 变成新的主机</p>
</blockquote>
</li>
<li><blockquote>
<p>当再次启动开始的主机 6379</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@87c630d733ee:~# redis-server /etc/redis/redis6379.conf </span><br><span class="line">root@87c630d733ee:~# redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:59675</span><br><span class="line">slave_repl_offset:59675</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:2bb32d28437d5ef70f5c79a78a851573ea8ed624</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:59675</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:58974</span><br><span class="line">repl_backlog_histlen:702</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>
</li>
<li><blockquote>
<p>结果显示 原来的主机再次启动之后变成了 现在主机的从机</p>
</blockquote>
</li>
<li><blockquote>
<p>哨兵算法策略</p>
</blockquote>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">优先级在redis.conf中默认：【版本不同可能这个名字不同】slave-priority 100，值越小优先级越高</span><br><span class="line">偏移量是指获得原主机数据最全的</span><br><span class="line">每个redis实例启动后都会随机生成一个40位的runid</span><br></pre></td></tr></table></figure>

<p><img src="/hexo/2022/01/26/redis/redis/image-20220419230223477.png" alt="image-20220419230223477">	</p>
</li>
<li><blockquote>
<p>java 代码中使用哨兵主从</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> JedisSentinelPool jedisSentinelPool=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedisFromSentinel</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(jedisSentinelPool==<span class="literal">null</span>)&#123;</span><br><span class="line">        Set&lt;String&gt; sentinelSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(); sentinelSet.add(<span class="string">&quot;IP:26379&quot;</span>); <span class="comment">// 哨兵端口</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//最大可用连接数 jedisPoolConfig.setMaxIdle(5);</span></span><br><span class="line">        <span class="comment">// 最大闲置连接数 jedisPoolConfig.setMinIdle(5);</span></span><br><span class="line">        <span class="comment">// 最小闲置连接数 jedisPoolConfig.setBlockWhenExhausted(true);</span></span><br><span class="line">        <span class="comment">// 连接耗尽是否等待 jedisPoolConfig.setMaxWaitMillis(2000);</span></span><br><span class="line">        <span class="comment">// 等待时间 jedisPoolConfig.setTestOnBorrow(true);</span></span><br><span class="line">        <span class="comment">// 取连接的时候进行一下测试 ping pong jedisSentinelPool=new JedisSentinelPool(&quot;mymaster&quot;,sentinelSet,jedisPoolConfig);</span></span><br><span class="line">        <span class="comment">// return jedisSentinelPool.getResource();</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisSentinelPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="主从复制的缺点"><a href="#主从复制的缺点" class="headerlink" title="主从复制的缺点"></a>主从复制的缺点</h2><p><code>复制延时</code>:由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p>
<h2 id="redis-集群"><a href="#redis-集群" class="headerlink" title="redis 集群"></a>redis 集群</h2><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><ol>
<li>容量不够，redis 扩容</li>
<li>并发写操作，redis 集群降低单个压力</li>
<li>主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</li>
</ol>
<h3 id="redis-3-0-之前"><a href="#redis-3-0-之前" class="headerlink" title="redis 3.0 之前"></a>redis 3.0 之前</h3><ul>
<li>之前通过代理主机来解决，但是redis3.0中提供了解决方案。就是<code>无中心化集群</code>配置。</li>
</ul>
<h3 id="什么是-redis-集群"><a href="#什么是-redis-集群" class="headerlink" title="什么是 redis 集群"></a>什么是 redis 集群</h3><ul>
<li>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1&#x2F;N。</li>
<li>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>noSQL</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>java</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>restful</title>
    <url>/hexo/2022/03/24/restful/</url>
    <content><![CDATA[<h2 id="restful"><a href="#restful" class="headerlink" title="restful"></a>restful</h2><ol>
<li><p>请求方法原则</p>
<ul>
<li><p>get （查询）</p>
</li>
<li><pre><code> post （添加）
</code></pre>
</li>
<li><pre><code> put （全字段更新）
</code></pre>
</li>
<li><pre><code> patch（更新部分字段）
</code></pre>
</li>
<li><pre><code> delete (删除)
</code></pre>
</li>
</ul>
</li>
<li><p>使用复数名词 </p>
<ul>
<li>user &#x3D;&#x3D;&gt; users </li>
<li>car &#x3D;&#x3D;&#x3D; &gt;cars </li>
<li>product &#x3D;&#x3D; &gt;products</li>
</ul>
</li>
<li><p>请求和响应时候指定 </p>
<ul>
<li>accpect：@RequestBody  </li>
<li>reponse：@ResponseBody</li>
</ul>
</li>
<li><p>资源唯一标识在通过参数传递时使用路径传参 </p>
<ul>
<li>url?id&#x3D;21 &#x3D;&#x3D;&#x3D;&#x3D;&gt; url&#x2F;21</li>
<li>排序？sort&#x3D;name</li>
<li>分页？page&#x3D;1</li>
</ul>
</li>
</ol>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * restful：</span><br><span class="line"> *  1. 原则：</span><br><span class="line"> *      1. get （查询）</span><br><span class="line"> *      2. post （添加）</span><br><span class="line"> *      3. put （全字段更新）</span><br><span class="line"> *      4. patch（更新部分字段）</span><br><span class="line"> *      5. delete (删除)</span><br><span class="line"> * 2. 使用复数名词 user==&gt;users car===&gt;cars product==&gt;products</span><br><span class="line"> * 3.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>javaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>rt-thread</title>
    <url>/hexo/2023/10/09/rt-thread/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>rt-thread</category>
      </categories>
      <tags>
        <tag>rt-thread</tag>
      </tags>
  </entry>
  <entry>
    <title>shell</title>
    <url>/hexo/2023/11/09/shell/</url>
    <content><![CDATA[<p>推荐阅读：</p>
<h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><h3 id="if"><a href="#if" class="headerlink" title="if []"></a>if []</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line">if [ condition ] </span><br><span class="line">then </span><br><span class="line"> commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="test命令的数值比较功能"><a href="#test命令的数值比较功能" class="headerlink" title="test命令的数值比较功能"></a><strong>test</strong>命令的数值比较功能</h3><table>
<thead>
<tr>
<th align="center">比较</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">n1 -eq n2</td>
<td align="center">检查n1是否与n2相等</td>
</tr>
<tr>
<td align="center">n1 -ge n2</td>
<td align="center">检查n1是否大于或等于n2</td>
</tr>
<tr>
<td align="center">n1 -gt n2</td>
<td align="center">检查n1是否大于n2</td>
</tr>
<tr>
<td align="center">n1 -le n2</td>
<td align="center">检查n1是否小于或等于n2</td>
</tr>
<tr>
<td align="center">n1 -lt n2</td>
<td align="center">检查n1是否小于n2</td>
</tr>
<tr>
<td align="center">n1 -ne n2</td>
<td align="center">检查n1是否不等于n2</td>
</tr>
</tbody></table>
<h3 id="字符串比较测试"><a href="#字符串比较测试" class="headerlink" title="字符串比较测试"></a>字符串比较测试</h3><table>
<thead>
<tr>
<th>str1 &#x3D; str2</th>
<th>检查str1是否和str2相同</th>
</tr>
</thead>
<tbody><tr>
<td>str1 !&#x3D; str2</td>
<td>检查str1是否和str2不同</td>
</tr>
<tr>
<td>str1 &lt; str2</td>
<td>检查str1是否比str2小</td>
</tr>
<tr>
<td>str1 &gt; str2</td>
<td>检查str1是否比str2大</td>
</tr>
<tr>
<td>-n str1</td>
<td>检查str1的长度是否非0</td>
</tr>
<tr>
<td>-z str1</td>
<td>检查str1的长度是否为</td>
</tr>
</tbody></table>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul>
<li><p>test7.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">testing string equality</span> </span><br><span class="line">testuser=rich </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ <span class="variable">$USER</span> = <span class="variable">$testuser</span> ]</span> </span><br><span class="line">then </span><br><span class="line"> echo &quot;Welcome $testuser&quot; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</li>
<li><p>test8.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">testing string equality</span> </span><br><span class="line">testuser=baduser </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ <span class="variable">$USER</span> != <span class="variable">$testuser</span> ]</span> </span><br><span class="line">then </span><br><span class="line"> echo &quot;This is not $testuser&quot; </span><br><span class="line">else </span><br><span class="line"> echo &quot;Welcome $testuser&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>要测试一个字符串是否比另一个字符串大就是麻烦的开始。当要开始使用测试条件的大于或小于功能时，就会出现两个经常困扰shell程序员的问题： </li>
<li>大于号和小于号必须转义，否则shell会把它们当作重定向符号，把字符串值当作文件名；</li>
<li>大于和小于顺序和sort命令所采用的不同。</li>
<li>在编写脚本时，第一条可能会导致一个不易察觉的严重问题。下面的例子展示了shell脚本编程初学者时常碰到的问题。</li>
</ul>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><ul>
<li><pre><code class="shell">#!/bin/bash 
# mis-using string comparisons 
# 
val1=baseball 
val2=hockey 
# 
if [ $val1 &gt; $val2 ] 
then 
 echo &quot;$val1 is greater than $val2&quot; 
else 
 echo &quot;$val1 is less than $val2&quot; 
fi
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* test9.sh</span><br><span class="line"></span><br><span class="line">  ```shell</span><br><span class="line">  #!/bin/bash </span><br><span class="line">  # mis-using string comparisons </span><br><span class="line">  # </span><br><span class="line">  val1=baseball </span><br><span class="line">  val2=hockey </span><br><span class="line">  # </span><br><span class="line">  if [ $val1 \&gt; $val2 ]</span><br><span class="line">  then </span><br><span class="line">   echo &quot;$val1 is greater than $val2&quot; </span><br><span class="line">  else </span><br><span class="line">   echo &quot;$val1 is less than $val2&quot; </span><br><span class="line">  fi</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h2 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h2><h3 id="test-命令的文件比较功能"><a href="#test-命令的文件比较功能" class="headerlink" title="test 命令的文件比较功能"></a>test 命令的文件比较功能</h3><table>
<thead>
<tr>
<th>比较</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-d file</td>
<td>检查file是否存在并是一个目录</td>
</tr>
<tr>
<td>-e file</td>
<td>检查file是否存在</td>
</tr>
<tr>
<td>-f file</td>
<td>检查file是否存在并是一个文件</td>
</tr>
<tr>
<td>-r file</td>
<td>检查file是否存在并可读</td>
</tr>
<tr>
<td>-s file</td>
<td>检查file是否存在并非空</td>
</tr>
<tr>
<td>-w file</td>
<td>检查file是否存在并可写</td>
</tr>
<tr>
<td>-x file</td>
<td>检查file是否存在并可执行</td>
</tr>
<tr>
<td>-O file</td>
<td>检查file是否存在并属当前用户所有</td>
</tr>
<tr>
<td>-G file</td>
<td>检查file是否存在并且默认组与当前用户相同</td>
</tr>
<tr>
<td>file1 -ot file2</td>
<td>检查file1是否比file2旧</td>
</tr>
<tr>
<td>file1 -nt file2</td>
<td>检查file1是否比file2新</td>
</tr>
</tbody></table>
<h3 id="案例模板"><a href="#案例模板" class="headerlink" title="案例模板"></a>案例模板</h3><h4 id="检查目录"><a href="#检查目录" class="headerlink" title="检查目录"></a>检查目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Look before you leap</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">jump_directory=/home/arthur</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ -d <span class="variable">$jump_directory</span> ]</span> </span><br><span class="line">then </span><br><span class="line"> echo &quot;The $jump_directory directory exists&quot; </span><br><span class="line"> cd $jump_directory </span><br><span class="line"> ls </span><br><span class="line">else </span><br><span class="line"> echo &quot;The $jump_directory directory does not exist&quot; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h4 id="检查对象是否存在"><a href="#检查对象是否存在" class="headerlink" title="检查对象是否存在"></a>检查对象是否存在</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check <span class="keyword">if</span> either a directory or file exists</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">location=<span class="variable">$HOME</span></span> </span><br><span class="line">file_name=&quot;sentinel&quot; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ -e <span class="variable">$location</span> ]</span> </span><br><span class="line">then #Directory does exist </span><br><span class="line"> echo &quot;OK on the $location directory.&quot; </span><br><span class="line"> echo &quot;Now checking on the file, $file_name.&quot; </span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"> <span class="keyword">if</span> [ -e <span class="variable">$location</span>/<span class="variable">$file_name</span> ]</span> </span><br><span class="line"> then #File does exist </span><br><span class="line"> echo &quot;OK on the filename&quot; </span><br><span class="line"> echo &quot;Updating Current Date...&quot; </span><br><span class="line"> date &gt;&gt; $location/$file_name </span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"> <span class="keyword">else</span> <span class="comment">#File does not exist</span></span> </span><br><span class="line"> echo &quot;File does not exist&quot; </span><br><span class="line"> echo &quot;Nothing to update&quot; </span><br><span class="line"> fi </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">else</span> <span class="comment">#Directory does not exist</span></span> </span><br><span class="line"> echo &quot;The $location directory does not exist.&quot; </span><br><span class="line"> echo &quot;Nothing to update&quot; </span><br><span class="line">fi </span><br><span class="line"><span class="meta prompt_">#</span></span><br></pre></td></tr></table></figure>

<h4 id="检查文件"><a href="#检查文件" class="headerlink" title="检查文件"></a>检查文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check <span class="keyword">if</span> either a directory or file exists</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">item_name=<span class="variable">$HOME</span></span> </span><br><span class="line">echo </span><br><span class="line">echo &quot;The item being checked: $item_name&quot; </span><br><span class="line">echo </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ -e <span class="variable">$item_name</span> ]</span> </span><br><span class="line">then #Item does exist </span><br><span class="line"> echo &quot;The item, $item_name, does exist.&quot; </span><br><span class="line"> echo &quot;But is it a file?&quot; </span><br><span class="line"> echo </span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"> <span class="keyword">if</span> [ -f <span class="variable">$item_name</span> ]</span> </span><br><span class="line"> then #Item is a file </span><br><span class="line"> echo &quot;Yes, $item_name is a file.&quot; </span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"> <span class="keyword">else</span> <span class="comment">#Item is not a file</span></span> </span><br><span class="line"> echo &quot;No, $item_name is not a file.&quot; </span><br><span class="line"> fi </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">else</span> <span class="comment">#Item does not exist</span></span> </span><br><span class="line"> echo &quot;The item, $item_name, does not exist.&quot; </span><br><span class="line"> echo &quot;Nothing to update&quot; </span><br><span class="line">fi </span><br><span class="line"><span class="meta prompt_">#</span></span><br></pre></td></tr></table></figure>

<h4 id="检查是否可读"><a href="#检查是否可读" class="headerlink" title="检查是否可读"></a>检查是否可读</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">testing <span class="keyword">if</span> you can <span class="built_in">read</span> a file</span> </span><br><span class="line">pwfile=/etc/shadow </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># first, test if the file exists, and is a file</span></span> </span><br><span class="line">if [ -f $pwfile ] </span><br><span class="line">then </span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">now <span class="built_in">test</span> <span class="keyword">if</span> you can <span class="built_in">read</span> it</span> </span><br><span class="line"> if [ -r $pwfile ] </span><br><span class="line"> then </span><br><span class="line"> tail $pwfile </span><br><span class="line"> else </span><br><span class="line"> echo &quot;Sorry, I am unable to read the $pwfile file&quot; </span><br><span class="line"> fi </span><br><span class="line">else </span><br><span class="line"> echo &quot;Sorry, the file $file does not exist&quot; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h4 id="检查空文件"><a href="#检查空文件" class="headerlink" title="检查空文件"></a>检查空文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Testing <span class="keyword">if</span> a file is empty</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">file_name=<span class="variable">$HOME</span>/sentinel</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ -f <span class="variable">$file_name</span> ]</span> </span><br><span class="line">then </span><br><span class="line"> if [ -s $file_name ] </span><br><span class="line"> then </span><br><span class="line"> echo &quot;The $file_name file exists and has data in it.&quot; </span><br><span class="line"> echo &quot;Will not remove this file.&quot; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"> <span class="keyword">else</span></span> </span><br><span class="line"> echo &quot;The $file_name file exists, but is empty.&quot; </span><br><span class="line"> echo &quot;Deleting empty file...&quot; </span><br><span class="line"> rm $file_name </span><br><span class="line"> fi </span><br><span class="line">else </span><br><span class="line"> echo &quot;File, $file_name, does not exist.&quot; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h4 id="检查是否可写"><a href="#检查是否可写" class="headerlink" title="检查是否可写"></a>检查是否可写</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check <span class="keyword">if</span> a file is writable.</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">item_name=<span class="variable">$HOME</span>/sentinel</span> </span><br><span class="line">echo </span><br><span class="line">echo &quot;The item being checked: $item_name&quot; </span><br><span class="line">echo</span><br><span class="line"> echo &quot;Yes, $item_name is a file.&quot; </span><br><span class="line"> echo &quot;But is it writable?&quot; </span><br><span class="line"> echo </span><br><span class="line"> [...]</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"> <span class="keyword">if</span> [ -w <span class="variable">$item_name</span> ]</span> </span><br><span class="line"> then #Item is writable </span><br><span class="line"> echo &quot;Writing current time to $item_name&quot; </span><br><span class="line"> date +%H%M &gt;&gt; $item_name </span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"> <span class="keyword">else</span> <span class="comment">#Item is not writable</span></span> </span><br><span class="line"> echo &quot;Unable to write to $item_name&quot; </span><br><span class="line"> fi </span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"> <span class="keyword">else</span> <span class="comment">#Item is not a file</span></span> </span><br><span class="line"> echo &quot;No, $item_name is not a file.&quot; </span><br><span class="line"> fi</span><br><span class="line"> [...]</span><br></pre></td></tr></table></figure>

<h4 id="检查文件是否可以执行"><a href="#检查文件是否可以执行" class="headerlink" title="检查文件是否可以执行"></a>检查文件是否可以执行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">testing file execution</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ -x test16.sh ]</span> </span><br><span class="line">then </span><br><span class="line"> echo &quot;You can run the script: &quot; </span><br><span class="line"> ./test16.sh </span><br><span class="line">else </span><br><span class="line"> echo &quot;Sorry, you are unable to execute the script&quot; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h4 id="检查所属关系"><a href="#检查所属关系" class="headerlink" title="检查所属关系"></a>检查所属关系</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check file ownership</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ -O /etc/passwd ]</span> </span><br><span class="line">then </span><br><span class="line"> echo &quot;You are the owner of the /etc/passwd file&quot;</span><br><span class="line">else </span><br><span class="line"> echo &quot;Sorry, you are not the owner of the /etc/passwd file&quot; </span><br><span class="line">fi </span><br></pre></td></tr></table></figure>

<h4 id="检查默认属组关系"><a href="#检查默认属组关系" class="headerlink" title="检查默认属组关系"></a>检查默认属组关系</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check file group <span class="built_in">test</span></span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">if</span> [ -G <span class="variable">$HOME</span>/testing ]</span> </span><br><span class="line">then </span><br><span class="line"> echo &quot;You are in the same group as the file&quot; </span><br><span class="line">else </span><br><span class="line"> echo &quot;The file is not owned by your group&quot; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="case-命令"><a href="#case-命令" class="headerlink" title="case 命令"></a><strong>case</strong> 命令</h2><p><strong>语法</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case variable in </span><br><span class="line">pattern1 | pattern2) commands1;; </span><br><span class="line">pattern3) commands2;; </span><br><span class="line">*) default commands;; </span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p><strong>解释</strong>：case命令会将指定的变量与不同模式进行比较。如果变量和模式是匹配的，那么shell会执行为该模式指定的命令。可以通过竖线操作符在一行中分隔出多个模式模式。星号会捕获所有与已知模式不匹配的值。这里有个将if-then-else程序转换成用case命令的例子</p>
<h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">using the <span class="keyword">case</span> <span class="built_in">command</span></span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="keyword">case</span> <span class="variable">$USER</span> <span class="keyword">in</span></span> </span><br><span class="line">rich | barbara) </span><br><span class="line"> echo &quot;Welcome, $USER&quot; </span><br><span class="line"> echo &quot;Please enjoy your visit&quot;;; </span><br><span class="line">testing) </span><br><span class="line"> echo &quot;Special testing account&quot;;; </span><br><span class="line">jessica) </span><br><span class="line"> echo &quot;Do not forget to log off when you&#x27;re done&quot;;; </span><br><span class="line">*) </span><br><span class="line"> echo &quot;Sorry, you are not allowed here&quot;;; </span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>samba</title>
    <url>/hexo/2023/06/09/smba/</url>
    <content><![CDATA[<h1 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h1><blockquote>
<p>sudo apt-get install samba</p>
</blockquote>
<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><blockquote>
<p>sudo nano &#x2F;etc&#x2F;samba&#x2F;smb.conf</p>
</blockquote>
<p>向文件末尾添加内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ubuntu] #标识随便起，只要不和上面重名</span><br><span class="line">	commen = ubuntu # 服务的名字</span><br><span class="line">	path = /home/ubuntu #共享路径</span><br><span class="line">	writable = yes #提供写的权限（一般这个就够了） </span><br><span class="line">	valid user = ubuntu #路径所属用户（我是用当前用户就叫 ubuntu ，所以我写这个）</span><br><span class="line">	create mask = 0777 #设置这个文件夹的权限</span><br></pre></td></tr></table></figure>



<p>重启程序</p>
<blockquote>
<p>sudo &#x2F;etc&#x2F;init.d&#x2F;smbd restart</p>
</blockquote>
<p>集合</p>
<blockquote>
<p>sudo apt-get install samba</p>
<p>sudo smbpasswd -a ubuntu</p>
<p>[ubuntu]<br>commen &#x3D; ubuntu<br>path &#x3D; &#x2F;home&#x2F;ubuntu<br>writable &#x3D; yes<br>valid user &#x3D; ubuntu<br>create mask &#x3D; 0777</p>
<p>sudo &#x2F;etc&#x2F;init.d&#x2F;smbd restart</p>
</blockquote>
<h1 id="连接samba"><a href="#连接samba" class="headerlink" title="连接samba"></a>连接samba</h1><ul>
<li><p>win+r 输入ip</p>
<blockquote>
<p>&#x2F;&#x2F;:ip</p>
</blockquote>
</li>
<li><p>这时候会弹出认证界面，然后你输入用户名和密码后会发现拒绝连接，是因为 samba 的服务的认证不是走的 ubuntu 用户名和密码这一套，是它自己，但是在刚刚的过程中好向我们并没有设置密码的相关操作。</p>
</li>
</ul>
<h1 id="设置samba密码"><a href="#设置samba密码" class="headerlink" title="设置samba密码"></a>设置samba密码</h1><ul>
<li><blockquote>
<p>sudo smbpasswd -a ubuntu #刚刚配置的 samba 的用户名</p>
</blockquote>
</li>
<li><p>两次输入密码后就可以正常连接和使用了</p>
</li>
</ul>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>如果开启了防火墙的情况下需要放行端口</li>
<li>tcp<ul>
<li>139</li>
<li>445</li>
</ul>
</li>
<li>udp<ul>
<li>137</li>
<li>138</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>iot</tag>
      </tags>
  </entry>
  <entry>
    <title>socket-tcp详解</title>
    <url>/hexo/2023/09/30/socket-tcp/</url>
    <content><![CDATA[<h1 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h1><p><strong>引言</strong>：就是平时开发的时候就基本单纯调库，对于底层怎么做的感知不是很多，然后有时候在编写网络编程的时候遇到一些<code>玄学</code>问题【特别是数据传输过程中出现问题】得到更好的方法和方向，然后就是尝试自己编写一个网络协议栈</p>
<p><img src="/hexo/2023/09/30/socket-tcp/socket-tcp/image-20231016010415292.png"></p>
<h2 id="osi七层模型"><a href="#osi七层模型" class="headerlink" title="osi七层模型"></a>osi七层模型</h2><ul>
<li>物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</li>
</ul>
<h2 id="tcp-ip四层模型"><a href="#tcp-ip四层模型" class="headerlink" title="tcp&#x2F;ip四层模型"></a>tcp&#x2F;ip四层模型</h2><ul>
<li>数据链路层、网络层、传输层、应用层</li>
</ul>
<h2 id="tcp-ip五层模型"><a href="#tcp-ip五层模型" class="headerlink" title="tcp&#x2F;ip五层模型"></a>tcp&#x2F;ip五层模型</h2><ul>
<li>物理层 + <code>tcp/ip四层</code></li>
</ul>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>tcp</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot-tools</title>
    <url>/hexo/2023/03/05/springboot-tools/</url>
    <content><![CDATA[<h1 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h1><h2 id="清除本地仓库的坏包"><a href="#清除本地仓库的坏包" class="headerlink" title="清除本地仓库的坏包"></a>清除本地仓库的坏包</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列出File的一些常用操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">util</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历指定目录下（包括其子目录）的所有文件，并删除以 lastUpdated 结尾的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir 目录的位置 path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listDirectory</span><span class="params">(File dir)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;目录：&quot;</span> + dir + <span class="string">&quot;不存在.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!dir.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(dir + <span class="string">&quot; 不是目录。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.isDirectory())</span><br><span class="line">                    <span class="comment">//递归</span></span><br><span class="line">                    listDirectory(file);</span><br><span class="line">                <span class="keyword">else</span>&#123; <span class="comment">// 删除以 lastUpdated 结尾的文件</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getName();</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLastupdated</span> <span class="operator">=</span> fileName.toLowerCase().endsWith(<span class="string">&quot;lastupdated&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (isLastupdated)&#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">is_delete</span> <span class="operator">=</span> file.delete();</span><br><span class="line">                        System.out.println(<span class="string">&quot;删除的文件名 =&gt; &quot;</span> + file.getName() + <span class="string">&quot;  || 是否删除成功？ ==&gt; &quot;</span> + is_delete);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 指定maven的本地仓库路径</span></span><br><span class="line">        listDirectory(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="boot"><a href="#boot" class="headerlink" title="boot"></a>boot</h2><h3 id="spirngboot"><a href="#spirngboot" class="headerlink" title="spirngboot"></a>spirngboot</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">boot.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">boot.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="springtest"><a href="#springtest" class="headerlink" title="springtest"></a>springtest</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h3 id="mysql-5"><a href="#mysql-5" class="headerlink" title="mysql-5"></a>mysql-5</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mysql-8"><a href="#mysql-8" class="headerlink" title="mysql-8"></a>mysql-8</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="druid"><a href="#druid" class="headerlink" title="druid"></a>druid</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="junit"><a href="#junit" class="headerlink" title="junit"></a>junit</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="fastJosn2"><a href="#fastJosn2" class="headerlink" title="fastJosn2"></a>fastJosn2</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="mybatis相关"><a href="#mybatis相关" class="headerlink" title="mybatis相关"></a>mybatis相关</h2><h3 id="mybatis-plus"><a href="#mybatis-plus" class="headerlink" title="mybatis-plus"></a>mybatis-plus</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.json/json --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>20180130<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="hutools"><a href="#hutools" class="headerlink" title="hutools"></a>hutools</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--hutool--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-registry-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zookeeper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud整合zookeeper客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先排除自带的zookeeper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="alibaba-组件"><a href="#alibaba-组件" class="headerlink" title="alibaba 组件"></a>alibaba 组件</h2><h3 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.nacos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="mysql-1"><a href="#mysql-1" class="headerlink" title="mysql"></a>mysql</h2><h3 id="mysql-8-1"><a href="#mysql-8-1" class="headerlink" title="mysql 8"></a>mysql 8</h3><h4 id="连接配置"><a href="#连接配置" class="headerlink" title="连接配置"></a>连接配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#数据源</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:port/database?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure>



<h4 id="mybatis-plus配置"><a href="#mybatis-plus配置" class="headerlink" title="mybatis-plus配置"></a>mybatis-plus配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.wflin.pojo.*</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">false</span>   	<span class="comment"># 关闭驼峰</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>



<h2 id="springboot-mybatis-plus-druid"><a href="#springboot-mybatis-plus-druid" class="headerlink" title="springboot+mybatis-plus+druid"></a>springboot+mybatis-plus+druid</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#数据源</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:port/database?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nba1234567</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_null</span> <span class="comment"># JSON处理时忽略非空字段</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.wflin.pojo.*</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">false</span>   	<span class="comment"># 关闭驼峰</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>

<h2 id="redis-1"><a href="#redis-1" class="headerlink" title="redis"></a>redis</h2><h3 id="springboot-redisTemplate"><a href="#springboot-redisTemplate" class="headerlink" title="springboot+redisTemplate"></a>springboot+redisTemplate</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">&quot;192.168.43.21&quot;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6389</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">connect-timeout:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h3 id="Jedis连接"><a href="#Jedis连接" class="headerlink" title="Jedis连接"></a>Jedis连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 Jedis 对象</span></span><br><span class="line"> <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.43.21&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"> <span class="comment">//测试是否可以连接上</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">ping</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line"> System.out.println(ping);</span><br><span class="line"> jedis.close();</span><br></pre></td></tr></table></figure>





<h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><h3 id="默认打包插件"><a href="#默认打包插件" class="headerlink" title="默认打包插件"></a>默认打包插件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="jar-包部署"><a href="#jar-包部署" class="headerlink" title="jar 包部署"></a>jar 包部署</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--打包时跳过单元测试插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--打包插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置主类位置--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- com.ccww.Application --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>主类路径<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="将有webapp的路径的也打入jar包"><a href="#将有webapp的路径的也打入jar包" class="headerlink" title="将有webapp的路径的也打入jar包"></a>将有webapp的路径的也打入jar包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置主类位置--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- com.ccww.Application --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>主类路径<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注意此次必须要放在此目录下才能被访问到--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="war包"><a href="#war包" class="headerlink" title="war包"></a>war包</h2><h3 id="war-包部署-boot-打war包"><a href="#war-包部署-boot-打war包" class="headerlink" title="war 包部署(boot 打war包)"></a>war 包部署(boot 打war包)</h3><ul>
<li>配置打包方式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;--! 加入打包方式 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>在插件中指定插入类</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用热部署出现中文乱码解决方案--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 增加 JVM 参数--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jvmArguements</span>&gt;</span>Dfile.encoding=UTF-8<span class="tag">&lt;/<span class="name">jvmArguements</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定主类入口--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>主类<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>排除内嵌 tomcat</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--去掉内 tomcat --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--去掉使用内嵌 tomcat 解析 jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>配置入口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.wflin.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(MainApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> builder.sources(MainApplication.class);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>打包测试</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">一旦使用 war 包部署注意</span><br><span class="line">	1. application.yml 中配置 port context-path 先效</span><br><span class="line">	2. 访问时使用打成 war 包的名字和外部 tomcat 端口号进行访问项目</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java 开发常用配置</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Springcloud</title>
    <url>/hexo/2019/08/27/springcloud/</url>
    <content><![CDATA[<h1 id="一、springcloud引言，命名，版本选择"><a href="#一、springcloud引言，命名，版本选择" class="headerlink" title="一、springcloud引言，命名，版本选择"></a>一、springcloud引言，命名，版本选择</h1><p>[官方链接](<a href="https://spring.io/projects/spring-cloud">Spring Cloud</a>)</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li><strong>官方定义</strong>：springcloud 是为开发人员提供了在分布式系统中快速构建一些通用模式的工具</li>
<li><strong>通俗定义</strong>：springcloud 含有众多子项目的工具集 tools collection 微服务的工具集合</li>
</ul>
<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><ul>
<li>基于单体，基于业务进行拆分，每个服务都是独立应用，独立部署，运行在自己的计算机进程（相对服务器的计算机而言），对于这些服务都是分布式管理</li>
</ul>
<h2 id="springcloud命名-springboot版本选择（重要）"><a href="#springcloud命名-springboot版本选择（重要）" class="headerlink" title="springcloud命名 &amp; springboot版本选择（重要）"></a>springcloud命名 &amp; springboot版本选择（重要）</h2><ul>
<li>**springcloud **<ul>
<li><strong>命名</strong>：早期没有选择数字命名【现在】</li>
<li><strong>定义</strong>：springcloud 涵盖众多子项目工具集 服务发现 服务注册 负载均衡，子项目版本使用的数字</li>
<li><strong>早期命名</strong>：选择伦敦地铁站名字作为发布版本</li>
</ul>
</li>
</ul>
<h3 id="springcloud-与-springboot-对应关系"><a href="#springcloud-与-springboot-对应关系" class="headerlink" title="springcloud 与 springboot 对应关系"></a>springcloud 与 springboot 对应关系</h3><table>
<thead>
<tr>
<th align="left">Release Train</th>
<th align="left">Boot Version</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0-Release-Notes">2021.0.x</a> aka Jubilee</td>
<td align="left">2.6.x</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes">2020.0.x</a> aka Ilford</td>
<td align="left">2.4.x, 2.5.x (Starting with 2020.0.3)</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes">Hoxton</a></td>
<td align="left">2.2.x, 2.3.x (Starting with SR5)</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes">Greenwich</a></td>
<td align="left">2.1.x</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes">Finchley</a></td>
<td align="left">2.0.x</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes">Edgware</a></td>
<td align="left">1.5.x</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes">Dalston</a></td>
<td align="left">1.5.x</td>
</tr>
</tbody></table>
<h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><ul>
<li><p>使用 idea 创建一个空工程</p>
</li>
<li><p>创建一个 maven 的父工程</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>引入 springcloud 的版本管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义 propertites--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.cloud-version</span>&gt;</span>Hoxton.SR6<span class="tag">&lt;/<span class="name">spring.cloud-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--维护版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--维护 springclould 版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在父项目中继承 springboot 父项目</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--继承 springboot 的父项目--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="三、服务注册中心"><a href="#三、服务注册中心" class="headerlink" title="三、服务注册中心"></a>三、服务注册中心</h1><ul>
<li><p><strong>定义</strong>：服务注册中心就是在整个微服务的架构中单独提出一个服务，这个服务不完成系统的任何业务功能，仅仅用来完成对整个微服务的服务注册和服务发现，以及对服务健康状态的监控和管理功能；以及服务元信息的存储。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1 服务注册中心</span></span><br><span class="line"><span class="bullet">-</span> 可以对所有微服务的信息进行存储，如微服务名称、IP、端口等</span><br><span class="line"><span class="bullet">-</span> 可以进行服务调用时通过服务发现查询可用的微服务列表及网络地址进行服务调用</span><br><span class="line"><span class="bullet">-</span> 可以对所有的微服务进行心跳检查，如果发现某实例长时间无法访问，就会从服务注册表移除该实例</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="四、常用的注册中心"><a href="#四、常用的注册中心" class="headerlink" title="四、常用的注册中心"></a>四、常用的注册中心</h1><ul>
<li>springcloud 支持多种注册中心 **Eureka(netflix)，Consul(Go)、Zookeeper(java)**，以及阿里巴巴推出的 **Nacos(java阿里巴巴)**。这些注册中心在本质上都是用来管理服务的注册和发信啊以及服务的状态检查的。</li>
</ul>
<h1 id="五、Eureka"><a href="#五、Eureka" class="headerlink" title="五、Eureka"></a>五、Eureka</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> Eureka 是 Netflix 开发的服务发现框架 SpringCloud-NetFlix-eureka 服务注册中心</span><br><span class="line"><span class="bullet">-</span> Eureka 包含两个组件：Eureka Server 和 Eureka Client</span><br></pre></td></tr></table></figure>

<h3 id="2、开发-EurekaServer"><a href="#2、开发-EurekaServer" class="headerlink" title="2、开发 EurekaServer"></a>2、开发 EurekaServer</h3><ul>
<li><p>新建一个 eurekaServer 的 module，parent 中写入前面的父 pom</p>
</li>
<li><p>在pom 中导入 springboot 依赖，并导入 eureka-server 的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      <span class="comment">&lt;!--引入 EurekaServer 中心--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在对应包下创建一个 EurekaServerApplication 主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 开启当前应用是一个服务注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>在 resource 目录下新建一个 application.properties 文件,写入 eurekaServer 的配置信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8761</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定服务名称 &lt;推荐大写，因为服务名在注册中心默认就是大写&gt; [必填]</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">EUREKASERVER</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#eureka server 服务注册中心地址,暴露服务地址</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:8761/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>此时访问 <code>http://localhost:8761</code> 地址就可以看到注册中心的页面了</p>
<p><img src="/hexo/2019/08/27/springcloud/springcloud/image-20220628210123819.png" alt="image-20220628210123819"></p>
</li>
<li><p>此时有一个问题，就是 Eureka-Server 也被当成了一个客户端被注册进去了，所以这是不科学的。改进配置文件</p>
</li>
<li><p>application.porperties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8761</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定服务名称 &lt;推荐大写，因为服务名在注册中心默认就是大写&gt;</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">EUREKASERVER</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#eureka server 服务注册中心地址,暴露服务地址</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:8761/eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 关闭 eureka 的立即注册默认是true，【立即注册】，改为 false 就会关闭立即注册</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 让当前应用只被当成服务注册中心</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>

<p><img src="/hexo/2019/08/27/springcloud/springcloud/image-20220628210803943.png" alt="image-20220628210803943"></p>
</li>
</ul>
<h3 id="3、开发一个-eureka-的客户端"><a href="#3、开发一个-eureka-的客户端" class="headerlink" title="3、开发一个 eureka 的客户端"></a>3、开发一个 eureka 的客户端</h3><ul>
<li><p>拆分出来的微服务</p>
</li>
<li><p>创建一个 springboot 项目</p>
<p><img src="/hexo/2019/08/27/springcloud/springcloud/image-20220628220032563.png" alt="image-20220628220032563"></p>
</li>
<li><p>添加 springboot  项目依赖和 Eureka-client 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springboot 的应用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 EurekaClientApplication 启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让当前微服务作为一个 eurekaServer 客户端 进行服务注册</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaClientApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 resource 目录下创建一个 application.properties 配置文件，写入相关配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定微服务的端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8989</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定服务的名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">EUREKACLIENT</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定服务注册中心地址 &lt;重要&gt;</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:8761/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 EurekaServer 和 EurekaClient 访问 <a href="http://localhost:8761/">http://localhost:8761</a></p>
<p><img src="/hexo/2019/08/27/springcloud/springcloud/image-20220628220654698.png" alt="image-20220628220654698"></p>
<blockquote>
<p>这里显示了 EurekaClient 的一个客户端</p>
</blockquote>
</li>
</ul>
<h3 id="4、Eureka-自我保护机制（了解）"><a href="#4、Eureka-自我保护机制（了解）" class="headerlink" title="4、Eureka 自我保护机制（了解）"></a>4、Eureka 自我保护机制（了解）</h3><h3 id="5、Eureka-集群搭建"><a href="#5、Eureka-集群搭建" class="headerlink" title="5、Eureka 集群搭建"></a>5、Eureka 集群搭建</h3><h3 id="6、springcloud-netflix-eureka"><a href="#6、springcloud-netflix-eureka" class="headerlink" title="6、springcloud netflix eureka"></a>6、springcloud netflix eureka</h3><ul>
<li>两个角色：eureka server 服务注册中心，eureka client 微服务</li>
<li>不好的消息：eureka 组件1.0（稳定）、2.0版本停止更新</li>
<li>不在推荐是使用 eureka 服务注册中心：<ul>
<li>最新版本停止更新</li>
<li>每次必须手动通过代码形式开发服务注册中心</li>
</ul>
</li>
</ul>
<h1 id="六、consul-服务注册中心"><a href="#六、consul-服务注册中心" class="headerlink" title="六、consul 服务注册中心"></a>六、consul 服务注册中心</h1><h2 id="相关简介："><a href="#相关简介：" class="headerlink" title="相关简介："></a>相关简介：</h2><ul>
<li>consul 基于 go 语言进行开发服务注册中心，清凉级服务注册中心 Google</li>
<li><strong>作用：</strong> 管理微服务中所有服务注册 发现 管理服务元数据信息存储（<strong>服务名，地址列表</strong>）心跳健康检查。</li>
</ul>
<h2 id="consul-服务注册中心安装"><a href="#consul-服务注册中心安装" class="headerlink" title="consul 服务注册中心安装"></a>consul 服务注册中心安装</h2><ul>
<li><p>docker 安装运行</p>
<blockquote>
<p>docker run -d –name consul -p 8500:8500 –name co consul</p>
</blockquote>
</li>
</ul>
<p><img src="/hexo/2019/08/27/springcloud/springcloud/image-20220628230759024.png" alt="image-20220628230759024"></p>
<ul>
<li>管理界面基本介绍<ul>
<li>dcl：数据中心名称</li>
<li>datacenter：默认为 dcl</li>
<li>指定数据中心启动：consul agent -dev -datacenter&#x3D;yourCenterName</li>
<li>service：当前 consul 服务中注册服务列表</li>
<li>默认：client server 同时启动自己注册自己 会出现一个 consul 的服务</li>
<li>nodes：用来查看 consul 的集群节点</li>
</ul>
</li>
</ul>
<h2 id="consul-client-服务客户端（微服务）"><a href="#consul-client-服务客户端（微服务）" class="headerlink" title="consul client 服务客户端（微服务）"></a>consul client 服务客户端（微服务）</h2><ul>
<li><p>创建一个独立的 springboot 应用</p>
<p><img src="/hexo/2019/08/27/springcloud/springcloud/image-20220628232349475.png" alt="image-20220628232349475"></p>
</li>
<li><p>引入 consul 相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlite</title>
    <url>/hexo/2023/08/01/sqlite/</url>
    <content><![CDATA[<h1 id="安装-sqlite3"><a href="#安装-sqlite3" class="headerlink" title="安装 sqlite3"></a>安装 sqlite3</h1><ul>
<li><p>sqlite3 这个是安装 sqlite3 数据库</p>
</li>
<li><p>libsqlite3-dev 这个安装 sqlite3 开发的套件（头文件和库等）</p>
<blockquote>
<p>sudo apt install sqlite3 libsqlite3-dev</p>
</blockquote>
</li>
</ul>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><ul>
<li><p>查看版本</p>
<blockquote>
<p>sqlite3</p>
</blockquote>
</li>
</ul>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><ul>
<li><p>.help 查看帮助</p>
</li>
<li><p>.show 查看命令提示符的默认设置</p>
</li>
<li><p>.schema sqlite_master 查看表结构</p>
</li>
<li><p>.databases 查看数据</p>
</li>
<li><p>.tables 查看表</p>
</li>
<li><blockquote>
<p>.header on</p>
<p>.mode column</p>
<p>.timer on</p>
</blockquote>
</li>
<li><p>增删改查和 mysql 语句的 sql 一样不再重复</p>
</li>
</ul>
<h1 id="c-语言连接-sqlite3"><a href="#c-语言连接-sqlite3" class="headerlink" title="c 语言连接 sqlite3"></a>c 语言连接 sqlite3</h1><ul>
<li><p>代码 sqlite_test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    sqlite3 *db;</span><br><span class="line">    <span class="type">char</span> *error_message = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = sqlite3_open(<span class="string">&quot;test.db&quot;</span>, &amp;db);</span><br><span class="line">    <span class="keyword">if</span> (result != SQLITE_OK) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Cannot open database: %s\n&quot;</span>, sqlite3_errmsg(db));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *create_table_sql = <span class="string">&quot;CREATE TABLE IF NOT EXISTS Users (ID INTEGER PRIMARY KEY, Name TEXT, Email TEXT);&quot;</span>;</span><br><span class="line">    result = sqlite3_exec(db, create_table_sql, <span class="number">0</span>, <span class="number">0</span>, &amp;error_message);</span><br><span class="line">    <span class="keyword">if</span> (result != SQLITE_OK) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;SQL error: %s\n&quot;</span>, error_message);</span><br><span class="line">        sqlite3_free(error_message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *insert_data_sql = <span class="string">&quot;INSERT INTO Users (Name, Email) VALUES (&#x27;John Doe&#x27;, &#x27;john@example.com&#x27;);&quot;</span>;</span><br><span class="line">    result = sqlite3_exec(db, insert_data_sql, <span class="number">0</span>, <span class="number">0</span>, &amp;error_message);</span><br><span class="line">    <span class="keyword">if</span> (result != SQLITE_OK) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;SQL error: %s\n&quot;</span>, error_message);</span><br><span class="line">        sqlite3_free(error_message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *select_data_sql = <span class="string">&quot;SELECT * FROM Users;&quot;</span>;</span><br><span class="line">    sqlite3_stmt *stmt;</span><br><span class="line">    result = sqlite3_prepare_v2(db, select_data_sql, <span class="number">-1</span>, &amp;stmt, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (result != SQLITE_OK) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;SQL error: %s\n&quot;</span>, sqlite3_errmsg(db));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (sqlite3_step(stmt) == SQLITE_ROW) &#123;</span><br><span class="line">        <span class="type">int</span> id = sqlite3_column_int(stmt, <span class="number">0</span>);</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *name = (<span class="type">const</span> <span class="type">char</span> *)sqlite3_column_text(stmt, <span class="number">1</span>);</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *email = (<span class="type">const</span> <span class="type">char</span> *)sqlite3_column_text(stmt, <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID: %d, Name: %s, Email: %s\n&quot;</span>, id, name, email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlite3_finalize(stmt);</span><br><span class="line">    sqlite3_close(db);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行指令</p>
<blockquote>
<p>gcc sqlite_test.c -o sqlite_test -lsqlite3</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>sqlite</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm 环境搭建</title>
    <url>/hexo/2021/08/27/ssm-huan-jing-da-jian/</url>
    <content><![CDATA[<h2 id="一、IDEA-创建-POM-项目"><a href="#一、IDEA-创建-POM-项目" class="headerlink" title="一、IDEA 创建 POM 项目"></a>一、IDEA 创建 POM 项目</h2><ul>
<li><p>打开 idea 选择新建项目，并选择 maven 的模板文件,模板为图片光标所指的那一个</p>
<p><strong>maven-archetype-webapp</strong></p>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212220330593.png" alt="image-20221212220330593"></p>
</li>
<li><p>设置项目名和项目保存位置</p>
<ul>
<li>项目的包的命名顺序一般为域名倒序指的是：假设要建立一个 商店的项目，而这个商店的域名是 shop.test.com,那么这个项目的包的顺序应该是 com.test.shop，一般我们选取 项目名字作为项目的包名就是说 Artifactid 为 shop</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212215058992.png" alt="image-20221212215058992"></p>
</li>
<li><p>上一步选择 next 之后 会进行 maven 配置（如果你的 idea 之前在 setting中配置好的那么这一步应该是啥也不用改），点击 finish</p>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212215639842.png" alt="image-20221212215639842"></p>
</li>
<li><p>完成之后会进入 idea 工程的主界面</p>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212220510195.png" alt="image-20221212220510195"></p>
</li>
<li><p>创建 Javaweb 的目录结构</p>
<ul>
<li>在 main 目录下创建 java 和 resource 文件夹</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212220720662.png" alt="image-20221212220720662"></p>
<p>创建后</p>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212220741561.png" alt="image-20221212220741561"></p>
<p>注意：如果你所创建的 java 和 resource 文件夹没有变颜色可以通过选中文件夹然后鼠标右键的 mark as 进行颜色标注,如果标记错误可以通过 unmark as 取消后重新标记</p>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212221036715.png" alt="image-20221212221036715"></p>
</li>
</ul>
<h2 id="二、添加项目-POM-的依赖"><a href="#二、添加项目-POM-的依赖" class="headerlink" title="二、添加项目 POM 的依赖"></a>二、添加项目 POM 的依赖</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><ul>
<li><strong>读者自行设定自己使用 MySQL 的版本</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span> <span class="comment">&lt;!--使用的是 MySQL8是这个版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span> <span class="comment">&lt;!--使用的是 MySQL5是这个版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;groupId&gt;com.baomidou&lt;/groupId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;version&gt;3.1.0&lt;/version&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.json/json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>20180130<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>加入之后点击 maven 刷新</p>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212221530194.png" alt="image-20221212221530194"></p>
<ul>
<li>点击导入刷新，（最好保证网络通畅，因为断网的话文件会损坏，maven 没有断电续传）</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212221638192.png" alt="image-20221212221638192"></p>
</li>
</ul>
<h2 id="三、-在-resource-目录下创建以下文件"><a href="#三、-在-resource-目录下创建以下文件" class="headerlink" title="三、 在 resource 目录下创建以下文件"></a>三、 在 resource 目录下创建以下文件</h2><h3 id="MySQL5"><a href="#MySQL5" class="headerlink" title="MySQL5"></a>MySQL5</h3><h4 id="spring-database-xml"><a href="#spring-database-xml" class="headerlink" title="spring-database.xml"></a>spring-database.xml</h4><ul>
<li>项目数据库的配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. 配置数据源:阿里德鲁伊数据源  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1. mysql 的版本，这个版本是 5 的版本  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 修改为自己的数据库的 ip 和 端口 -&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://IP:Port/database&quot; /&gt;</span></span><br><span class="line"><span class="comment">		&lt;!--填入自己的用户名和密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 配置mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--dataSource属性指定要用到的连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--configLocation属性指定mybatis的核心配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3. 自动扫描mybatis中pojo接口包，</span></span><br><span class="line"><span class="comment">           并且自动注入第二项创建的sessionfactory，初始化所有的mapper接口对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.test.shop.mapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4. 扫描service注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.test.shop.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--5. 配置事务管理器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--6. 开启注解进行事务管理   transaction-manager：引用上面定义的事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><ul>
<li>上面的 MySQL 的 URL 写法只支持 MySQL5 的版本，Mysql8的不是这么配置</li>
</ul>
<h3 id="MySQL8：-自行比较和-5-的-url"><a href="#MySQL8：-自行比较和-5-的-url" class="headerlink" title="MySQL8：(自行比较和 5 的 url)"></a>MySQL8：(自行比较和 5 的 url)</h3><h4 id="spring-database-xml-1"><a href="#spring-database-xml-1" class="headerlink" title="spring-database.xml"></a>spring-database.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. 配置数据源:阿里数据源  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://IP:port/database?allowMultiQueries=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>autoReconnect=true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 配置mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--dataSource属性指定要用到的连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--configLocation属性指定mybatis的核心配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3. 自动扫描mybatis中pojo接口包，</span></span><br><span class="line"><span class="comment">           并且自动注入第二项创建的sessionfactory，初始化所有的mapper接口对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.blog.mapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4. 扫描service注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.blog.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--5. 配置事务管理器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--6. 开启注解进行事务管理   transaction-manager：引用上面定义的事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四、创建-springmvc-的配置文件"><a href="#四、创建-springmvc-的配置文件" class="headerlink" title="四、创建 springmvc 的配置文件"></a>四、创建 springmvc 的配置文件</h2><h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.开启Springioc 自动扫描注解包  只对mvc的包做扫描  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.test.shop.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 开启注解，对jackson数据支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--自定义消息转换器的编码,解决后台传输json回前台时，中文乱码问题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stringHttpMessageConverter&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;stringHttpMessageConverter&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.配置视图解析器  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器:如何把handle方法返回值解析为实际的物理视图</span></span><br><span class="line"><span class="comment">         name=&quot;prefix&quot;代表前面的目录，为空代表根目录  name=&quot;suffix&quot;代表返回的地址为后缀为.JSP的文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="五、mybatis-的配置文件"><a href="#五、mybatis-的配置文件" class="headerlink" title="五、mybatis 的配置文件"></a>五、mybatis 的配置文件</h2><h3 id="mybatis-xml"><a href="#mybatis-xml" class="headerlink" title="mybatis.xml"></a>mybatis.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果value为true的时候，当返回内容为空时，那么返回的是一个空的对象，而不是null</span></span><br><span class="line"><span class="comment">            如果这里的value为false(默认值)，mybatis在没有查询到内容的时候返回null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;returnInstanceForEmptyRow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--显示sql语句，此行配置如果删除，则不在后台显示SQL语句--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--开启驼峰映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描包内的Mapper接口与配置文件</span></span><br><span class="line"><span class="comment">             接口文件名要与mapper文件名相同</span></span><br><span class="line"><span class="comment">             纳入spring管理之后，不再需要扫描--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;package name=&quot;cn/thinknovo/pojo&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="六、更换或者下载-web-xml（怎么下载自行百度）"><a href="#六、更换或者下载-web-xml（怎么下载自行百度）" class="headerlink" title="六、更换或者下载 web.xml（怎么下载自行百度）"></a>六、更换或者下载 web.xml（怎么下载自行百度）</h2><ul>
<li>更换原因：这个模板默认的配置文件版本是 3 的版本不支持注解开发，所以要升级为 4 的版本，直接复制下面就行。</li>
</ul>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><ul>
<li>模板有大锅（要替换 web.xml 文件）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Spring核心监听器 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--在服务器启动时加载Spring容器，且只会加载一次 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-database.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置springmvc --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置初始化参数：作用是配置SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置由Spring 提供的针对中文乱码的编码过滤器 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 编码过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="七、mybatis-的模板文件（在mybatis-写-sql-的文件）"><a href="#七、mybatis-的模板文件（在mybatis-写-sql-的文件）" class="headerlink" title="七、mybatis 的模板文件（在mybatis 写 sql 的文件）"></a>七、mybatis 的模板文件（在mybatis 写 sql 的文件）</h2><h3 id="mybatis-template-xml"><a href="#mybatis-template-xml" class="headerlink" title="mybatis-template.xml"></a>mybatis-template.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xly.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="整个项目搭建完成"><a href="#整个项目搭建完成" class="headerlink" title="整个项目搭建完成"></a>整个项目搭建完成</h1><h2 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h2><blockquote>
<p>java</p>
<p>​	com.xxx</p>
<p>​		controller</p>
<p>​		mapper</p>
<p>​		entity</p>
<p>​		service</p>
<p>​		service</p>
<p>​				serviceImpl</p>
<p>​		utils</p>
<p>resource</p>
<p>​	mapper&#x2F;*.xml</p>
</blockquote>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212223821563.png" alt="image-20221212223821563"></p>
<h2 id="在controller里编写测试"><a href="#在controller里编写测试" class="headerlink" title="在controller里编写测试"></a>在controller里编写测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line">   <span class="meta">@GetMapping()</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h2><ul>
<li>第一步</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224008654.png" alt="image-20221212224008654"></p>
<ul>
<li>第二步</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224128421.png" alt="image-20221212224128421"></p>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224208815.png" alt="image-20221212224208815"></p>
<ul>
<li>第三步</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224243218.png" alt="image-20221212224243218"></p>
<ul>
<li>第四步 ： 配置 tomcat 的位置</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224310996.png" alt="image-20221212224310996"></p>
<ul>
<li>第五步</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224354239.png" alt="image-20221212224354239"></p>
<ul>
<li>第六步</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224428293.png" alt="image-20221212224428293"></p>
<ul>
<li>第七步</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224502890.png" alt="image-20221212224502890"></p>
<ul>
<li>第八步</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224529214.png" alt="image-20221212224529214"></p>
<ul>
<li>第九步</li>
</ul>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221212224557045.png" alt="image-20221212224557045"></p>
<ul>
<li>第十步</li>
</ul>
<h3 id="启动服务访问并访问"><a href="#启动服务访问并访问" class="headerlink" title="启动服务访问并访问"></a>启动服务访问并访问</h3><ul>
<li><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></li>
</ul>
<h1 id="实例测试"><a href="#实例测试" class="headerlink" title="实例测试"></a>实例测试</h1><h2 id="SQL-建表"><a href="#SQL-建表" class="headerlink" title="SQL 建表"></a>SQL 建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">	`id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	`user_name` <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="type">CHARACTER</span> </span><br><span class="line">	<span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`password` <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( `id` ) </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">8</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb3 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_bin;</span><br></pre></td></tr></table></figure>

<h2 id="spring-代码"><a href="#spring-代码" class="headerlink" title="spring 代码"></a>spring 代码</h2><h3 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Usercontroller-java"><a href="#Usercontroller-java" class="headerlink" title="Usercontroller.java"></a>Usercontroller.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping()</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUsers</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.queryUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserService-java-–-interface"><a href="#UserService-java-–-interface" class="headerlink" title="UserService.java  –&gt;(interface)"></a>UserService.java  –&gt;(interface)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">queryUsers</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h3 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">queryUsers</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userMapper.selectUsers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserMapper-java-–-interface"><a href="#UserMapper-java-–-interface" class="headerlink" title="UserMapper.java  –&gt;(interface)"></a>UserMapper.java  –&gt;(interface)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">selectUsers</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.test.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.test.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select id,user_name,password</span><br><span class="line">        from tb_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul>
<li><p><strong>如果前面在 spring-database.xml 中注释掉了扫描 xml 文件的配置的话，需要先开启之后再运行（因为有时候不注释配置文件报错会导致项目无法运行成功，所以在没有业务的时候为了测试系统框架是否搭建成功，需要将 扫描 xml 的配置注释，有业务的时候再放开就行了）</strong></p>
<p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221219223620502.png" alt="image-20221219223620502"></p>
</li>
</ul>
<h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><h3 id="浏览器输入：http-127-0-0-1-8080-user"><a href="#浏览器输入：http-127-0-0-1-8080-user" class="headerlink" title="浏览器输入：http://127.0.0.1:8080/user"></a>浏览器输入：<a href="http://127.0.0.1:8080/user">http://127.0.0.1:8080/user</a></h3><h3 id="结果显示："><a href="#结果显示：" class="headerlink" title="结果显示："></a>结果显示：</h3><p><img src="/hexo/2021/08/27/ssm-huan-jing-da-jian/ssm%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20221219224142096.png" alt="image-20221219224142096"></p>
]]></content>
      <categories>
        <category>java</category>
        <category>javaWeb</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>tcp/udp套接字</title>
    <url>/hexo/2023/08/14/tcp-udp/</url>
    <content><![CDATA[<h1 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h1><ul>
<li>大端小端都叫主机字节序</li>
</ul>
<h2 id="小端"><a href="#小端" class="headerlink" title="小端"></a>小端</h2><ul>
<li>将低字节存放在低地址(Linux)</li>
<li>大小端是由系统决定，用户不能改变</li>
</ul>
<h2 id="大端"><a href="#大端" class="headerlink" title="大端"></a>大端</h2><ul>
<li>将高字节存在高地址</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试机器大小端</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> data;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">DATA</span> <span class="title">d</span>;</span></span><br><span class="line">    d.data = <span class="number">0x0102</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (d.a[<span class="number">0</span>] == <span class="number">0x01</span> &amp;&amp; d.a[<span class="number">1</span>] == <span class="number">0x02</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;机器是大端\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;机器是小端\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h2><ul>
<li>网络字节序是大端</li>
</ul>
<p>所以接收和发生都需要进行转换成相应的字节序</p>
<h2 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h2><ul>
<li><p>头文件</p>
<blockquote>
<p>#include&lt;arpa&#x2F;inet.h&gt;</p>
</blockquote>
</li>
</ul>
<h4 id="发消息-主机字节序转网络字节序"><a href="#发消息-主机字节序转网络字节序" class="headerlink" title="发消息(主机字节序转网络字节序)"></a>发消息(主机字节序转网络字节序)</h4><ul>
<li><p>htons:将两个字节的主机字节序转换成网络字节序</p>
</li>
<li><p>htons:将主机字节序的 <code>端口</code> 转换成网络字节序</p>
<blockquote>
<p>unit16_t htons(unit16_t  hostshort)</p>
</blockquote>
</li>
<li><p>htonl:将主机字节序的 <code>ip地址</code> 转换成网络字节序</p>
<blockquote>
<p>unit32_t htonl(unit32_t hostlong)</p>
</blockquote>
</li>
</ul>
<h4 id="收消息-网络字节序转主机字节序"><a href="#收消息-网络字节序转主机字节序" class="headerlink" title="收消息(网络字节序转主机字节序)"></a>收消息(网络字节序转主机字节序)</h4><ul>
<li><p>ntohs:将网络字节序的 <code>端口</code> 转换成主机字节序</p>
<blockquote>
<p>unit16_t ntohs(unit16_t netshort)</p>
</blockquote>
</li>
<li><p>ntohl:将网络字节序的 <code>ip地址</code> 转换成主机字节序</p>
<blockquote>
<p>unit16_t ntohl(unit16_t netlong)</p>
</blockquote>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> data = <span class="number">0x0102</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;转换结果：%x\n&quot;</span>,htons(data));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ip地址转换"><a href="#ip地址转换" class="headerlink" title="ip地址转换"></a>ip地址转换</h2><h3 id="ip地址的形式"><a href="#ip地址的形式" class="headerlink" title="ip地址的形式"></a>ip地址的形式</h3><ul>
<li>“192.168.100.1”: 点分十进制数串</li>
<li>网络的ip地址：32位 无符号整型数据</li>
</ul>
<h3 id="将十进制数串-转成-32-位无符号整型数据（默认大端）"><a href="#将十进制数串-转成-32-位无符号整型数据（默认大端）" class="headerlink" title="将十进制数串 转成 32 位无符号整型数据（默认大端）"></a>将十进制数串 转成 32 位无符号整型数据（默认大端）</h3><blockquote>
<p> int inet_pton(int af,const char *src,void *dist)</p>
</blockquote>
<p>参数说明</p>
<ul>
<li>af：AF_INET IPV4,AF_INET6 IPV6</li>
<li>src：点分十进制数串的首元素地址</li>
<li>dist：转换结果</li>
</ul>
<p>返回值</p>
<ul>
<li>成功 1 ，失败其他</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="string">&quot;192.168.33.100&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> addr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//  注意最后一个参数是无符号地址</span></span><br><span class="line">    <span class="type">int</span> ret = inet_pton(AF_INET, str, (<span class="type">void</span> *)&amp;addr);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;地址转换成功：%d\n&quot;</span>, addr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将主机地址转换成可以看懂的地址</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> *p = (<span class="type">unsigned</span> <span class="type">char</span> *)&amp;addr;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;地址还原后是：%d %d %d %d\n&quot;</span>, *p, *(p + <span class="number">1</span>), *(p + <span class="number">2</span>), *(p + <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;地址转换失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>网络中用无符号的原因<ul>
<li>有符号那个范围是 0-127</li>
<li>无符号的范围是 0-255 【可能会越界】</li>
</ul>
</li>
</ul>
<h3 id="将32位无符号数据转化成点分十进制的地址"><a href="#将32位无符号数据转化成点分十进制的地址" class="headerlink" title="将32位无符号数据转化成点分十进制的地址"></a>将32位无符号数据转化成点分十进制的地址</h3><blockquote>
<p>char *inet_ntop (int af, const void *addrptr,<br>                  char *strptr, size_t len)</p>
</blockquote>
<p>参数说明</p>
<ul>
<li><p>af：AF_INET IPV4,AF_INET6 IPV6</p>
</li>
<li><p>addrptr：32位无符号整型数的地址</p>
</li>
<li><p>strptr：点分十进制地址</p>
</li>
<li><p>len：点分十进制的最大长度(16)</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># len的宏定义</span></span><br><span class="line"><span class="bullet">  *</span> #define INET<span class="emphasis">_ADDRSTRLEN 16  //for ipv4</span></span><br><span class="line"><span class="emphasis">  * #define INET6_</span>ADDRSTRLEN    //for ipv6</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = &#123;<span class="number">192</span>, <span class="number">168</span>, <span class="number">33</span>, <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="type">char</span> ip_buf[<span class="number">16</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    inet_ntop(AF_INET, buf, ip_buf, <span class="number">16</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ipbuf = %s\n&quot;</span>, ip_buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="网络通信需要解决的3大问题-应用层"><a href="#网络通信需要解决的3大问题-应用层" class="headerlink" title="网络通信需要解决的3大问题(应用层)"></a>网络通信需要解决的3大问题(应用层)</h2><ul>
<li>协议，端口，IP地址</li>
<li>socket 套接字是一个特殊的文件描述符，可以使用 open，write，read，close 进行网络通信</li>
<li>通过 socket 函数调用得到这个网络通信的文件描述符(套接字)</li>
</ul>
<h1 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h1><ul>
<li>面向无连接的用户数据协议，在传输数据前不需要先建立连接；目的主机的运输层收到 UDP 报文后，不需要给出任何确认</li>
<li>特点<ul>
<li>相比 tcp 速度稍快</li>
<li>简单的请求应答程序可以使用 udp</li>
<li>对于海量数据传输不应该使用 udp</li>
<li>广播和多播必须使用 udp udp 应用DNS(域名解析)，NFS(网络文件系统)，RTP(流媒体)等</li>
<li>一般语音或者视频通话使用udp</li>
</ul>
</li>
</ul>
<h3 id="udp-的编程api"><a href="#udp-的编程api" class="headerlink" title="udp 的编程api"></a>udp 的编程api</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span><span class="params">(<span class="type">int</span> domain,<span class="type">int</span> type,<span class="type">int</span> protocol)</span></span><br></pre></td></tr></table></figure>

<p>参数</p>
<ul>
<li>domain协议族：协议AF_INET IPV4     AF_INET6 IPV6</li>
<li>type 类型：<ul>
<li>SOCK_DGRAM(udp套接字)</li>
<li>SOCK_STREAM(tcp套接字)</li>
<li>SOCK_RAW(socket套接字)</li>
</ul>
</li>
<li>protocol协议类别：（<code>0</code>，IPPROTO，IPPROTO_UDP）</li>
<li>返回值：通信的文件描述符 (套接字)，大于0成功，小于0 失败</li>
</ul>
<h3 id="ipv4结构地址"><a href="#ipv4结构地址" class="headerlink" title="ipv4结构地址"></a>ipv4结构地址</h3><p>存放 ipv4 协议通信的所有地址信息</p>
<blockquote>
<p>#include&lt;netinet&#x2F;in.h&gt;</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span> sin_family; <span class="comment">//2字节 协议(AF_INET    AF_INET6)</span></span><br><span class="line">    <span class="type">in_port_t</span> sin_port; <span class="comment">//2字节 端口</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span> <span class="comment">//4字节 IP地址(32位无符号整数)</span></span><br><span class="line">    <span class="type">char</span> sin_zero[<span class="number">8</span>] <span class="comment">// 8字节 //全写0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>&#123;</span></span><br><span class="line">    <span class="type">in_addr_t</span> s_addr; <span class="comment">//4字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通用地址结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span> sa_family;  <span class="comment">//2字节</span></span><br><span class="line">    <span class="type">char</span> sa_data[<span class="number">14</span>];  <span class="comment">//14 字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="两种地址结构使用场合"><a href="#两种地址结构使用场合" class="headerlink" title="两种地址结构使用场合"></a>两种地址结构使用场合</h3><ul>
<li><code>struct sockaddr_in</code> IPv4 地址结构(存放客户端，服务器的地址信息（协议，port，IP）)</li>
<li><code>struct sockaddr</code> 通用地址结构  不是存放数据 socket API 类型转换</li>
</ul>
<h3 id="发送数据-sendto"><a href="#发送数据-sendto" class="headerlink" title="发送数据(sendto)"></a>发送数据(sendto)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">sendto</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">                      <span class="type">const</span> <span class="keyword">struct</span> sockaddr *dest_addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<ul>
<li>sockfd：通信套接字</li>
<li>buf：需要发送的消息的首元素地址</li>
<li>len：消息的实际长度</li>
<li>flag：0 网络默认方式通信</li>
<li>dest_addr：目的主机的信息（协议，port，ip地址）</li>
<li>addrlen：地址结构体的长度</li>
</ul>
<p>返回值：发送字节数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> port 8000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> addr <span class="string">&quot;192.168.10.103&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建通信的udp套接字</span></span><br><span class="line">    <span class="type">int</span> sockfd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sockd = %d\n&quot;</span>, sockfd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// udp客户端 发送消息 给服务器</span></span><br><span class="line">    <span class="comment">//  定义一个ipv4数组结构，存放服务器的地址信息(目的主机)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    server_addr.sin_family = AF_INET;                               <span class="comment">// ipv4</span></span><br><span class="line">    server_addr.sin_port = htons(port);                             <span class="comment">// 服务器端口</span></span><br><span class="line">    inet_pton(AF_INET, addr, (<span class="type">void</span> *)&amp;server_addr.sin_addr.s_addr); <span class="comment">// 服务器的IP信息</span></span><br><span class="line">    <span class="type">char</span> *msg = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    sendto(sockfd, msg, <span class="built_in">strlen</span>(msg), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>网络调试助手信息</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[2023-07-28 03:15:33.382]# RECV ASCII FROM 192.168.10.103 :52976&gt;</span><br><span class="line">hello</span><br></pre></td></tr></table></figure>

<p>从上面的结果分析：</p>
<ul>
<li>服务器收到客户端的信息，而且客户端的 port 是随机的</li>
<li>如果 udp 套接字 不适用 bind 函数绑定固定端口，那么再第一次调用 sendto 昔日会自动给套接字分配一个随机端口，后续 sendto 继续使用前一次的端口</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[2023-07-28 03:22:42.339]# RECV ASCII FROM 192.168.10.103 :64501&gt;</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">[2023-07-28 03:22:42.342]# RECV ASCII FROM 192.168.10.103 :64501&gt;</span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<h3 id="udp-绑定固定端口"><a href="#udp-绑定固定端口" class="headerlink" title="udp 绑定固定端口"></a>udp 绑定固定端口</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>          <span class="comment">/* See NOTES */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bind</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr,</span></span><br><span class="line"><span class="params">                <span class="type">socklen_t</span> addrlen)</span>;</span><br></pre></td></tr></table></figure>

<p>返回值 成功返回 0 ，失败返回 -1</p>
<p>部分代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个ipv4 的地址结构，存放本机信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">my_addr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数也可以清空数据</span></span><br><span class="line">bzero(&amp;my_addr, <span class="keyword">sizeof</span>(my_addr));</span><br><span class="line"><span class="comment">// 给udp 套接字绑定一个固定的地址信息</span></span><br><span class="line">my_addr.sin_family = AF_INET;</span><br><span class="line">my_addr.sin_port = htons(<span class="number">9000</span>);</span><br><span class="line">my_addr.sin_addr.s_addr = htonl(INADDR_ANY); <span class="comment">// 所有的地址都可以收到</span></span><br><span class="line">bind(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;my_addr, <span class="keyword">sizeof</span>(my_addr));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>全部代码（注意防火墙）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> port 8000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> addr <span class="string">&quot;192.168.100.1&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建通信的udp套接字</span></span><br><span class="line">    <span class="type">int</span> sockfd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sockd = %d\n&quot;</span>, sockfd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个ipv4 的地址结构，存放本机信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">my_addr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个函数也可以清空数据</span></span><br><span class="line">    bzero(&amp;my_addr, <span class="keyword">sizeof</span>(my_addr));</span><br><span class="line">    <span class="comment">// 给udp 套接字绑定一个固定的地址信息</span></span><br><span class="line">    my_addr.sin_family = AF_INET;</span><br><span class="line">    my_addr.sin_port = htons(<span class="number">9000</span>);</span><br><span class="line">    my_addr.sin_addr.s_addr = htonl(INADDR_ANY); <span class="comment">// 所有的地址都可以收到</span></span><br><span class="line">    bind(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;my_addr, <span class="keyword">sizeof</span>(my_addr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// udp客户端 发送消息 给服务器</span></span><br><span class="line">    <span class="comment">//  定义一个ipv4数组结构，存放服务器的地址信息(目的主机)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    server_addr.sin_family = AF_INET;                               <span class="comment">// ipv4</span></span><br><span class="line">    server_addr.sin_port = htons(port);                             <span class="comment">// 服务器端口</span></span><br><span class="line">    inet_pton(AF_INET, addr, (<span class="type">void</span> *)&amp;server_addr.sin_addr.s_addr); <span class="comment">// 服务器的IP信息</span></span><br><span class="line">    <span class="type">char</span> msg[<span class="number">128</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    sendto(sockfd, msg, <span class="built_in">strlen</span>(msg), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;my_addr, <span class="keyword">sizeof</span>(my_addr));</span><br><span class="line">    <span class="built_in">strcpy</span>(msg, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    sendto(sockfd, msg, <span class="built_in">strlen</span>(msg), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="recvfrom接收udp消息"><a href="#recvfrom接收udp消息" class="headerlink" title="recvfrom接收udp消息"></a>recvfrom接收udp消息</h3><p>如果 udp 不发数据前 就要接受消息 必须对 udp 套接字进行绑定</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recv</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recvfrom</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">                 <span class="keyword">struct</span> sockaddr *src_addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recvmsg</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> msghdr *msg, <span class="type">int</span> flags)</span>;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>sockfd：通信套接字</li>
<li>buf：接收消息的地址</li>
<li>len：消息长度</li>
<li>flag：消息模式（0）</li>
<li>src_addr：通用套接字地址</li>
<li>addrlen：通用套接字长度</li>
</ul>
<h1 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h1><h2 id="常见API"><a href="#常见API" class="headerlink" title="常见API"></a>常见API</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span> <span class="params">(<span class="type">int</span> family, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">bind</span> <span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *my_addr, <span class="type">int</span> addrlen)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">listen</span> <span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> backlog)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">accept</span> <span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">connect</span> <span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *serv_addr, <span class="type">int</span> addrlen)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">send</span> <span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *msg, <span class="type">int</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">recv</span> <span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buff, <span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">int</span> flags)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="server-端"><a href="#server-端" class="headerlink" title="server 端"></a>server 端</h2><ul>
<li>建立套接字</li>
<li>绑定端口</li>
<li>设置最大连接数</li>
<li>开启监听</li>
<li>接收客户端的接入</li>
<li>对接入的客户端响应</li>
<li>关流</li>
</ul>
<h2 id="client-端"><a href="#client-端" class="headerlink" title="client 端"></a>client 端</h2><ul>
<li>检测输入参数（可选）</li>
<li>创建套接字</li>
<li>绑定接收端口</li>
<li>连接到 server</li>
<li>发送消息</li>
</ul>
<h3 id="核心代码流程"><a href="#核心代码流程" class="headerlink" title="核心代码流程"></a>核心代码流程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket fd = %d\n&quot;</span>, sockfd);</span><br><span class="line"></span><br><span class="line">serv_addr.sin_family = AF_INET;</span><br><span class="line">serv_addr.sin_port = htons(PORT);</span><br><span class="line">serv_addr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line"><span class="built_in">memset</span>(&amp;(serv_addr.sin_zero), <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (connect(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr)) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;connect success!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((sendbytes = send(sockfd, buf, BUFF_SIZE, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    perror(<span class="string">&quot;send&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// printf (&quot;Send : %s\n&quot;, buf);</span></span><br><span class="line">close(sockfd);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>linux</tag>
        <tag>tcp/udp</tag>
      </tags>
  </entry>
  <entry>
    <title>thttpd</title>
    <url>/hexo/2023/08/03/tinyhttpd/</url>
    <content><![CDATA[<ul>
<li><p>下载源码</p>
<blockquote>
<p>git clone <a href="https://github.com/larryhe/tinyhttpd.git">https://github.com/larryhe/tinyhttpd.git</a></p>
</blockquote>
</li>
<li><p>运行 configure 生成 makefile</p>
</li>
<li><p>make &amp;&amp; make install -i</p>
<ul>
<li>i 的原因是忽略一个错误【网上资料说是因为 makefile 中多了一个空格导致的，直接忽略就行】</li>
</ul>
</li>
<li><p>创建  &#x2F;etc&#x2F;thttpd.conf </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dir=/usr/local/www #根目录</span><br><span class="line">user=root #所属用户权限</span><br><span class="line">logfile=/var/log/thttpd.log #日志文件存放位置</span><br><span class="line">pidfile=/var/run/thttpd.pid #pid 存放位置</span><br><span class="line">port=8080 #端口</span><br><span class="line">cgipat=/cgi-bin/* #cgi 程序存放位置</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务</p>
<blockquote>
<p>thttpd -C &#x2F;etc&#x2F;thttpd.conf</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>thttpd</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode开发 Linux 系统编程</title>
    <url>/hexo/2023/04/14/vscode-bian-xie-linux-c/</url>
    <content><![CDATA[<h1 id="vscode-插件下载"><a href="#vscode-插件下载" class="headerlink" title="vscode 插件下载"></a>vscode 插件下载</h1><ul>
<li>c&#x2F;c++</li>
<li>c&#x2F;c++ compile Run</li>
<li>c&#x2F;c++ snoppets</li>
<li>icon</li>
</ul>
<h1 id="setting-配置"><a href="#setting-配置" class="headerlink" title="setting 配置"></a>setting 配置</h1><ul>
<li>auto save: afteDelay</li>
<li>文本编辑器 – 格式化 – formatOnsave 勾选</li>
</ul>
<h1 id="项目路径创建-vscode文件夹"><a href="#项目路径创建-vscode文件夹" class="headerlink" title="项目路径创建.vscode文件夹"></a>项目路径创建.vscode文件夹</h1><ul>
<li>同时按住 control + alt + shift 输入 C&#x2F;C++:Edit Configurations回车</li>
<li>在 .vscode 中会有一个 c_cpp_propertitis.json 文件</li>
<li>在文件 includePath 中配置头文件路径</li>
</ul>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 配置</title>
    <url>/hexo/2022/11/29/vue-cli/</url>
    <content><![CDATA[<h1 id="Vue-脚手架打包注意事项"><a href="#Vue-脚手架打包注意事项" class="headerlink" title="Vue 脚手架打包注意事项"></a>Vue 脚手架打包注意事项</h1><h2 id="卸载-eslint（个人喜好）"><a href="#卸载-eslint（个人喜好）" class="headerlink" title="卸载 eslint（个人喜好）"></a>卸载 eslint（个人喜好）</h2><h3 id="终端执行命令"><a href="#终端执行命令" class="headerlink" title="终端执行命令"></a>终端执行命令</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">npm uninstall eslint --save-dev</span><br><span class="line">npm uninstall @vue/cli-plugin-eslint</span><br><span class="line">npm uninstall babel-eslint</span><br><span class="line">npm uninstall eslint-plugin-vue</span><br></pre></td></tr></table></figure>

<h2 id="编译阶段移除所有的-console-log"><a href="#编译阶段移除所有的-console-log" class="headerlink" title="编译阶段移除所有的 console.log()"></a>编译阶段移除所有的 console.log()</h2><p><a href="https://babeljs.io/docs/en/babel-plugin-transform-remove-console/">https://babeljs.io/docs/en/babel-plugin-transform-remove-console/</a></p>
<h3 id="babel-config-js"><a href="#babel-config-js" class="headerlink" title="babel.config.js"></a>babel.config.js</h3><h4 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h4><blockquote>
<p>npm install babel-plugin-transform-remove-console –save-dev</p>
</blockquote>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul>
<li>根路径添加 babel.config.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 项目开发阶段用到的babel插件</span></span><br><span class="line"><span class="keyword">const</span> prodPlugins = []</span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    prodPlugins.<span class="title function_">push</span>(<span class="string">&#x27;transform-remove-console&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;presets&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;plugins&#x27;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;component&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;libraryName&#x27;</span>: <span class="string">&#x27;element-ui&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;styleLibraryName&#x27;</span>: <span class="string">&#x27;theme-chalk&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 发布产品时候的插件数组</span></span><br><span class="line">        ...prodPlugins,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Webpack配置"><a href="#Webpack配置" class="headerlink" title="Webpack配置"></a>Webpack配置</h2><ul>
<li>通过 vue.config.js 修改 webpack 的默认配置</li>
</ul>
<p>官方文档</p>
<ul>
<li><a href="https://cli.vuejs.org/zh/config/#vue-config-js">https://cli.vuejs.org/zh/config/#vue-config-js</a></li>
</ul>
<h3 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h3><p>创建 vue.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 发布模式</span></span><br><span class="line">        config.<span class="title function_">when</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>, <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            config</span><br><span class="line">                .<span class="title function_">entry</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">                .<span class="title function_">clear</span>()</span><br><span class="line">                .<span class="title function_">add</span>(<span class="string">&#x27;./src/main-prod.js&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开发模式</span></span><br><span class="line">        config.<span class="title function_">when</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>, <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            config</span><br><span class="line">                .<span class="title function_">entry</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">                .<span class="title function_">clear</span>()</span><br><span class="line">                .<span class="title function_">add</span>(<span class="string">&#x27;./src/main-dev.js&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vue项目中-通过-externals-加载外部-CDN-资源"><a href="#Vue项目中-通过-externals-加载外部-CDN-资源" class="headerlink" title="Vue项目中 通过 externals 加载外部 CDN 资源"></a>Vue项目中 通过 externals 加载外部 CDN 资源</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">config.<span class="title function_">set</span>(<span class="string">&#x27;externals&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">    <span class="attr">axios</span>: <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">    <span class="attr">lodash</span>: <span class="string">&#x27;_&#x27;</span>,</span><br><span class="line">    <span class="attr">echarts</span>: <span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">    <span class="attr">nprogress</span>: <span class="string">&#x27;NProgress&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue-quill-editor&#x27;</span>: <span class="string">&#x27;VueQuillEditor&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">config.<span class="title function_">plugin</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">    args[<span class="number">0</span>].<span class="property">isProd</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="（1）整合到-vue-config-js"><a href="#（1）整合到-vue-config-js" class="headerlink" title="（1）整合到 vue.config.js"></a>（1）整合到 vue.config.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 发布模式</span></span><br><span class="line">        config.<span class="title function_">when</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>, <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            config</span><br><span class="line">                .<span class="title function_">entry</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">                .<span class="title function_">clear</span>()</span><br><span class="line">                .<span class="title function_">add</span>(<span class="string">&#x27;./src/main-prod.js&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 排除js </span></span><br><span class="line">      config.<span class="title function_">set</span>(<span class="string">&#x27;externals&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">        <span class="attr">axios</span>: <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">        <span class="attr">lodash</span>: <span class="string">&#x27;_&#x27;</span>,</span><br><span class="line">        <span class="attr">echarts</span>: <span class="string">&#x27;echarts&#x27;</span>,</span><br><span class="line">        <span class="attr">nprogress</span>: <span class="string">&#x27;NProgress&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;vue-quill-editor&#x27;</span>: <span class="string">&#x27;VueQuillEditor&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开发模式</span></span><br><span class="line">        config.<span class="title function_">when</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>, <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">            config</span><br><span class="line">                .<span class="title function_">entry</span>(<span class="string">&#x27;app&#x27;</span>)</span><br><span class="line">                .<span class="title function_">clear</span>()</span><br><span class="line">                .<span class="title function_">add</span>(<span class="string">&#x27;./src/main-dev.js&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="（2）上面改完后需要在-pblic-index-html-文件的头部，添加如下-CDN-资源引用"><a href="#（2）上面改完后需要在-pblic-index-html-文件的头部，添加如下-CDN-资源引用" class="headerlink" title="（2）上面改完后需要在 pblic&#x2F;index.html 文件的头部，添加如下 CDN 资源引用"></a>（2）上面改完后需要在 pblic&#x2F;index.html 文件的头部，添加如下 CDN 资源引用</h3><ul>
<li><p>比如 vue.js，axoius.js 的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- nprogress 的样式表文件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/nprogress/0.2.0/nprogress.min.css&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;!-- 富文本编辑器 的样式表文件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/quill/1.3.4/quill.core.min.css&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/quill/1.3.4/quill.snow.min.css&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/quill/1.3.4/quill.bubble.min.css&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;!-- element-ui 的样式表文件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue/2.5.22/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/vue-router/3.0.1/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/axios/0.18.0/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/lodash.js/4.17.11/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/echarts/4.1.0/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/nprogress/0.2.0/nprogress.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 富文本编辑器的 js 文件 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/quill/1.3.4/quill.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.4/dist/vue-quill-editor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- element-ui 的 js 文件 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/element-ui/2.8.2/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p><strong>官网</strong>：<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html">https://router.vuejs.org/zh/guide/advanced/lazy-loading.html</a></p>
<p>解释：当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><blockquote>
<p>npm install –save-dev @babel&#x2F;plugin-syntax-dynamic-import</p>
</blockquote>
<h3 id="声明插件"><a href="#声明插件" class="headerlink" title="声明插件"></a>声明插件</h3><blockquote>
<p>在 babel.config.js 配置文件中声明该插件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 项目开发阶段用到的babel插件</span></span><br><span class="line"><span class="keyword">const</span> prodPlugins = []</span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  prodPlugins.<span class="title function_">push</span>(<span class="string">&#x27;transform-remove-console&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;presets&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;plugins&#x27;</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;component&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&#x27;libraryName&#x27;</span>: <span class="string">&#x27;element-ui&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;styleLibraryName&#x27;</span>: <span class="string">&#x27;theme-chalk&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 发布产品时候的插件数组</span></span><br><span class="line">    ...prodPlugins,</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 懒加载插件</span></span><br><span class="line">    <span class="string">&#x27;@babel/plugin-syntax-dynamic-import&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="将路由改造成按需加载模式"><a href="#将路由改造成按需加载模式" class="headerlink" title="将路由改造成按需加载模式"></a>将路由改造成按需加载模式</h3><p><strong>例如：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Login.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Welcome</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Welcome.vue&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>转变：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小括号前面：注释，后面是真正的组件位置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Login</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;Login_Home_Welcome&quot; */</span> <span class="string">&#x27;../components/Login.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;Login_Home_Welcome&quot; */</span> <span class="string">&#x27;../components/Home.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Welcome</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;Login_Home_Welcome&quot; */</span> <span class="string">&#x27;../components/Welcome.vue&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="项目上线"><a href="#项目上线" class="headerlink" title="项目上线"></a>项目上线</h2><h3 id="Node-版本"><a href="#Node-版本" class="headerlink" title="Node 版本"></a>Node 版本</h3><ul>
<li><p>将 vue 打包成的 dist 文件夹托管为静态资源即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 托管静态资源</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./dist&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 web 服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;web server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="docker部署-略"><a href="#docker部署-略" class="headerlink" title="docker部署 (略)"></a>docker部署 (略)</h4><h3 id="Nginx-版本"><a href="#Nginx-版本" class="headerlink" title="Nginx 版本"></a>Nginx 版本</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/json;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        # 指定前端项目所在的位置</span><br><span class="line">        location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html/back-vue;</span><br><span class="line">        index  index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue打包配置</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>wireshark</title>
    <url>/hexo/2023/07/09/wireshark/</url>
    <content><![CDATA[<p><img src="/hexo/2023/07/09/wireshark/wireshark/image-20230811211811504.png" alt="image-20230811211811504"></p>
]]></content>
      <categories>
        <category>wireshark</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>总线协议</title>
    <url>/hexo/2023/06/09/zong-xian-xie-yi/</url>
    <content><![CDATA[<h1 id="总线通信基本概念"><a href="#总线通信基本概念" class="headerlink" title="总线通信基本概念"></a>总线通信基本概念</h1><ul>
<li>通信方向划分<ul>
<li>全双工，收发数据可以同时进行</li>
<li>半双工，不能同时收发数据，数据发时不能接收，比如：I2C</li>
</ul>
</li>
<li>同步通信，公用时钟信号线<ul>
<li>比如：I2C，SPI，USB3.0</li>
<li>一般不支持远距离，通常是板级别之间的距离小于50cm的TTL电平</li>
<li>同等条件下比异步通信快一些</li>
<li>也可通过走差分信号实现更远距离的通信</li>
</ul>
</li>
<li>异步通信<ul>
<li>比如：uart，usb2.0，RJ45</li>
<li>通信距离会稍远一些，通常是主机或设备之间的通信</li>
<li>为了实现更远距离通信，一般走差分信号，比如：232，485，422，CAN</li>
</ul>
</li>
<li>串行通信<ul>
<li>定义：一个并发数据包被分成多次传输，大多数表现为以 bit 位为单位收发数据</li>
<li>传输方式：传输一个字节（8个位）的数据时，串口是将8个位排好队，逐个地在1条连接线上传输。</li>
<li>特点：通信线路简单，利用电话或电报线就可以实现通信，降低成本，适用于远距离通信，但传输速度慢。</li>
</ul>
</li>
<li>并行通信<ul>
<li>定义： 并行通信是指利用多条传输线将一个数据的各位同时传送</li>
<li>传输方式：传输一个字节（8个位）的数据时，并口是将8个位一字排开，分别在8条连接线上同时传输。</li>
<li>特点：传输速度块，适用于短距离通信。</li>
</ul>
</li>
</ul>
<p>Linux支持的总线有</p>
<blockquote>
<p>ls &#x2F;sys&#x2F;bus&#x2F;</p>
</blockquote>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ubuntu@server:~$ ls /sys/bus/</span><br><span class="line">acpi/            event_source/    machinecheck/    node/            pnp/             spi/             xen-backend/</span><br><span class="line">clockevents/     gpio/            mdio_bus/        nvmem/           rapidio/         usb/             </span><br><span class="line">clocksource/     hid/             memory/          pci/             scsi/            virtio/          </span><br><span class="line">container/       i2c/             mipi-dsi/        pci-epf/         sdio/            vme/             </span><br><span class="line">cpu/             isa/             mmc/             pci_express/     serial/          workqueue/       </span><br><span class="line">edac/            iscsi_flashnode/ nd/              platform/        serio/           xen/        </span><br></pre></td></tr></table></figure>



<h1 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h1><ul>
<li><p>因为没有片选信号所以选择从机是通过地址来实现的</p>
</li>
<li><p>通过启起和终止信号来标识一次完整的通信过程</p>
</li>
<li><p>通信过程</p>
<ul>
<li>主机发起起始信号（时钟高电平期间，数据产生一个下降沿）</li>
<li>发送地址，通信之前先通过从机地址选中要通信的从机设备<ul>
<li>地址一般从模块芯片数据手册中获得</li>
<li>为了避免出现地址重复（不规范)，有的也提供外部IO来手动指定）</li>
<li>通常是7位表示，也有10位地址</li>
</ul>
</li>
<li>主机接受到对应从机的应答<ul>
<li>ACK 表示正确应答</li>
<li>NACK 表示异常应答</li>
</ul>
</li>
<li>开始传输数据，而且每传输8位数据应答一位</li>
<li>主机发起停止信号（从机无法发起） 【时钟高电平期间，数据产生一个上升沿】</li>
<li>本次通信结束</li>
</ul>
</li>
<li><p>数据传输先发高位再发低位</p>
</li>
<li><p><img src="/hexo/2023/06/09/zong-xian-xie-yi/%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/image-20230801095335830.png" alt="image-20230801095335830"></p>
</li>
<li><p>I2C 是电平触发数据传输，不同于spi 的边缘触发</p>
</li>
<li><p>时钟低电平准备，高电平采集数据</p>
</li>
<li><p>位速率可达400kbit&#x2F;s</p>
</li>
<li><p>I2C传输格式（写数据）</p>
<p><img src="/hexo/2023/06/09/zong-xian-xie-yi/%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/image-20230801100924367.png" alt="image-20230801100924367"></p>
</li>
<li><p>I2C传输格式（读数据）</p>
<p><img src="/hexo/2023/06/09/zong-xian-xie-yi/%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/image-20230801101033404.png" alt="image-20230801101033404"></p>
</li>
<li><p>I2C 工作模式</p>
<ul>
<li>标准模式：位速率100kbit&#x2F;s</li>
<li>快速模式：位速率可达400kbit&#x2F;s 向下兼容</li>
<li>高速模式：位速率可达 3.4 Mbit&#x2F;s 向下兼容</li>
</ul>
</li>
</ul>
<h2 id="i2c-模拟时许分布实现"><a href="#i2c-模拟时许分布实现" class="headerlink" title="i2c 模拟时许分布实现"></a>i2c 模拟时许分布实现</h2><ul>
<li><p>起始信号时序编写</p>
<p><img src="/hexo/2023/06/09/zong-xian-xie-yi/%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/image-20230801105414199.png" alt="image-20230801105414199"></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 起始信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demo_i2c_start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将数据置1</span></span><br><span class="line">    data_set();</span><br><span class="line">    <span class="comment">// 将时钟置1</span></span><br><span class="line">    clk_set();</span><br><span class="line">    demo_i2c_dalay();</span><br><span class="line">    data_clear();</span><br><span class="line">    demo_i2c_dalay();</span><br><span class="line">    <span class="comment">// 空闲时钟为低电平</span></span><br><span class="line">    clk_clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>终止信号时序编写</p>
<p><img src="/hexo/2023/06/09/zong-xian-xie-yi/%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/image-20230801110848197.png" alt="image-20230801110848197"></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 终止信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demo_i2c_stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将数据置0</span></span><br><span class="line">    data_clear();</span><br><span class="line">    <span class="comment">// 将时钟置1</span></span><br><span class="line">    clk_set();</span><br><span class="line">    demo_i2c_dalay();</span><br><span class="line">    data_set();</span><br><span class="line">    demo_i2c_dalay();</span><br><span class="line">    <span class="comment">// 空闲时钟为高电平</span></span><br><span class="line">    clk_clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>发送数据</p>
<p><img src="/hexo/2023/06/09/zong-xian-xie-yi/%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/image-20230801113840396.png" alt="image-20230801113840396"></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demo_i2c_send_byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    clk_clear(); <span class="comment">// 时钟为低电平开始准备</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (data &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">7</span> - i)))</span><br><span class="line">            data_set();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            data_clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待准备的数据稳定</span></span><br><span class="line">        demo_i2c_dalay();</span><br><span class="line">        <span class="comment">// 数据已稳定对方可以读取</span></span><br><span class="line">        clk_set();</span><br><span class="line">        <span class="comment">// 等待对方读取数据</span></span><br><span class="line">        demo_i2c_dalay();</span><br><span class="line">        clk_clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>接收数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">demo_i2c_recv_byte</span><span class="params">(viod)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    data_in();</span><br><span class="line">    clk_clear(); <span class="comment">// 时钟为低电平对方开始准备</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 等待对方准备好数据</span></span><br><span class="line">        demo_i2c_dalay();</span><br><span class="line">        <span class="comment">// 数据已稳定可以读取</span></span><br><span class="line">        clk_set();</span><br><span class="line">        <span class="comment">// 先延时再读，避免发送临界</span></span><br><span class="line">        demo_i2c_dalay();</span><br><span class="line">        data |= data_get_in() &lt;&lt; (<span class="number">7</span> - i);</span><br><span class="line">        clk_clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>发送应答时序编写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">demo_i2c_send_ack</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> ack)</span></span><br><span class="line">&#123;</span><br><span class="line">    data_out();</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    clk_clear(); <span class="comment">// 时钟为低电平开始准备</span></span><br><span class="line">    <span class="keyword">if</span> (ack)</span><br><span class="line">        data_set();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        data_clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待准备的数据稳定</span></span><br><span class="line">    demo_i2c_dalay();</span><br><span class="line">    <span class="comment">// 数据已稳定对方可以读取</span></span><br><span class="line">    clk_set();</span><br><span class="line">    <span class="comment">// 等待对方读取数据</span></span><br><span class="line">    demo_i2c_dalay();</span><br><span class="line">    clk_clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>接收应答</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">demo_i2c_recv_ack</span><span class="params">(viod)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ack = <span class="number">0</span>;</span><br><span class="line">    data_in();</span><br><span class="line">    <span class="comment">// 时钟为低电平对方开始准备</span></span><br><span class="line">    clk_clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待对方准备好数据</span></span><br><span class="line">    demo_i2c_dalay();</span><br><span class="line">    <span class="comment">// 数据已稳定可以读取</span></span><br><span class="line">    clk_set();</span><br><span class="line">    <span class="comment">// 先延时再读，避免发送临界</span></span><br><span class="line">    demo_i2c_dalay();</span><br><span class="line">    ack = data_get_in();</span><br><span class="line">    clk_clear();</span><br><span class="line">    <span class="keyword">return</span> ack;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>批量数据发送伪代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 buf 中的长度为 lem 的数据写到 reg 的寄存器里面</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demo_i2c_send</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">unsigned</span> <span class="type">char</span> reg, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 起始信号</span></span><br><span class="line">    <span class="comment">// 发送器件地址(包含读写标志)</span></span><br><span class="line">    <span class="comment">// 接收应答</span></span><br><span class="line">    <span class="comment">// 发送数据存放寄存器地址</span></span><br><span class="line">    <span class="comment">// 接收应答</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        <span class="comment">// 接收应答</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 终止信号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h1><h2 id="usb-传输类型"><a href="#usb-传输类型" class="headerlink" title="usb 传输类型"></a>usb 传输类型</h2><ul>
<li><p>usb定义了4种类传输类型</p>
<ul>
<li>批量传输</li>
<li>同步传输（或等时传输）</li>
<li>中断传输，这里指是一种异步通信方式而已，而不是物理中断，实际传输靠沦陷实现</li>
<li>控制传输</li>
</ul>
</li>
<li><p>所有的命令均由主机发起，从机处于被应答状态</p>
</li>
<li><p>usb 传输事物</p>
<p><img src="/hexo/2023/06/09/zong-xian-xie-yi/%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/image-20230809220527140.png" alt="image-20230809220527140"></p>
</li>
</ul>
<h2 id="usb设备描述符及其枚举过程"><a href="#usb设备描述符及其枚举过程" class="headerlink" title="usb设备描述符及其枚举过程"></a>usb设备描述符及其枚举过程</h2><ul>
<li>描述符：描述了设备的各种行为和具体参数类型等，能够让主机明确应该加载什么样的驱动程序于设备之间进行怎么样的操作</li>
<li>设备描述符：基本是与厂商有关的信息，比如厂商id（vid），产品id（pid），可能的配置数量</li>
<li>配置描述符号：设备对主机提出的配置需求，记录可能的接口数量</li>
<li>接口描述符：功能的体现，记录断点的数量。</li>
<li>端点描述符：决定 usb 传输类型，也是通信的终点，类似是 Linux 系统的管道端口</li>
<li>枚举过程<ul>
<li>所谓枚举，其实就是一一列举的过程</li>
<li>设备连接主机开始，直到给设备完成从机地址的整个分配过程</li>
<li>只有成功被枚的设备才能进入正常的数据传输过程</li>
<li>枚举之前与设备通信是通过 0 地址和 0 端点进行的</li>
</ul>
</li>
</ul>
<h2 id="Linux-usb驱动开发框架"><a href="#Linux-usb驱动开发框架" class="headerlink" title="Linux usb驱动开发框架"></a>Linux usb驱动开发框架</h2><ul>
<li><p>主要有两类 usb 驱动开发</p>
<ul>
<li>usb 设备驱动程序（usb device drivers）：控制器端驱动，控制插入其中的 usb 设备</li>
<li>usb 期间驱动程序（usb gadget drivers）：设备端驱动，控制该设备如何作为一个 usb 设备和主机通信</li>
</ul>
<p>设备和主机通信</p>
</li>
<li><p>Linux usb驱动框架</p>
<p><img src="/hexo/2023/06/09/zong-xian-xie-yi/%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/image-20230809223618785.png" alt="image-20230809223618785"></p>
</li>
</ul>
<h2 id="Linux-usb驱动开发流程"><a href="#Linux-usb驱动开发流程" class="headerlink" title="Linux usb驱动开发流程"></a>Linux usb驱动开发流程</h2><ul>
<li>官方建议参考  usb-skeleton.c</li>
<li>定义一个 usb_driver</li>
<li>填充并初始化 usb_driver</li>
<li>通过 usb_register() 完成注册</li>
<li>通过 usb_unregister() 完成注销</li>
<li>完成 usb_device_id 配置条件的选择</li>
<li>usb 数据传输过程</li>
</ul>
<h1 id="串口（UART）"><a href="#串口（UART）" class="headerlink" title="串口（UART）"></a>串口（UART）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>串口协议是一种在计算机和外部设备之间进行串行通信的规定或约定。它规定了数据在串口通信线路上传输的格式、速率、校验、流控制等参数，以确保发送方和接收方正确地解释和处理数据。</li>
<li>常见的串口协议包括以下主要内容：<ol>
<li><strong>数据位（Data Bits）</strong>： 数据位指定了每个数据字节中实际有效数据的位数。通常为5、6、7或8位。</li>
<li><strong>停止位（Stop Bits）</strong>： 停止位表示每个数据字节之后传输的空闲位数。常用的有1位和2位停止位。</li>
<li><strong>奇偶校验（Parity）</strong>： 奇偶校验用于检测传输过程中数据错误。校验位可以是奇校验（校验位被设置为确保数据位中的位数为奇数）或偶校验（校验位被设置为确保数据位中的位数为偶数）。</li>
<li><strong>波特率（Baud Rate）</strong>： 波特率指定了数据传输的速率，即单位时间内传输的位数。波特率常用的有9600、19200、38400、57600、115200等。</li>
<li><strong>流控制（Flow Control）</strong>： 流控制用于协调发送方和接收方之间的数据传输速度，以避免数据丢失。常见的流控制方式有硬件流控制（使用RTS&#x2F;CTS信号进行控制）和软件流控制（使用XON&#x2F;XOFF字符进行控制）。</li>
<li><strong>起始符和结束符</strong>： 有些串口通信协议在数据传输中会使用特定的起始符和结束符，以标识数据的开始和结束。</li>
</ol>
</li>
<li>串口协议的定义对于正确地进行串口通信非常重要。发送方和接收方必须遵守相同的协议规定，以确保数据的正确传输和解析。不同设备和应用场景可能会使用不同的串口协议，因此在使用串口进行通信时，需要了解和配置相应的串口协议参数</li>
</ul>
<h1 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h1><h1 id="CAN"><a href="#CAN" class="headerlink" title="CAN"></a>CAN</h1>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>I2C</tag>
        <tag>SPI</tag>
        <tag>USB</tag>
        <tag>UART</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL practise</title>
    <url>/hexo/2021/11/16/niu-ke-mysql/</url>
    <content><![CDATA[<h1 id="MySQL-exam"><a href="#MySQL-exam" class="headerlink" title="MySQL exam"></a>MySQL exam</h1><p>[传送门](<a href="https://www.nowcoder.com/exam/oj?tab=SQL%E7%AF%87&topicId=199&fromPut=pc_wzcpa_yupi_sf">牛客网 - 找工作神器|笔试题库|面试经验|实习招聘内推，求职就业一站解决_牛客网 (nowcoder.com)</a>)</p>
<h2 id="创建数据库并插入数据"><a href="#创建数据库并插入数据" class="headerlink" title="创建数据库并插入数据"></a>创建数据库并插入数据</h2><h3 id="SQL-Select-语句完整的执行顺序"><a href="#SQL-Select-语句完整的执行顺序" class="headerlink" title="SQL Select 语句完整的执行顺序"></a>SQL Select 语句完整的执行顺序</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1、from 子句组装来自不同数据源的数据；</span><br><span class="line">2、where 子句基于指定的条件对记录行进行筛选； </span><br><span class="line">3、group by 子句将数据划分为多个分组； </span><br><span class="line">4、使用聚集函数进行计算； </span><br><span class="line">5、使用 having 子句筛选分组； </span><br><span class="line">6、计算所有的表达式； </span><br><span class="line">7、select 的字段； </span><br><span class="line">8、使用 order by 对结果集进行排序。</span><br><span class="line"></span><br><span class="line">SQL 语言不同于其他编程语言的最明显特征是处理代码的顺序。 在大多数据库语言中，代码按编码顺序被处理。但在 SQL 语句中，第一个被处理的子句式 FROM，而不是第一出现的 SELECT。</span><br></pre></td></tr></table></figure>

<h3 id="语句顺序展示"><a href="#语句顺序展示" class="headerlink" title="语句顺序展示"></a>语句顺序展示</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">(1) FROM &lt;left_table&gt; </span><br><span class="line">(2) &lt;join_type&gt; JOIN &lt;right_table&gt; </span><br><span class="line">(3) ON &lt;join_condition&gt; </span><br><span class="line">(4) WHERE &lt;where_condition&gt; </span><br><span class="line">(5) GROUP BY &lt;group_by_list&gt;</span><br><span class="line">(6) WITH &#123;CUBE | ROLLUP&#125; </span><br><span class="line">(7) HAVING &lt;having_condition&gt; </span><br><span class="line">(8) SELECT (9) DISTINCT </span><br><span class="line">(9) ORDER BY &lt;order_by_list&gt; </span><br><span class="line">(10) &lt;TOP_specification&gt; &lt;select_list&gt;</span><br></pre></td></tr></table></figure>

<h2 id="要求返回结果的形式"><a href="#要求返回结果的形式" class="headerlink" title="要求返回结果的形式"></a>要求返回结果的形式</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><ul>
<li><p>样式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1	2138	male	21	北京大学	BeiJing</span><br><span class="line">2	3214	male		复旦大学	Shanghai</span><br><span class="line">3	6543	female	20	北京大学	BeiJing</span><br><span class="line">4	2315	female	23	浙江大学	ZheJiang</span><br><span class="line">5	5432	male	25	山东大学	Shandong</span><br></pre></td></tr></table></figure>


</li>
<li><p>题解</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 牛客第一题</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">	id,device_id,gender,age,university,province </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	user_profile</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><ul>
<li><p>样式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">2138	male	21	北京大学</span><br><span class="line">3214	male		复旦大学</span><br><span class="line">6543	female	20	北京大学</span><br><span class="line">2315	female	23	浙江大学</span><br><span class="line">5432	male	25	山东大学</span><br></pre></td></tr></table></figure>
</li>
<li><p>题解</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 牛客第二题</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	device_id,gender,age,university </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	user_profile</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第三题（结果去重）"><a href="#第三题（结果去重）" class="headerlink" title="第三题（结果去重）"></a>第三题（结果去重）</h3><ul>
<li><p>样式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">北京大学</span><br><span class="line">复旦大学</span><br><span class="line">浙江大学</span><br><span class="line">山东大学</span><br></pre></td></tr></table></figure>


</li>
<li><p>题解</p>
<ul>
<li><strong>distinct</strong> 去掉查询结果的重复数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 牛客第三题,去重</span></span><br><span class="line"><span class="comment">-- distinct 去掉查询结果的重复数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> </span><br><span class="line">	university </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">	user_profile</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第三题（limit-关键字考察）"><a href="#第三题（limit-关键字考察）" class="headerlink" title="第三题（limit 关键字考察）"></a>第三题（limit 关键字考察）</h3><ul>
<li><p>样式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">device_id</span><br><span class="line">2138</span><br><span class="line">3214</span><br></pre></td></tr></table></figure>
</li>
<li><p>题解</p>
<ul>
<li><strong>limit</strong> 展示查询结果的前多少数据，多用于分页查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	device_id </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	user_profile </span><br><span class="line">limit <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第四题（as）关键字考察"><a href="#第四题（as）关键字考察" class="headerlink" title="第四题（as）关键字考察"></a>第四题（as）关键字考察</h3><ul>
<li><p>样式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">user_infos_example</span><br><span class="line">2138</span><br><span class="line">3214</span><br></pre></td></tr></table></figure>


</li>
<li><p>题解</p>
<ul>
<li><strong>as</strong>  给数据字段起别名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> device_id user_infos_example <span class="keyword">from</span> user_profile limit <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第五题（where-）精确查询"><a href="#第五题（where-）精确查询" class="headerlink" title="第五题（where ）精确查询"></a>第五题（where ）精确查询</h3><ul>
<li><p>样式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">device_id university</span><br><span class="line">  2138	   北京大学</span><br><span class="line">  6543	   北京大学</span><br></pre></td></tr></table></figure>
</li>
<li><p>题解</p>
<ul>
<li><strong>where</strong> 连接查询条件</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> device_id,university <span class="keyword">from</span> user_profile <span class="keyword">where</span> university<span class="operator">=</span>&quot;北京大学&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第六题（where）条件查询"><a href="#第六题（where）条件查询" class="headerlink" title="第六题（where）条件查询"></a>第六题（where）条件查询</h3><ul>
<li><p>要求</p>
<blockquote>
<p><strong>查找年龄大于24岁的用户信息</strong></p>
</blockquote>
</li>
<li><p>样式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">device_id	gender	age	university</span><br><span class="line">5432	male	25	山东大学</span><br></pre></td></tr></table></figure>


</li>
<li><p>题解</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> device_id,gender,age,university <span class="keyword">from</span> user_profile <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">24</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第七题（where，between-and）区间查询"><a href="#第七题（where，between-and）区间查询" class="headerlink" title="第七题（where，between and）区间查询"></a>第七题（where，between and）区间查询</h3><ul>
<li><p>要求</p>
<blockquote>
<p>现在运营想要针对20岁及以上且23岁及以下的用户开展分析，请你取出满足条件的设备ID、性别、年龄。</p>
<p>用户信息表：user_profile</p>
</blockquote>
</li>
<li><p>样式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">device_id	gender	age</span><br><span class="line">2138	male	21</span><br><span class="line">6543	female	20</span><br><span class="line">2315	female	23</span><br></pre></td></tr></table></figure>
</li>
<li><p>题解</p>
<ul>
<li>解法一</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> device_id,gender,age <span class="keyword">from</span> user_profile <span class="keyword">where</span> age<span class="operator">&lt;=</span><span class="number">23</span></span><br></pre></td></tr></table></figure>



<ul>
<li>解法二</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> device_id,gender,age <span class="keyword">from</span> user_profile <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">23</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第八题（"><a href="#第八题（" class="headerlink" title="第八题（&gt;&#x3D;&lt;, !&#x3D;,&lt;&gt;）逻辑词考察"></a>第八题（&gt;&#x3D;&lt;, !&#x3D;,&lt;&gt;）逻辑词考察</h3><ul>
<li><p>要求</p>
<blockquote>
<p>查找除复旦大学的用户信息</p>
</blockquote>
</li>
<li><p>样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">device_id	gender	age	university</span><br><span class="line">2138	male	21	北京大学</span><br><span class="line">6543	female	20	北京大学</span><br><span class="line">2315	female	23	浙江大学</span><br><span class="line">5432	male	25	山东大学</span><br></pre></td></tr></table></figure>


</li>
<li><p>题解</p>
<ul>
<li>解法一</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> device_id,gender,age,university <span class="keyword">from</span> user_profile <span class="keyword">where</span> university<span class="operator">&lt;&gt;</span><span class="string">&#x27;复旦大学&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解法二</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> device_id,gender,age,university <span class="keyword">from</span> user_profile <span class="keyword">where</span> university <span class="operator">!=</span> <span class="string">&#x27;复旦大学&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解法三</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> device_id,gender,age,university <span class="keyword">from</span> user_profile <span class="keyword">where</span> university <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;复旦大学&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>[ NOT ] IN (‘常量1’ , ‘常量2’ , ‘常量3’ , ‘常量4’)</p>
<ul>
<li>IN：当列表中的值于IN中的某个值相等时，则结果为 True，表明此记录为符合查询条件的记录</li>
<li>NOT IN：当列中的值与某个常量值相等时，结果为False，表明此纪录为不符合查询条件的记录。</li>
</ul>
</li>
<li><p>例子：查询所有班名是“电子信息工程技术”、“电子声像”或“电子组装技术”的班号和班名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 班号, 班名 <span class="keyword">FROM</span> 班级表</span><br><span class="line"><span class="keyword">WHERE</span> 班名 <span class="keyword">IN</span> (<span class="string">&#x27;电子信息工程技术&#x27;</span> , <span class="string">&#x27;电子声像‘, &#x27;</span>电子组装技术<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>等价于：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 班号,班名 <span class="keyword">FROM</span> 班级表</span><br><span class="line"><span class="keyword">WHERE</span> 班名<span class="operator">=</span> ‘电子信息工程技术’ <span class="keyword">OR</span></span><br><span class="line">班名 <span class="operator">=</span> ‘电子声像’ <span class="keyword">OR</span></span><br><span class="line">班名 <span class="operator">=</span> ‘电子组装技术’</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第九题（is-not、is）"><a href="#第九题（is-not、is）" class="headerlink" title="第九题（is not、is）"></a>第九题（is not、is）</h3><ul>
<li><p>要求</p>
<blockquote>
<p>用 where 过滤空值练习</p>
</blockquote>
</li>
<li><p>样式</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">device_id	gender	age	university</span><br><span class="line">2138	male	21	北京大学</span><br><span class="line">6543	female	20	北京大学</span><br><span class="line">2315	female	23	浙江大学</span><br><span class="line">5432	male	25	山东大学</span><br></pre></td></tr></table></figure>
</li>
<li><p>题解</p>
<ul>
<li>题解一</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	device_id,gender,age,university </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	user_profile </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">	age <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<ul>
<li>题解二</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> device_id,gender,age,university</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line"><span class="keyword">where</span> age <span class="operator">!=</span><span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h3><ul>
<li><h3 id><a href="#" class="headerlink" title></a></h3><p>一般形式为：</p>
<p>列名 [NOT ] LIKE</p>
<p>匹配串中可包含如下四种通配符：<br>_：匹配任意一个字符；<br>%：匹配0个或多个字符；<br>[ ]：匹配[ ]中的任意一个字符(若要比较的字符是连续的，则可以用连字符“-”表 达 )；<br>[^ ]：不匹配[ ]中的任意一个字符。</p>
<p>例23．查询学生表中姓‘张’的学生的详细信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>` `<span class="operator">*</span> ``<span class="keyword">FROM</span>` `学生表 ``<span class="keyword">WHERE</span>` `姓名 ``<span class="keyword">LIKE</span>` `‘张<span class="operator">%</span>’</span><br></pre></td></tr></table></figure>

<p>例24．查询姓“张”且名字是3个字的学生姓名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>` `<span class="operator">*</span> ``<span class="keyword">FROM</span>` `学生表 ``<span class="keyword">WHERE</span>` `姓名 ``<span class="keyword">LIKE</span>` `<span class="string">&#x27;张__’</span></span><br></pre></td></tr></table></figure>

<p>如果把姓名列的类型改为nchar(20)，在SQL Server 2012中执行没有结果。原因是姓名列的类型是char(20)，当姓名少于20个汉字时，系统在存储这些数据时自动在后边补空格，空格作为一个字符，也参加LIKE的比较。可以用rtrim()去掉右空格。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>` `<span class="operator">*</span> ``<span class="keyword">FROM</span>` `学生表 ``<span class="keyword">WHERE</span>` `rtrim(姓名) ``<span class="keyword">LIKE</span>` `<span class="string">&#x27;张__&#x27;</span></span><br></pre></td></tr></table></figure>

<p>例25.查询学生表中姓‘张’、姓‘李’和姓‘刘’的学生的情况。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>` `<span class="operator">*</span> ``<span class="keyword">FROM</span>` `学生表 ``<span class="keyword">WHERE</span>` `姓名 ``<span class="keyword">LIKE</span>` `<span class="string">&#x27;[张李刘]%’</span></span><br></pre></td></tr></table></figure>

<p>例26.查询学生表表中名字的第2个字为“小”或“大”的学生的姓名和学号。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>` `姓名,学号 ``<span class="keyword">FROM</span>` `学生表 ``<span class="keyword">WHERE</span>` `姓名 ``<span class="keyword">LIKE</span>` `<span class="string">&#x27;_[小大]%&#x27;</span></span><br></pre></td></tr></table></figure>

<p>例27.查询学生表中所有不姓“刘”的学生。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>` `姓名 ``<span class="keyword">FROM</span>` `学生 ``<span class="keyword">WHERE</span>` `姓名 ``<span class="keyword">NOT</span>` `<span class="keyword">LIKE</span>` `<span class="string">&#x27;刘%’</span></span><br></pre></td></tr></table></figure>

<p>例28.从学生表表中查询学号的最后一位不是2、3、5的学生信息。</p>
<p><a href="https://www.nowcoder.com/practice/95d9922b1e2a49de80daa491889969ee?tpId=199&tqId=1971219&ru=/practice/f9f82607cac44099a77154a80266234a&qru=/ta/sql-quick-study/question-ranking&sourceUrl=/exam/oj?tab=SQL%E7%AF%87&topicId=199&fromPut=pc_wzcpa_yupi_sf#">复制代码</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>` `<span class="operator">*</span> ``<span class="keyword">FROM</span>` `学生表 ``<span class="keyword">WHERE</span>` `学号 ``<span class="keyword">LIKE</span>` `<span class="string">&#x27;%[^235]&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第十题（max）"><a href="#第十题（max）" class="headerlink" title="第十题（max）"></a>第十题（max）</h3><ul>
<li><p>找出复旦大学 gpa 最高是多少</p>
<ul>
<li><p>解法一：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 方法<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(gpa) <span class="keyword">as</span> gpa</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line"><span class="keyword">where</span> university<span class="operator">=</span><span class="string">&#x27;复旦大学&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解法二</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 方法<span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> gpa</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line"><span class="keyword">where</span> university<span class="operator">=</span><span class="string">&#x27;复旦大学&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> gpa <span class="keyword">desc</span> limit <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第十一题（avg，round）"><a href="#第十一题（avg，round）" class="headerlink" title="第十一题（avg，round）"></a>第十一题（avg，round）</h3><ul>
<li><p>现在运营想要看一下男性用户有多少人以及他们的平均gpa是多少，用以辅助设计相关活动，请你取出相应数据。</p>
</li>
<li><p><strong>avg</strong>：平均值</p>
</li>
<li><p><strong>round</strong>：保留小数</p>
<ul>
<li><p>解法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> male_num,gpa <span class="keyword">as</span> avg_gpa <span class="keyword">where</span> user_profile <span class="keyword">where</span> gender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第十二题（group-by）"><a href="#第十二题（group-by）" class="headerlink" title="第十二题（group by）"></a>第十二题（group by）</h3><ul>
<li><p>题目：现在运营想要对每个学校不同性别的用户活跃情况和发帖数量进行分析，请分别计算出每个学校每种性别的用户数、30天内平均活跃天数和平均发帖数量。</p>
</li>
<li><p>信息：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">用户信息表：user_profile</span><br><span class="line">30天内活跃天数字段（active_days_within_30）</span><br><span class="line">发帖数量字段（question_cnt）</span><br><span class="line">回答数量字段（answer_cnt）</span><br></pre></td></tr></table></figure>
</li>
<li><p>表信息说明</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">第一行表示:id为1的用户的常用信息为使用的设备id为2138，性别为男，年龄21岁，北京大学，gpa为3.4在过去的30天里面活跃了7天，发帖数量为2，回答数量为12</span><br><span class="line">。。。</span><br><span class="line">最后一行表示:id为7的用户的常用信息为使用的设备id为4321，性别为男，年龄26岁，复旦大学，gpa为3.6在过去的30天里面活跃了9天，发帖数量为6，回答数量为52</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>group by</strong>：按照字段分组，可以是多个字段</p>
<ul>
<li><p>解法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    gender,university,</span><br><span class="line">    <span class="built_in">count</span>(device_id) <span class="keyword">as</span> user_num,</span><br><span class="line">    <span class="built_in">avg</span>(active_days_within_30) <span class="keyword">as</span> avg_active_day,</span><br><span class="line">    <span class="built_in">avg</span>(question_cnt) <span class="keyword">as</span> avg_question_cnt</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">by</span> university,gender</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第十九题"><a href="#第十九题" class="headerlink" title="第十九题"></a>第十九题</h3><ul>
<li><p>题目：现在运营想查看每个学校用户的平均发贴和回帖情况，寻找低活跃度学校进行重点运营，请取出平均发贴数低于5的学校或平均回帖数小于20的学校。</p>
</li>
<li><p>表格描述</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">第一行表示:id为1的用户的常用信息为使用的设备id为2138，性别为男，年龄21岁，北京大学，gpa为3.4在过去的30天里面活跃了7天，发帖数量为2，回答数量为12</span><br><span class="line">。。。</span><br><span class="line">最后一行表示:id为7的用户的常用信息为使用的设备id为4321，性别为男，年龄26岁，复旦大学，gpa为3.6在过去的30天里面活跃了9天，发帖数量为6，回答数量为52</span><br><span class="line"></span><br><span class="line">根据示例，你的查询应返回以下结果，请你保留3位小数(系统后台也会自动校正)，3位之后四舍五入：</span><br></pre></td></tr></table></figure>
</li>
<li><p>表信息说明</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">university	avg_question_cnt	avg_answer_cnt</span><br><span class="line">北京大学	2.5000	21.000</span><br><span class="line">浙江大学	1.000	2.000</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>问题分解</strong></p>
<ul>
<li>限定条件：平均发贴数低于5或平均回帖数小于20的学校，<code>avg(question_cnt)&lt;5 or avg(answer_cnt)&lt;20</code>，聚合函数结果作为筛选条件时，不能用where，而是用having语法，配合重命名即可；</li>
<li>按学校输出：需要对每个学校统计其平均发贴数和平均回帖数，因此<code>group by university</code></li>
</ul>
</li>
<li><p><strong>问题细节</strong></p>
<ul>
<li>having ，对查询结果进行过滤，过滤不能用  <code>过滤计算函数之后的结果不能用 where 这里</code>。</li>
</ul>
</li>
<li><p>题解</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    university,</span><br><span class="line">    <span class="built_in">avg</span>(question_cnt) <span class="keyword">as</span> avg_question_cnt,</span><br><span class="line">    <span class="built_in">avg</span>(answer_cnt) <span class="keyword">as</span> avg_answer_cnt</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> university</span><br><span class="line"><span class="keyword">having</span> avg_question_cnt<span class="operator">&lt;</span><span class="number">5</span> <span class="keyword">or</span> avg_answer_cnt<span class="operator">&lt;</span><span class="number">20</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第-二十-题-（order-by）"><a href="#第-二十-题-（order-by）" class="headerlink" title="第 二十 题 （order by）"></a>第 二十 题 （order by）</h3><ul>
<li><p><strong>题目</strong></p>
<p>现在运营想要查看不同大学的用户平均发帖情况，并期望结果按照平均发帖情况进行升序排列，请你取出相应数据。</p>
</li>
<li><p>描述</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">第一行表示:id为1的用户的常用信息为使用的设备id为2138，性别为男，年龄21岁，北京大学，gpa为3.4在过去的30天里面活跃了7天，发帖数量为2，回答数量为12</span><br><span class="line">。。。</span><br><span class="line">最后一行表示:id为7的用户的常用信息为使用的设备id为4321，性别为男，年龄26岁，复旦大学，gpa为3.6在过去的30天里面活跃了9天，发帖数量为6，回答数量为52</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询结果</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">university	avg_question_cnt</span><br><span class="line">浙江大学	1.0000</span><br><span class="line">北京大学	2.5000</span><br><span class="line">复旦大学	5.5000</span><br><span class="line">山东大学	11.0000</span><br></pre></td></tr></table></figure>
</li>
<li><p>题解</p>
<ul>
<li>order by 字段名 <code>desc</code> 和 <code>asc</code><ul>
<li><strong>desc</strong> 降序排列</li>
<li><strong>asc</strong> 升序排列（查询结果默认也是升序排列）</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> university, <span class="built_in">avg</span>(question_cnt)  avg_question_cnt</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> university</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第二十一题（子查询）"><a href="#第二十一题（子查询）" class="headerlink" title="第二十一题（子查询）"></a>第二十一题（子查询）</h3><ul>
<li><p><strong>题目</strong></p>
<p>现在运营想要查看所有来自浙江大学的用户题目回答明细情况，请你取出相应数据</p>
</li>
<li><p><strong>描述</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">第一行表示:id为1的用户的常用信息为使用的设备id为2138，性别为男，年龄21岁，北京大学，gpa为3.4在过去的30天里面活跃了7天，发帖数量为2，回答数量为12</span><br><span class="line">。。。</span><br><span class="line">最后一行表示:id为7的用户的常用信息为使用的设备id为4321，性别为男，年龄26岁，复旦大学，gpa为3.6在过去的30天里面活跃了9天，发帖数量为6，回答数量为52</span><br></pre></td></tr></table></figure>


</li>
<li><p><strong>显示信息说明</strong></p>
<p><img src="/hexo/2021/11/16/niu-ke-mysql/%E7%89%9B%E5%AE%A2MySQL/D9E601E7A15464E123E07993B5B38512.png" alt="img"></p>
</li>
<li><p><strong>题解</strong></p>
<ul>
<li><p>解法一：子查询</p>
<ul>
<li>在 where 的位置使用 子查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">device_id,</span><br><span class="line">question_id,</span><br><span class="line"><span class="keyword">result</span></span><br><span class="line"><span class="keyword">FROM</span> question_practice_detail</span><br><span class="line"><span class="keyword">WHERE</span> device_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> device_id <span class="keyword">FROM</span></span><br><span class="line">user_profile</span><br><span class="line"><span class="keyword">WHERE</span> university <span class="operator">=</span><span class="string">&#x27;浙江大学&#x27;</span>);</span><br></pre></td></tr></table></figure>


</li>
<li><p>解法二：连接查询</p>
<ul>
<li>连接查询<ul>
<li>默认是 <code>内连接</code></li>
<li><code>外连接</code> （左连接，右连接）</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> qpd.device_id, qpd.question_id, qpd.result</span><br><span class="line"><span class="keyword">from</span> question_practice_detail <span class="keyword">as</span> qpd</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> user_profile <span class="keyword">as</span> up</span><br><span class="line"><span class="keyword">on</span> up.device_id<span class="operator">=</span>qpd.device_id <span class="keyword">and</span> up.university<span class="operator">=</span><span class="string">&#x27;浙江大学&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> question_id</span><br></pre></td></tr></table></figure>
</li>
<li><p>两个查询的速率这个题目而言，子查询的速度快（具体谁快，等哈）</p>
</li>
</ul>
</li>
</ul>
<h3 id="第二十二（连接查询）"><a href="#第二十二（连接查询）" class="headerlink" title="第二十二（连接查询）"></a>第二十二（连接查询）</h3><ul>
<li><p><strong>题目</strong></p>
<p>运营想要了解每个学校答过题的用户平均答题数量情况，请你取出数据</p>
<p><a href="(1">传送门</a> FROM <left_table>  (2) <join_type> JOIN <right_table>  (3) ON <join_condition>  (4) WHERE <where_condition>  (5) GROUP BY <group_by_list> (6) WITH {CUBE | ROLLUP}  (7) HAVING <having_condition>  (8) SELECT (9) DISTINCT  (9) ORDER BY <order_by_list>  (10) <TOP_specification> <select_list>)</select_list></TOP_specification></order_by_list></having_condition></group_by_list></where_condition></join_condition></right_table></join_type></left_table></p>
</li>
<li><p><strong>描述</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">第一行表示:用户的常用信息为使用的设备id为2138，性别为男，年龄21岁，北京大学，gpa为3.4，在过去的30天里面活跃了7天</span><br><span class="line">最后一行表示:用户的常用信息为使用的设备id为4321，性别为男，年龄28岁，复旦大学，gpa为3.6，在过去的30天里面活跃了9天</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示说明</strong></p>
</li>
<li><p>请你写SQL查找每个学校用户的平均答题数目(说明：某学校用户平均答题数量计算方式为该学校用户答题总次数除以答过题的不同用户个数)根据示例，你的查询应返回以下结果（结果保留4位小数），注意：<strong>结果按照university升序排序！！！</strong></p>
<table>
<thead>
<tr>
<th>university</th>
<th>avg_answer_cnt</th>
</tr>
</thead>
<tbody><tr>
<td>北京大学</td>
<td>1.0000</td>
</tr>
<tr>
<td>复旦大学</td>
<td>2.0000</td>
</tr>
<tr>
<td>山东大学</td>
<td>2.0000</td>
</tr>
<tr>
<td>浙江大学</td>
<td>3.0000</td>
</tr>
</tbody></table>
</li>
<li><p><strong>题解</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	university,</span><br><span class="line">    <span class="built_in">count</span>(question_id) <span class="operator">/</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> qpd.device_id) <span class="keyword">as</span> avg_answer_cnt</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	question_practice_detail <span class="keyword">as</span> qpd</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">	user_profile <span class="keyword">as</span> up</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">	qpd.device_id<span class="operator">=</span>up.device_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">	university</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第二十三（三表查询，注意去重）"><a href="#第二十三（三表查询，注意去重）" class="headerlink" title="第二十三（三表查询，注意去重）"></a>第二十三（三表查询，注意去重）</h3><ul>
<li><p><a href="https://www.nowcoder.com/questionTerminal/5400df085a034f88b2e17941ab338ee8">传送门</a></p>
</li>
<li><p>题解 </p>
<p>统计每个学校各难度的用户平均刷题数</p>
</li>
<li><p>题意明确</p>
<p>计算每个学校用户不同难度下的用户平均答题题目数</p>
</li>
<li><p>问题分解：</p>
<ul>
<li>限定条件：无；</li>
<li>每个学校：按学校分组<code>group by university</code></li>
<li>不同难度：按难度分组<code>group by difficult_level</code></li>
<li>平均答题数：总答题数除以总人数<code>count(qpd.question_id) / count(distinct qpd.device_id)</code></li>
<li>来自上面信息三个表，需要联表，up与qpd用device_id连接，qd与qpd用question_id连接。</li>
</ul>
</li>
<li><p>细节问题：</p>
<ul>
<li>表头重命名：as</li>
<li>平均值精度：保留4位小数round(x, 4)</li>
</ul>
</li>
<li><p>代码</p>
<ul>
<li>解法一（左连接）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    university,</span><br><span class="line">    difficult_level,</span><br><span class="line">    round(<span class="built_in">count</span>(qpd.question_id) <span class="operator">/</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> qpd.device_id), <span class="number">4</span>) <span class="keyword">as</span> avg_answer_cnt</span><br><span class="line"><span class="keyword">from</span> question_practice_detail <span class="keyword">as</span> qpd</span><br><span class="line"></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> user_profile <span class="keyword">as</span> up</span><br><span class="line"><span class="keyword">on</span> up.device_id<span class="operator">=</span>qpd.device_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> question_detail <span class="keyword">as</span> qd</span><br><span class="line"><span class="keyword">on</span> qd.question_id<span class="operator">=</span>qpd.question_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> university, difficult_level</span><br></pre></td></tr></table></figure>



<ul>
<li>解法二（内连接）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> up.university,qd.difficult_level,(<span class="built_in">count</span>(<span class="number">1</span>)<span class="operator">/</span><span class="built_in">count</span>(<span class="keyword">distinct</span>(qpd.device_id))) </span><br><span class="line"><span class="keyword">from</span> user_profile up </span><br><span class="line"><span class="keyword">join</span> question_practice_detail qpd <span class="keyword">on</span> up.device_id <span class="operator">=</span> qpd.device_id</span><br><span class="line"><span class="keyword">join</span> question_detail qd <span class="keyword">on</span> qd.question_id <span class="operator">=</span>qpd.question_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">by</span> up.university,qd.difficult_level</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第二十四"><a href="#第二十四" class="headerlink" title="第二十四"></a>第二十四</h3><ul>
<li><p>[传送门](<a href="https://www.nowcoder.com/practice/f4714f7529404679b7f8909c96299ac4?tpId=199&tqId=1971219&ru=/practice/f9f82607cac44099a77154a80266234a&qru=/ta/sql-quick-study/question-ranking&sourceUrl=/exam/oj?tab=SQL%E7%AF%87&topicId=199&fromPut=pc_wzcpa_yupi_sf">统计每个用户的平均刷题数_牛客题霸_牛客网 (nowcoder.com)</a>)</p>
</li>
<li><p>题解</p>
<p>统计每个用户的平均刷题数</p>
</li>
<li><p>题意明确</p>
</li>
<li><p>问题分解</p>
</li>
<li><p>细节问题</p>
</li>
<li><p>代码</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>题目-题解</title>
    <url>/hexo/2021/10/19/ti-mu-ti-jie/</url>
    <content><![CDATA[<h1 id="第四次题与题解"><a href="#第四次题与题解" class="headerlink" title="第四次题与题解"></a>第四次题与题解</h1><h2 id="凯撒加密"><a href="#凯撒加密" class="headerlink" title="凯撒加密"></a>凯撒加密</h2><ul>
<li><p>题目来源<a href="https://www.luogu.com.cn/problem/P1914">传送门</a></p>
</li>
<li><p>题目</p>
<p><img src="/hexo/2021/10/19/ti-mu-ti-jie/%E9%A2%98%E7%9B%AE-%E9%A2%98%E8%A7%A3/7.png"></p>
</li>
<li><p>题解</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">暂时没有</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="统计单词数"><a href="#统计单词数" class="headerlink" title="统计单词数"></a>统计单词数</h2><ul>
<li><p>题目来源洛谷<a href="https://www.luogu.com.cn/problem/P1308">传送门</a></p>
</li>
<li><p>题目</p>
<p><img src="/hexo/2021/10/19/ti-mu-ti-jie/%E9%A2%98%E7%9B%AE-%E9%A2%98%E8%A7%A3/8.png"></p>
</li>
<li><p>题解</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">暂时没有</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="第三次题与题解"><a href="#第三次题与题解" class="headerlink" title="第三次题与题解"></a>第三次题与题解</h1><h2 id="混子题（具体名字我忘了，我以前在哪儿看到的）"><a href="#混子题（具体名字我忘了，我以前在哪儿看到的）" class="headerlink" title="混子题（具体名字我忘了，我以前在哪儿看到的）"></a>混子题（具体名字我忘了，我以前在哪儿看到的）</h2><ul>
<li><p>题目：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">判辨真假学妹：（有男混子）</span><br><span class="line">	今天 6 名相互认识的20级同学来私聊 issue 学长，有如下结论：</span><br><span class="line">	A，B 至少有一人为学妹</span><br><span class="line">	A，E，F 三人中至少有两人为学妹</span><br><span class="line">	A，D 不可能都为学妹</span><br><span class="line">	B，C 性别相同</span><br><span class="line">	C，D 一男一女</span><br><span class="line">	如果D不是学妹，则E也不可能是学妹</span><br><span class="line">	</span><br><span class="line">通过编程确定他们的性别</span><br></pre></td></tr></table></figure>


</li>
<li><p>题解</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Switch</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i; </span><br><span class="line">	++key;</span><br><span class="line">	key %= <span class="number">3</span>;</span><br><span class="line">	a[<span class="number">0</span>] = key;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="number">2</span> &amp;&amp; a[i] != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i + <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">			a[i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	Switch();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">methord1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">0</span>] + a[<span class="number">1</span>] &gt;= <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">methord2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> ((a[<span class="number">0</span>] + a[<span class="number">4</span>] + a[<span class="number">5</span>]) != <span class="number">0</span> &amp;&amp;(a[<span class="number">0</span>] + a[<span class="number">4</span>] + a[<span class="number">5</span>]) &gt;= <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">methord3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">0</span>] + a[<span class="number">3</span>] != <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">methord4</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">1</span>] == a[<span class="number">2</span>])</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">methord5</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">2</span>] + a[<span class="number">3</span>] == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">methord6</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">3</span>] == <span class="number">0</span> &amp;&amp; a[<span class="number">4</span>] == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c is M\n&quot;</span>, i + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[i] == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c is F\n&quot;</span>, i + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Switch</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (methord1()&amp;&amp;methord3()&amp;&amp;methord4()&amp;&amp;methord5()&amp;&amp;methord6())</span><br><span class="line">		display();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	Switch();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="计数问题"><a href="#计数问题" class="headerlink" title="计数问题"></a>计数问题</h2><p>题目来源-洛谷<a href="https://www.luogu.com.cn/problem/P1980">传送门</a></p>
<ul>
<li><p>题目</p>
<p><img src="/hexo/2021/10/19/ti-mu-ti-jie/%E9%A2%98%E7%9B%AE-%E9%A2%98%E8%A7%A3/6.png" alt="6"></p>
</li>
<li><p>题解</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 待定</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">trans</span><span class="params">(<span class="type">int</span> a,<span class="type">char</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">trans</span><span class="params">(<span class="type">int</span> a,<span class="type">char</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> s[<span class="number">10</span>];</span><br><span class="line">	<span class="type">int</span> j,m,count=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(a&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		m=a%<span class="number">10</span>;</span><br><span class="line">		s[i]=m+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		a=a/<span class="number">10</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	i--;</span><br><span class="line">	j=i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=j;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]==b)</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i,num,count=<span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> s;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line"><span class="comment">//	printf(&quot;num=%d\n&quot;,num);</span></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="type">int</span> a[num],b[num];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;s);</span><br><span class="line"><span class="comment">//	printf(&quot;s=%c\n&quot;,s);</span></span><br><span class="line">	<span class="keyword">if</span>(num&gt;=<span class="number">0</span>&amp;&amp;num&lt;=<span class="number">1000000</span>)</span><br><span class="line">	<span class="keyword">if</span>(s&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=i+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//		printf(&quot;a[%d]=%-5d&quot;,i,a[i]);</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	putchar(&#x27;\n&#x27;);</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		b[i]=trans(a[i],s);</span><br><span class="line"><span class="comment">//		printf(&quot;b[%d]=%-5d\n&quot;,i,b[i]);</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		count+=b[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,count);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="第二次题与题解"><a href="#第二次题与题解" class="headerlink" title="第二次题与题解"></a>第二次题与题解</h1><h2 id="第一个题：数列求和"><a href="#第一个题：数列求和" class="headerlink" title="第一个题：数列求和"></a>第一个题：数列求和</h2><p>题目来源-洛谷<a href="https://www.luogu.com.cn/problem/P5722">传送门</a></p>
<ul>
<li>题目</li>
</ul>
<p><img src="/hexo/2021/10/19/ti-mu-ti-jie/%E9%A2%98%E7%9B%AE-%E9%A2%98%E8%A7%A3/4.png" alt="2"></p>
<ul>
<li>题解</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">methordOne</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i,count=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">			count+=i;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方法循环次数更少，推荐效率高</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">methordTwo</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> i,j,count;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>,j=<span class="number">100</span>; i==j; ++i,--j)</span><br><span class="line">	&#123;</span><br><span class="line">		count+=(i+j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;methordOne：%d\n&quot;</span>,methordOne());</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;methordTwo：%d\n&quot;</span>,methordTwo());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二题：小玉家的电费"><a href="#第二题：小玉家的电费" class="headerlink" title="第二题：小玉家的电费"></a>第二题：小玉家的电费</h2><p>题目来源-洛谷<a href="https://www.luogu.com.cn/problem/P1422">传送门</a></p>
<ul>
<li>题目</li>
</ul>
<p><img src="/hexo/2021/10/19/ti-mu-ti-jie/%E9%A2%98%E7%9B%AE-%E9%A2%98%E8%A7%A3/5.png" alt="5"></p>
<ul>
<li>题解</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">	<span class="keyword">if</span>(num&gt;=<span class="number">0</span>&amp;&amp;num&lt;=<span class="number">10000</span>)</span><br><span class="line">	<span class="keyword">if</span>(num&lt;=<span class="number">150</span>)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-.1f&quot;</span>,(<span class="type">float</span>)num*<span class="number">0.4463</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(num&gt;<span class="number">150</span>&amp;&amp;num&lt;=<span class="number">400</span>)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-.1f&quot;</span>,(<span class="type">float</span>)(num<span class="number">-150</span>)*<span class="number">0.4663</span>+<span class="number">150</span>*<span class="number">0.4463</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-.1f&quot;</span>,(<span class="type">float</span>)(num<span class="number">-400</span>)*<span class="number">0.5663</span>+<span class="number">250</span>*<span class="number">0.4663</span>+<span class="number">150</span>*<span class="number">0.4463</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>程序解释：</strong> </p>
<blockquote>
<p>printf(“%-.1f”,(float)(num-150)<em>0.4663+150</em>0.4463);</p>
</blockquote>
<p>其中 (flaot) 这个语句是强制转换，将后面的运算结果转换成浮点型，如果不转只会输出整型部分</p>
</li>
</ul>
<h1 id="第一次题与题解（群里有-先欠着）"><a href="#第一次题与题解（群里有-先欠着）" class="headerlink" title="第一次题与题解（群里有&#x2F;先欠着）"></a>第一次题与题解（群里有&#x2F;先欠着）</h1>]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>aiot</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>字符设备驱动框架</title>
    <url>/hexo/2021/10/25/qu-dong-kuang-jia-dai-ma/</url>
    <content><![CDATA[<h1 id="字符设备驱动框架代码"><a href="#字符设备驱动框架代码" class="headerlink" title="字符设备驱动框架代码"></a>字符设备驱动框架代码</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span>		 <span class="comment">//file_operations声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span>    <span class="comment">//module_init  module_exit声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span>      <span class="comment">//__init  __exit 宏定义声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/device.h&gt;</span>	 <span class="comment">//class  devise声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/uaccess.h&gt;</span>   <span class="comment">//copy_from_user 的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/types.h&gt;</span>     <span class="comment">//设备号  dev_t 类型声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;asm/io.h&gt;</span>          <span class="comment">//ioremap iounmap的头文件</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="keyword">class</span> *<span class="title">pin4_class</span>;</span>  </span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">pin4_class_dev</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">dev_t</span> devno;                <span class="comment">//设备号</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> major =<span class="number">231</span>;  		   <span class="comment">//主设备号</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> minor =<span class="number">0</span>;			   <span class="comment">//次设备号</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *module_name=<span class="string">&quot;pin4&quot;</span>;   <span class="comment">//模块名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//led_open函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">pin4_open</span><span class="params">(<span class="keyword">struct</span> inode *inode,<span class="keyword">struct</span> file *file)</span></span><br><span class="line">&#123;</span><br><span class="line">    printk(<span class="string">&quot;pin4_open\n&quot;</span>);  <span class="comment">//内核的打印函数和printf类似</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//led_write函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">ssize_t</span> <span class="title function_">pin4_write</span><span class="params">(<span class="keyword">struct</span> file *file,<span class="type">const</span> <span class="type">char</span> __user *buf,<span class="type">size_t</span> count, <span class="type">loff_t</span> *ppos)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">pin4_fops</span> =</span> &#123;</span><br><span class="line"></span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .open  = pin4_open,</span><br><span class="line">    .write = pin4_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __init <span class="title function_">pin4_drv_init</span><span class="params">(<span class="type">void</span>)</span>   </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    devno = MKDEV(major,minor);  <span class="comment">//创建设备号</span></span><br><span class="line">    ret   = register_chrdev(major, module_name,&amp;pin4_fops);  <span class="comment">//注册驱动  告诉内核，把这个驱动加入到内核驱动的链表中</span></span><br><span class="line"></span><br><span class="line">    pin4_class=class_create(THIS_MODULE,<span class="string">&quot;myfirstdemo&quot;</span>);</span><br><span class="line">    pin4_class_dev =device_create(pin4_class,<span class="literal">NULL</span>,devno,<span class="literal">NULL</span>,module_name);  <span class="comment">//创建设备文件</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __exit <span class="title function_">pin4_drv_exit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    device_destroy(pin4_class,devno);</span><br><span class="line">    class_destroy(pin4_class);</span><br><span class="line">    unregister_chrdev(major, module_name);  <span class="comment">//卸载驱动</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">module_init(pin4_drv_init);  <span class="comment">//入口</span></span><br><span class="line">module_exit(pin4_drv_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL v2&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
